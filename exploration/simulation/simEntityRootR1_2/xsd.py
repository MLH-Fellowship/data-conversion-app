# ./data/ceesim/schema/simulation/simEntityRootR1_2/xsd.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:a4350b0d114ff7faaa29729d5e9d9f9b6b49754c
# Generated 2021-02-17 12:33:22.613682 by PyXB version 1.2.6 using Python 3.6.9.final.0
# Namespace http://www.amherst.com/CEESIM/XML

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:5fa244e2-715f-11eb-b1aa-00155debab14')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://www.amherst.com/CEESIM/XML', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDateCreationDate
class stDateCreationDate (pyxb.binding.datatypes.dateTime):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDateCreationDate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 74, 2)
    _Documentation = ''
stDateCreationDate._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stDateCreationDate', stDateCreationDate)
_module_typeBindings.stDateCreationDate = stDateCreationDate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDateModificationDate
class stDateModificationDate (pyxb.binding.datatypes.dateTime):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDateModificationDate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 83, 2)
    _Documentation = ''
stDateModificationDate._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stDateModificationDate', stDateModificationDate)
_module_typeBindings.stDateModificationDate = stDateModificationDate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAltitude
class stDoubleAltitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAltitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 92, 2)
    _Documentation = ''
stDoubleAltitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAltitude, value=pyxb.binding.datatypes.double(-5000000.0))
stDoubleAltitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAltitude, value=pyxb.binding.datatypes.double(5000000.0))
stDoubleAltitude._InitializeFacetMap(stDoubleAltitude._CF_minInclusive,
   stDoubleAltitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAltitude', stDoubleAltitude)
_module_typeBindings.stDoubleAltitude = stDoubleAltitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLatitude
class stDoubleLatitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLatitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 104, 2)
    _Documentation = ''
stDoubleLatitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLatitude, value=pyxb.binding.datatypes.double(-90.0))
stDoubleLatitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLatitude, value=pyxb.binding.datatypes.double(90.0))
stDoubleLatitude._InitializeFacetMap(stDoubleLatitude._CF_minInclusive,
   stDoubleLatitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLatitude', stDoubleLatitude)
_module_typeBindings.stDoubleLatitude = stDoubleLatitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLongitude
class stDoubleLongitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLongitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 116, 2)
    _Documentation = ''
stDoubleLongitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLongitude, value=pyxb.binding.datatypes.double(-180.0))
stDoubleLongitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLongitude, value=pyxb.binding.datatypes.double(180.0))
stDoubleLongitude._InitializeFacetMap(stDoubleLongitude._CF_minInclusive,
   stDoubleLongitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLongitude', stDoubleLongitude)
_module_typeBindings.stDoubleLongitude = stDoubleLongitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleX
class stDoubleX (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleX')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 128, 2)
    _Documentation = ''
stDoubleX._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleX, value=pyxb.binding.datatypes.double(-5000000.0))
stDoubleX._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleX, value=pyxb.binding.datatypes.double(5000000.0))
stDoubleX._InitializeFacetMap(stDoubleX._CF_minInclusive,
   stDoubleX._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleX', stDoubleX)
_module_typeBindings.stDoubleX = stDoubleX

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleY
class stDoubleY (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleY')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 140, 2)
    _Documentation = ''
stDoubleY._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleY, value=pyxb.binding.datatypes.double(-5000000.0))
stDoubleY._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleY, value=pyxb.binding.datatypes.double(5000000.0))
stDoubleY._InitializeFacetMap(stDoubleY._CF_minInclusive,
   stDoubleY._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleY', stDoubleY)
_module_typeBindings.stDoubleY = stDoubleY

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleZ
class stDoubleZ (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleZ')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 152, 2)
    _Documentation = ''
stDoubleZ._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleZ, value=pyxb.binding.datatypes.double(-5000000.0))
stDoubleZ._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleZ, value=pyxb.binding.datatypes.double(5000000.0))
stDoubleZ._InitializeFacetMap(stDoubleZ._CF_minInclusive,
   stDoubleZ._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleZ', stDoubleZ)
_module_typeBindings.stDoubleZ = stDoubleZ

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntTrackPlatformNumber
class stIntTrackPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntTrackPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 164, 2)
    _Documentation = ''
stIntTrackPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntTrackPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntTrackPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntTrackPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntTrackPlatformNumber._InitializeFacetMap(stIntTrackPlatformNumber._CF_minInclusive,
   stIntTrackPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntTrackPlatformNumber', stIntTrackPlatformNumber)
_module_typeBindings.stIntTrackPlatformNumber = stIntTrackPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntUserPlatformNumber
class stIntUserPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntUserPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 176, 2)
    _Documentation = ''
stIntUserPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntUserPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntUserPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntUserPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntUserPlatformNumber._InitializeFacetMap(stIntUserPlatformNumber._CF_minInclusive,
   stIntUserPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntUserPlatformNumber', stIntUserPlatformNumber)
_module_typeBindings.stIntUserPlatformNumber = stIntUserPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringEmitterName
class stStringEmitterName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringEmitterName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 188, 2)
    _Documentation = ''
stStringEmitterName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringEmitterName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringEmitterName._InitializeFacetMap(stStringEmitterName._CF_minLength,
   stStringEmitterName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringEmitterName', stStringEmitterName)
_module_typeBindings.stStringEmitterName = stStringEmitterName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextCommentHeader
class stTextCommentHeader (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextCommentHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 200, 2)
    _Documentation = ''
stTextCommentHeader._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextCommentHeader', stTextCommentHeader)
_module_typeBindings.stTextCommentHeader = stTextCommentHeader

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolChangeTracking
class stBoolChangeTracking (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolChangeTracking')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 162, 2)
    _Documentation = ''
stBoolChangeTracking._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolChangeTracking', stBoolChangeTracking)
_module_typeBindings.stBoolChangeTracking = stBoolChangeTracking

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGeneratorActive
class stBoolGeneratorActive (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGeneratorActive')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 171, 2)
    _Documentation = ''
stBoolGeneratorActive._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGeneratorActive', stBoolGeneratorActive)
_module_typeBindings.stBoolGeneratorActive = stBoolGeneratorActive

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGeneratorEventDefined
class stBoolGeneratorEventDefined (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGeneratorEventDefined')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 180, 2)
    _Documentation = ''
stBoolGeneratorEventDefined._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGeneratorEventDefined', stBoolGeneratorEventDefined)
_module_typeBindings.stBoolGeneratorEventDefined = stBoolGeneratorEventDefined

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterruptActive
class stBoolInterruptActive (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterruptActive')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 189, 2)
    _Documentation = ''
stBoolInterruptActive._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterruptActive', stBoolInterruptActive)
_module_typeBindings.stBoolInterruptActive = stBoolInterruptActive

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolOldTrackDataValid
class stBoolOldTrackDataValid (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolOldTrackDataValid')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 198, 2)
    _Documentation = ''
stBoolOldTrackDataValid._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolOldTrackDataValid', stBoolOldTrackDataValid)
_module_typeBindings.stBoolOldTrackDataValid = stBoolOldTrackDataValid

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolOldTrackIsSut
class stBoolOldTrackIsSut (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolOldTrackIsSut')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 207, 2)
    _Documentation = ''
stBoolOldTrackIsSut._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolOldTrackIsSut', stBoolOldTrackIsSut)
_module_typeBindings.stBoolOldTrackIsSut = stBoolOldTrackIsSut

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolOverrideInterruptGenerators
class stBoolOverrideInterruptGenerators (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolOverrideInterruptGenerators')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 216, 2)
    _Documentation = ''
stBoolOverrideInterruptGenerators._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolOverrideInterruptGenerators', stBoolOverrideInterruptGenerators)
_module_typeBindings.stBoolOverrideInterruptGenerators = stBoolOverrideInterruptGenerators

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolOverrideScanInterrupts
class stBoolOverrideScanInterrupts (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolOverrideScanInterrupts')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 225, 2)
    _Documentation = ''
stBoolOverrideScanInterrupts._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolOverrideScanInterrupts', stBoolOverrideScanInterrupts)
_module_typeBindings.stBoolOverrideScanInterrupts = stBoolOverrideScanInterrupts

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolOverrideTrack
class stBoolOverrideTrack (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolOverrideTrack')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 234, 2)
    _Documentation = ''
stBoolOverrideTrack._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolOverrideTrack', stBoolOverrideTrack)
_module_typeBindings.stBoolOverrideTrack = stBoolOverrideTrack

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRadiationEnable
class stBoolRadiationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRadiationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 243, 2)
    _Documentation = ''
stBoolRadiationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRadiationEnable', stBoolRadiationEnable)
_module_typeBindings.stBoolRadiationEnable = stBoolRadiationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRadiationState
class stBoolRadiationState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRadiationState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 252, 2)
    _Documentation = ''
stBoolRadiationState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRadiationState', stBoolRadiationState)
_module_typeBindings.stBoolRadiationState = stBoolRadiationState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRangeRadiationState
class stBoolRangeRadiationState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRangeRadiationState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 261, 2)
    _Documentation = ''
stBoolRangeRadiationState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRangeRadiationState', stBoolRangeRadiationState)
_module_typeBindings.stBoolRangeRadiationState = stBoolRangeRadiationState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRangeResyncOnModeChangeState
class stBoolRangeResyncOnModeChangeState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRangeResyncOnModeChangeState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 270, 2)
    _Documentation = ''
stBoolRangeResyncOnModeChangeState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRangeResyncOnModeChangeState', stBoolRangeResyncOnModeChangeState)
_module_typeBindings.stBoolRangeResyncOnModeChangeState = stBoolRangeResyncOnModeChangeState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolResyncOnModeChangeState
class stBoolResyncOnModeChangeState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolResyncOnModeChangeState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 279, 2)
    _Documentation = ''
stBoolResyncOnModeChangeState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolResyncOnModeChangeState', stBoolResyncOnModeChangeState)
_module_typeBindings.stBoolResyncOnModeChangeState = stBoolResyncOnModeChangeState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDwellDurationScript
class stDoubleDwellDurationScript (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDwellDurationScript')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 288, 2)
    _Documentation = ''
stDoubleDwellDurationScript._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDwellDurationScript, value=pyxb.binding.datatypes.double(1e-06))
stDoubleDwellDurationScript._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDwellDurationScript, value=pyxb.binding.datatypes.double(137438.953471))
stDoubleDwellDurationScript._InitializeFacetMap(stDoubleDwellDurationScript._CF_minInclusive,
   stDoubleDwellDurationScript._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDwellDurationScript', stDoubleDwellDurationScript)
_module_typeBindings.stDoubleDwellDurationScript = stDoubleDwellDurationScript

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEventTime
class stDoubleEventTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEventTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 300, 2)
    _Documentation = ''
stDoubleEventTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEventTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleEventTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEventTime, value=pyxb.binding.datatypes.double(137438.953471))
stDoubleEventTime._InitializeFacetMap(stDoubleEventTime._CF_minInclusive,
   stDoubleEventTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEventTime', stDoubleEventTime)
_module_typeBindings.stDoubleEventTime = stDoubleEventTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleHighRange
class stDoubleHighRange (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleHighRange')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 312, 2)
    _Documentation = ''
stDoubleHighRange._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleHighRange, value=pyxb.binding.datatypes.double(0.0))
stDoubleHighRange._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleHighRange, value=pyxb.binding.datatypes.double(14724656.0))
stDoubleHighRange._InitializeFacetMap(stDoubleHighRange._CF_minInclusive,
   stDoubleHighRange._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleHighRange', stDoubleHighRange)
_module_typeBindings.stDoubleHighRange = stDoubleHighRange

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleXOffset
class stDoubleXOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleXOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 324, 2)
    _Documentation = ''
stDoubleXOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleXOffset, value=pyxb.binding.datatypes.double(-999999.999))
stDoubleXOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleXOffset, value=pyxb.binding.datatypes.double(999999.999))
stDoubleXOffset._InitializeFacetMap(stDoubleXOffset._CF_minInclusive,
   stDoubleXOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleXOffset', stDoubleXOffset)
_module_typeBindings.stDoubleXOffset = stDoubleXOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleYOffset
class stDoubleYOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleYOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 336, 2)
    _Documentation = ''
stDoubleYOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleYOffset, value=pyxb.binding.datatypes.double(-999999.999))
stDoubleYOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleYOffset, value=pyxb.binding.datatypes.double(999999.999))
stDoubleYOffset._InitializeFacetMap(stDoubleYOffset._CF_minInclusive,
   stDoubleYOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleYOffset', stDoubleYOffset)
_module_typeBindings.stDoubleYOffset = stDoubleYOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleZOffset
class stDoubleZOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleZOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 348, 2)
    _Documentation = ''
stDoubleZOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleZOffset, value=pyxb.binding.datatypes.double(-999999.999))
stDoubleZOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleZOffset, value=pyxb.binding.datatypes.double(999999.999))
stDoubleZOffset._InitializeFacetMap(stDoubleZOffset._CF_minInclusive,
   stDoubleZOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleZOffset', stDoubleZOffset)
_module_typeBindings.stDoubleZOffset = stDoubleZOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumEventType
class stEnumEventType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumEventType')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 360, 2)
    _Documentation = ''
stEnumEventType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumEventType, enum_prefix=None)
stEnumEventType.Activate = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Activate', tag='Activate')
stEnumEventType.Change_Mode = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Change_Mode', tag='Change_Mode')
stEnumEventType.Deactivate = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Deactivate', tag='Deactivate')
stEnumEventType.Disable_Radiation = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Disable_Radiation', tag='Disable_Radiation')
stEnumEventType.Enable_Radiation = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Enable_Radiation', tag='Enable_Radiation')
stEnumEventType.Range_Base_Mode_Change = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Range_Base_Mode_Change', tag='Range_Base_Mode_Change')
stEnumEventType.Mode_Dwell = stEnumEventType._CF_enumeration.addEnumeration(unicode_value='Mode_Dwell', tag='Mode_Dwell')
stEnumEventType._InitializeFacetMap(stEnumEventType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumEventType', stEnumEventType)
_module_typeBindings.stEnumEventType = stEnumEventType

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntEventNumber
class stIntEventNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntEventNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 377, 2)
    _Documentation = ''
stIntEventNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntEventNumber, value=pyxb.binding.datatypes.int(1))
stIntEventNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntEventNumber, value=pyxb.binding.datatypes.int(2147483647))
stIntEventNumber._InitializeFacetMap(stIntEventNumber._CF_minInclusive,
   stIntEventNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntEventNumber', stIntEventNumber)
_module_typeBindings.stIntEventNumber = stIntEventNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntInterruptGeneratorNumber
class stIntInterruptGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntInterruptGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 389, 2)
    _Documentation = ''
stIntInterruptGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntInterruptGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntInterruptGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntInterruptGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntInterruptGeneratorNumber._InitializeFacetMap(stIntInterruptGeneratorNumber._CF_minInclusive,
   stIntInterruptGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntInterruptGeneratorNumber', stIntInterruptGeneratorNumber)
_module_typeBindings.stIntInterruptGeneratorNumber = stIntInterruptGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntPlatformTrackNumber
class stIntPlatformTrackNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntPlatformTrackNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 401, 2)
    _Documentation = ''
stIntPlatformTrackNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntPlatformTrackNumber, value=pyxb.binding.datatypes.int(1))
stIntPlatformTrackNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntPlatformTrackNumber, value=pyxb.binding.datatypes.int(32767))
stIntPlatformTrackNumber._InitializeFacetMap(stIntPlatformTrackNumber._CF_minInclusive,
   stIntPlatformTrackNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntPlatformTrackNumber', stIntPlatformTrackNumber)
_module_typeBindings.stIntPlatformTrackNumber = stIntPlatformTrackNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntScriptGeneratorNumber
class stIntScriptGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntScriptGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 413, 2)
    _Documentation = ''
stIntScriptGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntScriptGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntScriptGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntScriptGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntScriptGeneratorNumber._InitializeFacetMap(stIntScriptGeneratorNumber._CF_minInclusive,
   stIntScriptGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntScriptGeneratorNumber', stIntScriptGeneratorNumber)
_module_typeBindings.stIntScriptGeneratorNumber = stIntScriptGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntUserEmitterNumber
class stIntUserEmitterNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntUserEmitterNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 425, 2)
    _Documentation = ''
stIntUserEmitterNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntUserEmitterNumber, value=pyxb.binding.datatypes.int(1))
stIntUserEmitterNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntUserEmitterNumber, value=pyxb.binding.datatypes.int(32767))
stIntUserEmitterNumber._InitializeFacetMap(stIntUserEmitterNumber._CF_minInclusive,
   stIntUserEmitterNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntUserEmitterNumber', stIntUserEmitterNumber)
_module_typeBindings.stIntUserEmitterNumber = stIntUserEmitterNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringAssociatedSubmodeName
class stStringAssociatedSubmodeName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringAssociatedSubmodeName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 437, 2)
    _Documentation = ''
stStringAssociatedSubmodeName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringAssociatedSubmodeName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringAssociatedSubmodeName._InitializeFacetMap(stStringAssociatedSubmodeName._CF_minLength,
   stStringAssociatedSubmodeName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringAssociatedSubmodeName', stStringAssociatedSubmodeName)
_module_typeBindings.stStringAssociatedSubmodeName = stStringAssociatedSubmodeName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringEmitterId
class stStringEmitterId (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringEmitterId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 449, 2)
    _Documentation = ''
stStringEmitterId._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringEmitterId._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(5))
stStringEmitterId._InitializeFacetMap(stStringEmitterId._CF_minLength,
   stStringEmitterId._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringEmitterId', stStringEmitterId)
_module_typeBindings.stStringEmitterId = stStringEmitterId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringModeNameScript
class stStringModeNameScript (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringModeNameScript')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 462, 2)
    _Documentation = ''
stStringModeNameScript._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringModeNameScript._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringModeNameScript._InitializeFacetMap(stStringModeNameScript._CF_minLength,
   stStringModeNameScript._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringModeNameScript', stStringModeNameScript)
_module_typeBindings.stStringModeNameScript = stStringModeNameScript

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringRangeModeName
class stStringRangeModeName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringRangeModeName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 474, 2)
    _Documentation = ''
stStringRangeModeName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringRangeModeName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringRangeModeName._InitializeFacetMap(stStringRangeModeName._CF_minLength,
   stStringRangeModeName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringRangeModeName', stStringRangeModeName)
_module_typeBindings.stStringRangeModeName = stStringRangeModeName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntDwellTimePulses
class stIntDwellTimePulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntDwellTimePulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1387, 2)
    _Documentation = ''
stIntDwellTimePulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntDwellTimePulses, value=pyxb.binding.datatypes.int(0))
stIntDwellTimePulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntDwellTimePulses, value=pyxb.binding.datatypes.int(2147483647))
stIntDwellTimePulses._InitializeFacetMap(stIntDwellTimePulses._CF_minInclusive,
   stIntDwellTimePulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntDwellTimePulses', stIntDwellTimePulses)
_module_typeBindings.stIntDwellTimePulses = stIntDwellTimePulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSwitchDwellTimePulses
class stIntSwitchDwellTimePulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSwitchDwellTimePulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1399, 2)
    _Documentation = ''
stIntSwitchDwellTimePulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSwitchDwellTimePulses, value=pyxb.binding.datatypes.int(0))
stIntSwitchDwellTimePulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSwitchDwellTimePulses, value=pyxb.binding.datatypes.int(2147483647))
stIntSwitchDwellTimePulses._InitializeFacetMap(stIntSwitchDwellTimePulses._CF_minInclusive,
   stIntSwitchDwellTimePulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSwitchDwellTimePulses', stIntSwitchDwellTimePulses)
_module_typeBindings.stIntSwitchDwellTimePulses = stIntSwitchDwellTimePulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntBeamDwellTimePulses
class stIntBeamDwellTimePulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntBeamDwellTimePulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1411, 2)
    _Documentation = ''
stIntBeamDwellTimePulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntBeamDwellTimePulses, value=pyxb.binding.datatypes.int(0))
stIntBeamDwellTimePulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntBeamDwellTimePulses, value=pyxb.binding.datatypes.int(2147483647))
stIntBeamDwellTimePulses._InitializeFacetMap(stIntBeamDwellTimePulses._CF_minInclusive,
   stIntBeamDwellTimePulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntBeamDwellTimePulses', stIntBeamDwellTimePulses)
_module_typeBindings.stIntBeamDwellTimePulses = stIntBeamDwellTimePulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSubmodeId
class stIntSubmodeId (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSubmodeId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1423, 2)
    _Documentation = ''
stIntSubmodeId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSubmodeId, value=pyxb.binding.datatypes.int(0))
stIntSubmodeId._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSubmodeId, value=pyxb.binding.datatypes.int(2147483647))
stIntSubmodeId._InitializeFacetMap(stIntSubmodeId._CF_minInclusive,
   stIntSubmodeId._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSubmodeId', stIntSubmodeId)
_module_typeBindings.stIntSubmodeId = stIntSubmodeId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntInterruptGeneratorDurationPulses
class stIntInterruptGeneratorDurationPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntInterruptGeneratorDurationPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1435, 2)
    _Documentation = ''
stIntInterruptGeneratorDurationPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntInterruptGeneratorDurationPulses, value=pyxb.binding.datatypes.int(0))
stIntInterruptGeneratorDurationPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntInterruptGeneratorDurationPulses, value=pyxb.binding.datatypes.int(2147483647))
stIntInterruptGeneratorDurationPulses._InitializeFacetMap(stIntInterruptGeneratorDurationPulses._CF_minInclusive,
   stIntInterruptGeneratorDurationPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntInterruptGeneratorDurationPulses', stIntInterruptGeneratorDurationPulses)
_module_typeBindings.stIntInterruptGeneratorDurationPulses = stIntInterruptGeneratorDurationPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntInterruptGeneratorRevisitPulses
class stIntInterruptGeneratorRevisitPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntInterruptGeneratorRevisitPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1447, 2)
    _Documentation = ''
stIntInterruptGeneratorRevisitPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntInterruptGeneratorRevisitPulses, value=pyxb.binding.datatypes.int(0))
stIntInterruptGeneratorRevisitPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntInterruptGeneratorRevisitPulses, value=pyxb.binding.datatypes.int(2147483647))
stIntInterruptGeneratorRevisitPulses._InitializeFacetMap(stIntInterruptGeneratorRevisitPulses._CF_minInclusive,
   stIntInterruptGeneratorRevisitPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntInterruptGeneratorRevisitPulses', stIntInterruptGeneratorRevisitPulses)
_module_typeBindings.stIntInterruptGeneratorRevisitPulses = stIntInterruptGeneratorRevisitPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntInterruptGeneratorStartTimePulses
class stIntInterruptGeneratorStartTimePulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntInterruptGeneratorStartTimePulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1459, 2)
    _Documentation = ''
stIntInterruptGeneratorStartTimePulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntInterruptGeneratorStartTimePulses, value=pyxb.binding.datatypes.int(0))
stIntInterruptGeneratorStartTimePulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntInterruptGeneratorStartTimePulses, value=pyxb.binding.datatypes.int(2147483647))
stIntInterruptGeneratorStartTimePulses._InitializeFacetMap(stIntInterruptGeneratorStartTimePulses._CF_minInclusive,
   stIntInterruptGeneratorStartTimePulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntInterruptGeneratorStartTimePulses', stIntInterruptGeneratorStartTimePulses)
_module_typeBindings.stIntInterruptGeneratorStartTimePulses = stIntInterruptGeneratorStartTimePulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntVirtualNumber
class stIntVirtualNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntVirtualNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1471, 2)
    _Documentation = ''
stIntVirtualNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntVirtualNumber, value=pyxb.binding.datatypes.int(0))
stIntVirtualNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntVirtualNumber, value=pyxb.binding.datatypes.int(65535))
stIntVirtualNumber._InitializeFacetMap(stIntVirtualNumber._CF_minInclusive,
   stIntVirtualNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntVirtualNumber', stIntVirtualNumber)
_module_typeBindings.stIntVirtualNumber = stIntVirtualNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntDwellVariationPulses
class stIntDwellVariationPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntDwellVariationPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1483, 2)
    _Documentation = ''
stIntDwellVariationPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntDwellVariationPulses, value=pyxb.binding.datatypes.int(0))
stIntDwellVariationPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntDwellVariationPulses, value=pyxb.binding.datatypes.int(65535))
stIntDwellVariationPulses._InitializeFacetMap(stIntDwellVariationPulses._CF_minInclusive,
   stIntDwellVariationPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntDwellVariationPulses', stIntDwellVariationPulses)
_module_typeBindings.stIntDwellVariationPulses = stIntDwellVariationPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSiteId
class stIntSiteId (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSiteId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1495, 2)
    _Documentation = ''
stIntSiteId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSiteId, value=pyxb.binding.datatypes.int(0))
stIntSiteId._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSiteId, value=pyxb.binding.datatypes.int(8192))
stIntSiteId._InitializeFacetMap(stIntSiteId._CF_minInclusive,
   stIntSiteId._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSiteId', stIntSiteId)
_module_typeBindings.stIntSiteId = stIntSiteId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntExternalModeId
class stIntExternalModeId (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntExternalModeId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1507, 2)
    _Documentation = ''
stIntExternalModeId._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntExternalModeId, value=pyxb.binding.datatypes.int(0))
stIntExternalModeId._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntExternalModeId, value=pyxb.binding.datatypes.int(8192))
stIntExternalModeId._InitializeFacetMap(stIntExternalModeId._CF_minInclusive,
   stIntExternalModeId._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntExternalModeId', stIntExternalModeId)
_module_typeBindings.stIntExternalModeId = stIntExternalModeId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSubmodeGeneratorNumber
class stIntSubmodeGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSubmodeGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1519, 2)
    _Documentation = ''
stIntSubmodeGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSubmodeGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntSubmodeGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSubmodeGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntSubmodeGeneratorNumber._InitializeFacetMap(stIntSubmodeGeneratorNumber._CF_minInclusive,
   stIntSubmodeGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSubmodeGeneratorNumber', stIntSubmodeGeneratorNumber)
_module_typeBindings.stIntSubmodeGeneratorNumber = stIntSubmodeGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntMasterGeneratorNumber
class stIntMasterGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntMasterGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1531, 2)
    _Documentation = ''
stIntMasterGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntMasterGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntMasterGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntMasterGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntMasterGeneratorNumber._InitializeFacetMap(stIntMasterGeneratorNumber._CF_minInclusive,
   stIntMasterGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntMasterGeneratorNumber', stIntMasterGeneratorNumber)
_module_typeBindings.stIntMasterGeneratorNumber = stIntMasterGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntAzMasterGeneratorNumber
class stIntAzMasterGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntAzMasterGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1543, 2)
    _Documentation = ''
stIntAzMasterGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntAzMasterGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntAzMasterGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntAzMasterGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntAzMasterGeneratorNumber._InitializeFacetMap(stIntAzMasterGeneratorNumber._CF_minInclusive,
   stIntAzMasterGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntAzMasterGeneratorNumber', stIntAzMasterGeneratorNumber)
_module_typeBindings.stIntAzMasterGeneratorNumber = stIntAzMasterGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntElMasterGeneratorNumber
class stIntElMasterGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntElMasterGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1555, 2)
    _Documentation = ''
stIntElMasterGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntElMasterGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntElMasterGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntElMasterGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntElMasterGeneratorNumber._InitializeFacetMap(stIntElMasterGeneratorNumber._CF_minInclusive,
   stIntElMasterGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntElMasterGeneratorNumber', stIntElMasterGeneratorNumber)
_module_typeBindings.stIntElMasterGeneratorNumber = stIntElMasterGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSynchronizedGeneratorNumber
class stIntSynchronizedGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSynchronizedGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1567, 2)
    _Documentation = ''
stIntSynchronizedGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSynchronizedGeneratorNumber, value=pyxb.binding.datatypes.int(0))
stIntSynchronizedGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSynchronizedGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntSynchronizedGeneratorNumber._InitializeFacetMap(stIntSynchronizedGeneratorNumber._CF_minInclusive,
   stIntSynchronizedGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSynchronizedGeneratorNumber', stIntSynchronizedGeneratorNumber)
_module_typeBindings.stIntSynchronizedGeneratorNumber = stIntSynchronizedGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntGeneratorNumber
class stIntGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1579, 2)
    _Documentation = ''
stIntGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntGeneratorNumber, value=pyxb.binding.datatypes.int(1))
stIntGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntGeneratorNumber, value=pyxb.binding.datatypes.int(32))
stIntGeneratorNumber._InitializeFacetMap(stIntGeneratorNumber._CF_minInclusive,
   stIntGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntGeneratorNumber', stIntGeneratorNumber)
_module_typeBindings.stIntGeneratorNumber = stIntGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntAzTrackPlatformNumber
class stIntAzTrackPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntAzTrackPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1591, 2)
    _Documentation = ''
stIntAzTrackPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntAzTrackPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntAzTrackPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntAzTrackPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntAzTrackPlatformNumber._InitializeFacetMap(stIntAzTrackPlatformNumber._CF_minInclusive,
   stIntAzTrackPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntAzTrackPlatformNumber', stIntAzTrackPlatformNumber)
_module_typeBindings.stIntAzTrackPlatformNumber = stIntAzTrackPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntElTrackPlatformNumber
class stIntElTrackPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntElTrackPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1603, 2)
    _Documentation = ''
stIntElTrackPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntElTrackPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntElTrackPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntElTrackPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntElTrackPlatformNumber._InitializeFacetMap(stIntElTrackPlatformNumber._CF_minInclusive,
   stIntElTrackPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntElTrackPlatformNumber', stIntElTrackPlatformNumber)
_module_typeBindings.stIntElTrackPlatformNumber = stIntElTrackPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntBarTrackPlatformNumber
class stIntBarTrackPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntBarTrackPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1615, 2)
    _Documentation = ''
stIntBarTrackPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntBarTrackPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntBarTrackPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntBarTrackPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntBarTrackPlatformNumber._InitializeFacetMap(stIntBarTrackPlatformNumber._CF_minInclusive,
   stIntBarTrackPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntBarTrackPlatformNumber', stIntBarTrackPlatformNumber)
_module_typeBindings.stIntBarTrackPlatformNumber = stIntBarTrackPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntGpOrPoolNumber
class stIntGpOrPoolNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntGpOrPoolNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1627, 2)
    _Documentation = ''
stIntGpOrPoolNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntGpOrPoolNumber, value=pyxb.binding.datatypes.int(1))
stIntGpOrPoolNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntGpOrPoolNumber, value=pyxb.binding.datatypes.int(64))
stIntGpOrPoolNumber._InitializeFacetMap(stIntGpOrPoolNumber._CF_minInclusive,
   stIntGpOrPoolNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntGpOrPoolNumber', stIntGpOrPoolNumber)
_module_typeBindings.stIntGpOrPoolNumber = stIntGpOrPoolNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntChannelNumber
class stIntChannelNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntChannelNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1639, 2)
    _Documentation = ''
stIntChannelNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntChannelNumber, value=pyxb.binding.datatypes.int(1))
stIntChannelNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntChannelNumber, value=pyxb.binding.datatypes.int(64))
stIntChannelNumber._InitializeFacetMap(stIntChannelNumber._CF_minInclusive,
   stIntChannelNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntChannelNumber', stIntChannelNumber)
_module_typeBindings.stIntChannelNumber = stIntChannelNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntPoolNumber
class stIntPoolNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntPoolNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1651, 2)
    _Documentation = ''
stIntPoolNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntPoolNumber, value=pyxb.binding.datatypes.int(1))
stIntPoolNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntPoolNumber, value=pyxb.binding.datatypes.int(64))
stIntPoolNumber._InitializeFacetMap(stIntPoolNumber._CF_minInclusive,
   stIntPoolNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntPoolNumber', stIntPoolNumber)
_module_typeBindings.stIntPoolNumber = stIntPoolNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntTestPointChannelNumber
class stIntTestPointChannelNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntTestPointChannelNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1663, 2)
    _Documentation = ''
stIntTestPointChannelNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntTestPointChannelNumber, value=pyxb.binding.datatypes.int(1))
stIntTestPointChannelNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntTestPointChannelNumber, value=pyxb.binding.datatypes.int(8))
stIntTestPointChannelNumber._InitializeFacetMap(stIntTestPointChannelNumber._CF_minInclusive,
   stIntTestPointChannelNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntTestPointChannelNumber', stIntTestPointChannelNumber)
_module_typeBindings.stIntTestPointChannelNumber = stIntTestPointChannelNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSegmentNumber
class stIntSegmentNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSegmentNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1675, 2)
    _Documentation = ''
stIntSegmentNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSegmentNumber, value=pyxb.binding.datatypes.int(1))
stIntSegmentNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSegmentNumber, value=pyxb.binding.datatypes.int(8192))
stIntSegmentNumber._InitializeFacetMap(stIntSegmentNumber._CF_minInclusive,
   stIntSegmentNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSegmentNumber', stIntSegmentNumber)
_module_typeBindings.stIntSegmentNumber = stIntSegmentNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNormalLinkSegment
class stIntNormalLinkSegment (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNormalLinkSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1687, 2)
    _Documentation = ''
stIntNormalLinkSegment._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNormalLinkSegment, value=pyxb.binding.datatypes.int(1))
stIntNormalLinkSegment._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNormalLinkSegment, value=pyxb.binding.datatypes.int(8192))
stIntNormalLinkSegment._InitializeFacetMap(stIntNormalLinkSegment._CF_minInclusive,
   stIntNormalLinkSegment._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNormalLinkSegment', stIntNormalLinkSegment)
_module_typeBindings.stIntNormalLinkSegment = stIntNormalLinkSegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntExternalLinkSegment
class stIntExternalLinkSegment (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntExternalLinkSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1699, 2)
    _Documentation = ''
stIntExternalLinkSegment._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntExternalLinkSegment, value=pyxb.binding.datatypes.int(1))
stIntExternalLinkSegment._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntExternalLinkSegment, value=pyxb.binding.datatypes.int(8192))
stIntExternalLinkSegment._InitializeFacetMap(stIntExternalLinkSegment._CF_minInclusive,
   stIntExternalLinkSegment._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntExternalLinkSegment', stIntExternalLinkSegment)
_module_typeBindings.stIntExternalLinkSegment = stIntExternalLinkSegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntAssociatedFrequencySegment
class stIntAssociatedFrequencySegment (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntAssociatedFrequencySegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1711, 2)
    _Documentation = ''
stIntAssociatedFrequencySegment._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntAssociatedFrequencySegment, value=pyxb.binding.datatypes.int(1))
stIntAssociatedFrequencySegment._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntAssociatedFrequencySegment, value=pyxb.binding.datatypes.int(8192))
stIntAssociatedFrequencySegment._InitializeFacetMap(stIntAssociatedFrequencySegment._CF_minInclusive,
   stIntAssociatedFrequencySegment._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntAssociatedFrequencySegment', stIntAssociatedFrequencySegment)
_module_typeBindings.stIntAssociatedFrequencySegment = stIntAssociatedFrequencySegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntAssociatedPulseSegment
class stIntAssociatedPulseSegment (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntAssociatedPulseSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1723, 2)
    _Documentation = ''
stIntAssociatedPulseSegment._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntAssociatedPulseSegment, value=pyxb.binding.datatypes.int(1))
stIntAssociatedPulseSegment._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntAssociatedPulseSegment, value=pyxb.binding.datatypes.int(8192))
stIntAssociatedPulseSegment._InitializeFacetMap(stIntAssociatedPulseSegment._CF_minInclusive,
   stIntAssociatedPulseSegment._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntAssociatedPulseSegment', stIntAssociatedPulseSegment)
_module_typeBindings.stIntAssociatedPulseSegment = stIntAssociatedPulseSegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNumberOfElevationLevels
class stIntNumberOfElevationLevels (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNumberOfElevationLevels')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1735, 2)
    _Documentation = ''
stIntNumberOfElevationLevels._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNumberOfElevationLevels, value=pyxb.binding.datatypes.int(1))
stIntNumberOfElevationLevels._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNumberOfElevationLevels, value=pyxb.binding.datatypes.int(999))
stIntNumberOfElevationLevels._InitializeFacetMap(stIntNumberOfElevationLevels._CF_minInclusive,
   stIntNumberOfElevationLevels._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNumberOfElevationLevels', stIntNumberOfElevationLevels)
_module_typeBindings.stIntNumberOfElevationLevels = stIntNumberOfElevationLevels

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNumberOfBars
class stIntNumberOfBars (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNumberOfBars')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1747, 2)
    _Documentation = ''
stIntNumberOfBars._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNumberOfBars, value=pyxb.binding.datatypes.int(2))
stIntNumberOfBars._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNumberOfBars, value=pyxb.binding.datatypes.int(100))
stIntNumberOfBars._InitializeFacetMap(stIntNumberOfBars._CF_minInclusive,
   stIntNumberOfBars._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNumberOfBars', stIntNumberOfBars)
_module_typeBindings.stIntNumberOfBars = stIntNumberOfBars

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntDelayTimeModPeriodPulses
class stIntDelayTimeModPeriodPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntDelayTimeModPeriodPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1759, 2)
    _Documentation = ''
stIntDelayTimeModPeriodPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntDelayTimeModPeriodPulses, value=pyxb.binding.datatypes.int(2))
stIntDelayTimeModPeriodPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntDelayTimeModPeriodPulses, value=pyxb.binding.datatypes.int(268435455))
stIntDelayTimeModPeriodPulses._InitializeFacetMap(stIntDelayTimeModPeriodPulses._CF_minInclusive,
   stIntDelayTimeModPeriodPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntDelayTimeModPeriodPulses', stIntDelayTimeModPeriodPulses)
_module_typeBindings.stIntDelayTimeModPeriodPulses = stIntDelayTimeModPeriodPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntIntDurOverridePulses
class stIntIntDurOverridePulses (pyxb.binding.datatypes.int, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntIntDurOverridePulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1771, 2)
    _Documentation = ''
stIntIntDurOverridePulses._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stIntIntDurOverridePulses, enum_prefix=None)
stIntIntDurOverridePulses._CF_enumeration.addEnumeration(unicode_value='1', tag=None)
stIntIntDurOverridePulses._CF_enumeration.addEnumeration(unicode_value='2147483647', tag=None)
stIntIntDurOverridePulses._InitializeFacetMap(stIntIntDurOverridePulses._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stIntIntDurOverridePulses', stIntIntDurOverridePulses)
_module_typeBindings.stIntIntDurOverridePulses = stIntIntDurOverridePulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntModPeriodPulses
class stIntModPeriodPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntModPeriodPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1783, 2)
    _Documentation = ''
stIntModPeriodPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntModPeriodPulses, value=pyxb.binding.datatypes.int(2))
stIntModPeriodPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntModPeriodPulses, value=pyxb.binding.datatypes.int(268435455))
stIntModPeriodPulses._InitializeFacetMap(stIntModPeriodPulses._CF_minInclusive,
   stIntModPeriodPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntModPeriodPulses', stIntModPeriodPulses)
_module_typeBindings.stIntModPeriodPulses = stIntModPeriodPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntInterpulseModulationPeriodPulses
class stIntInterpulseModulationPeriodPulses (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntInterpulseModulationPeriodPulses')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1795, 2)
    _Documentation = ''
stIntInterpulseModulationPeriodPulses._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntInterpulseModulationPeriodPulses, value=pyxb.binding.datatypes.int(2))
stIntInterpulseModulationPeriodPulses._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntInterpulseModulationPeriodPulses, value=pyxb.binding.datatypes.int(268435455))
stIntInterpulseModulationPeriodPulses._InitializeFacetMap(stIntInterpulseModulationPeriodPulses._CF_minInclusive,
   stIntInterpulseModulationPeriodPulses._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntInterpulseModulationPeriodPulses', stIntInterpulseModulationPeriodPulses)
_module_typeBindings.stIntInterpulseModulationPeriodPulses = stIntInterpulseModulationPeriodPulses

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNumberOfRevolutions
class stIntNumberOfRevolutions (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNumberOfRevolutions')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1807, 2)
    _Documentation = ''
stIntNumberOfRevolutions._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNumberOfRevolutions, value=pyxb.binding.datatypes.int(2))
stIntNumberOfRevolutions._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNumberOfRevolutions, value=pyxb.binding.datatypes.int(32))
stIntNumberOfRevolutions._InitializeFacetMap(stIntNumberOfRevolutions._CF_minInclusive,
   stIntNumberOfRevolutions._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNumberOfRevolutions', stIntNumberOfRevolutions)
_module_typeBindings.stIntNumberOfRevolutions = stIntNumberOfRevolutions

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecJitterLimit
class stDoubleSecJitterLimit (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecJitterLimit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1819, 2)
    _Documentation = ''
stDoubleSecJitterLimit._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecJitterLimit, value=pyxb.binding.datatypes.double(2.3283e-16))
stDoubleSecJitterLimit._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecJitterLimit, value=pyxb.binding.datatypes.double(9.9996948e-07))
stDoubleSecJitterLimit._InitializeFacetMap(stDoubleSecJitterLimit._CF_minInclusive,
   stDoubleSecJitterLimit._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecJitterLimit', stDoubleSecJitterLimit)
_module_typeBindings.stDoubleSecJitterLimit = stDoubleSecJitterLimit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecModAmp
class stDoubleSecModAmp (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecModAmp')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1831, 2)
    _Documentation = ''
stDoubleSecModAmp._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecModAmp, value=pyxb.binding.datatypes.double(2.3283e-16))
stDoubleSecModAmp._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecModAmp, value=pyxb.binding.datatypes.double(9.9996948e-07))
stDoubleSecModAmp._InitializeFacetMap(stDoubleSecModAmp._CF_minInclusive,
   stDoubleSecModAmp._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecModAmp', stDoubleSecModAmp)
_module_typeBindings.stDoubleSecModAmp = stDoubleSecModAmp

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecDtJitterLimit
class stDoubleSecDtJitterLimit (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecDtJitterLimit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1843, 2)
    _Documentation = ''
stDoubleSecDtJitterLimit._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecDtJitterLimit, value=pyxb.binding.datatypes.double(2.3283e-16))
stDoubleSecDtJitterLimit._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecDtJitterLimit, value=pyxb.binding.datatypes.double(9.9996948196e-07))
stDoubleSecDtJitterLimit._InitializeFacetMap(stDoubleSecDtJitterLimit._CF_minInclusive,
   stDoubleSecDtJitterLimit._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecDtJitterLimit', stDoubleSecDtJitterLimit)
_module_typeBindings.stDoubleSecDtJitterLimit = stDoubleSecDtJitterLimit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecDtModAmp
class stDoubleSecDtModAmp (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecDtModAmp')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1855, 2)
    _Documentation = ''
stDoubleSecDtModAmp._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecDtModAmp, value=pyxb.binding.datatypes.double(2.3283e-16))
stDoubleSecDtModAmp._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecDtModAmp, value=pyxb.binding.datatypes.double(9.9996948196e-07))
stDoubleSecDtModAmp._InitializeFacetMap(stDoubleSecDtModAmp._CF_minInclusive,
   stDoubleSecDtModAmp._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecDtModAmp', stDoubleSecDtModAmp)
_module_typeBindings.stDoubleSecDtModAmp = stDoubleSecDtModAmp

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePriCrystalValue
class stDoublePriCrystalValue (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePriCrystalValue')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1867, 2)
    _Documentation = ''
stDoublePriCrystalValue._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePriCrystalValue, value=pyxb.binding.datatypes.double(2.3283e-16))
stDoublePriCrystalValue._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePriCrystalValue, value=pyxb.binding.datatypes.double(0.00051199998474121))
stDoublePriCrystalValue._InitializeFacetMap(stDoublePriCrystalValue._CF_minInclusive,
   stDoublePriCrystalValue._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePriCrystalValue', stDoublePriCrystalValue)
_module_typeBindings.stDoublePriCrystalValue = stDoublePriCrystalValue

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleRasterFlybackTime
class stDoubleRasterFlybackTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleRasterFlybackTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1879, 2)
    _Documentation = ''
stDoubleRasterFlybackTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleRasterFlybackTime, value=pyxb.binding.datatypes.double(1e-06))
stDoubleRasterFlybackTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleRasterFlybackTime, value=pyxb.binding.datatypes.double(120.0))
stDoubleRasterFlybackTime._InitializeFacetMap(stDoubleRasterFlybackTime._CF_minInclusive,
   stDoubleRasterFlybackTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleRasterFlybackTime', stDoubleRasterFlybackTime)
_module_typeBindings.stDoubleRasterFlybackTime = stDoubleRasterFlybackTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePalmerRate
class stDoublePalmerRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePalmerRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1891, 2)
    _Documentation = ''
stDoublePalmerRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePalmerRate, value=pyxb.binding.datatypes.double(0.0002328))
stDoublePalmerRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePalmerRate, value=pyxb.binding.datatypes.double(31250.0))
stDoublePalmerRate._InitializeFacetMap(stDoublePalmerRate._CF_minInclusive,
   stDoublePalmerRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePalmerRate', stDoublePalmerRate)
_module_typeBindings.stDoublePalmerRate = stDoublePalmerRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePolarizationModRate
class stDoublePolarizationModRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePolarizationModRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1903, 2)
    _Documentation = ''
stDoublePolarizationModRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePolarizationModRate, value=pyxb.binding.datatypes.double(0.0002328))
stDoublePolarizationModRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePolarizationModRate, value=pyxb.binding.datatypes.double(31250.0))
stDoublePolarizationModRate._InitializeFacetMap(stDoublePolarizationModRate._CF_minInclusive,
   stDoublePolarizationModRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePolarizationModRate', stDoublePolarizationModRate)
_module_typeBindings.stDoublePolarizationModRate = stDoublePolarizationModRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleConicalModRate
class stDoubleConicalModRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleConicalModRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1915, 2)
    _Documentation = ''
stDoubleConicalModRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleConicalModRate, value=pyxb.binding.datatypes.double(0.0002328))
stDoubleConicalModRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleConicalModRate, value=pyxb.binding.datatypes.double(31250.0))
stDoubleConicalModRate._InitializeFacetMap(stDoubleConicalModRate._CF_minInclusive,
   stDoubleConicalModRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleConicalModRate', stDoubleConicalModRate)
_module_typeBindings.stDoubleConicalModRate = stDoubleConicalModRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSpiralModulationRate
class stDoubleSpiralModulationRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSpiralModulationRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1927, 2)
    _Documentation = ''
stDoubleSpiralModulationRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSpiralModulationRate, value=pyxb.binding.datatypes.double(0.0002328))
stDoubleSpiralModulationRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSpiralModulationRate, value=pyxb.binding.datatypes.double(31250.0))
stDoubleSpiralModulationRate._InitializeFacetMap(stDoubleSpiralModulationRate._CF_minInclusive,
   stDoubleSpiralModulationRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSpiralModulationRate', stDoubleSpiralModulationRate)
_module_typeBindings.stDoubleSpiralModulationRate = stDoubleSpiralModulationRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElScanPeriod
class stDoubleElScanPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElScanPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1939, 2)
    _Documentation = ''
stDoubleElScanPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElScanPeriod, value=pyxb.binding.datatypes.double(0.000256))
stDoubleElScanPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElScanPeriod, value=pyxb.binding.datatypes.double(1073.741824))
stDoubleElScanPeriod._InitializeFacetMap(stDoubleElScanPeriod._CF_minInclusive,
   stDoubleElScanPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElScanPeriod', stDoubleElScanPeriod)
_module_typeBindings.stDoubleElScanPeriod = stDoubleElScanPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleHelicalScanPeriod
class stDoubleHelicalScanPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleHelicalScanPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1951, 2)
    _Documentation = ''
stDoubleHelicalScanPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleHelicalScanPeriod, value=pyxb.binding.datatypes.double(0.000256))
stDoubleHelicalScanPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleHelicalScanPeriod, value=pyxb.binding.datatypes.double(1073.741824))
stDoubleHelicalScanPeriod._InitializeFacetMap(stDoubleHelicalScanPeriod._CF_minInclusive,
   stDoubleHelicalScanPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleHelicalScanPeriod', stDoubleHelicalScanPeriod)
_module_typeBindings.stDoubleHelicalScanPeriod = stDoubleHelicalScanPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzScanPeriod
class stDoubleAzScanPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzScanPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1963, 2)
    _Documentation = ''
stDoubleAzScanPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzScanPeriod, value=pyxb.binding.datatypes.double(0.000256))
stDoubleAzScanPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzScanPeriod, value=pyxb.binding.datatypes.double(2147.418112))
stDoubleAzScanPeriod._InitializeFacetMap(stDoubleAzScanPeriod._CF_minInclusive,
   stDoubleAzScanPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzScanPeriod', stDoubleAzScanPeriod)
_module_typeBindings.stDoubleAzScanPeriod = stDoubleAzScanPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePulseWidth
class stDoublePulseWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1975, 2)
    _Documentation = ''
stDoublePulseWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePulseWidth, value=pyxb.binding.datatypes.double(3.90625e-09))
stDoublePulseWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePulseWidth, value=pyxb.binding.datatypes.double(0.13107199609375))
stDoublePulseWidth._InitializeFacetMap(stDoublePulseWidth._CF_minInclusive,
   stDoublePulseWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePulseWidth', stDoublePulseWidth)
_module_typeBindings.stDoublePulseWidth = stDoublePulseWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleJitterLimitPulse
class stDoubleJitterLimitPulse (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleJitterLimitPulse')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1987, 2)
    _Documentation = ''
stDoubleJitterLimitPulse._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleJitterLimitPulse, value=pyxb.binding.datatypes.double(3.90625e-09))
stDoubleJitterLimitPulse._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleJitterLimitPulse, value=pyxb.binding.datatypes.double(0.06553599609375))
stDoubleJitterLimitPulse._InitializeFacetMap(stDoubleJitterLimitPulse._CF_minInclusive,
   stDoubleJitterLimitPulse._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleJitterLimitPulse', stDoubleJitterLimitPulse)
_module_typeBindings.stDoubleJitterLimitPulse = stDoubleJitterLimitPulse

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStaggerModDwellTime
class stDoubleStaggerModDwellTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStaggerModDwellTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1999, 2)
    _Documentation = ''
stDoubleStaggerModDwellTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStaggerModDwellTime, value=pyxb.binding.datatypes.double(3.91e-09))
stDoubleStaggerModDwellTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStaggerModDwellTime, value=pyxb.binding.datatypes.double(0.131071996))
stDoubleStaggerModDwellTime._InitializeFacetMap(stDoubleStaggerModDwellTime._CF_minInclusive,
   stDoubleStaggerModDwellTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStaggerModDwellTime', stDoubleStaggerModDwellTime)
_module_typeBindings.stDoubleStaggerModDwellTime = stDoubleStaggerModDwellTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleHfimSize
class stDoubleHfimSize (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleHfimSize')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2011, 2)
    _Documentation = ''
stDoubleHfimSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleHfimSize, value=pyxb.binding.datatypes.double(2e-08))
stDoubleHfimSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleHfimSize, value=pyxb.binding.datatypes.double(0.065535))
stDoubleHfimSize._InitializeFacetMap(stDoubleHfimSize._CF_minInclusive,
   stDoubleHfimSize._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleHfimSize', stDoubleHfimSize)
_module_typeBindings.stDoubleHfimSize = stDoubleHfimSize

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElSectorWidth
class stDoubleElSectorWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElSectorWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2023, 2)
    _Documentation = ''
stDoubleElSectorWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElSectorWidth, value=pyxb.binding.datatypes.double(0.02197))
stDoubleElSectorWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElSectorWidth, value=pyxb.binding.datatypes.double(180.0))
stDoubleElSectorWidth._InitializeFacetMap(stDoubleElSectorWidth._CF_minInclusive,
   stDoubleElSectorWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElSectorWidth', stDoubleElSectorWidth)
_module_typeBindings.stDoubleElSectorWidth = stDoubleElSectorWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleHelicalSectorWidth
class stDoubleHelicalSectorWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleHelicalSectorWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2035, 2)
    _Documentation = ''
stDoubleHelicalSectorWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleHelicalSectorWidth, value=pyxb.binding.datatypes.double(0.02197))
stDoubleHelicalSectorWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleHelicalSectorWidth, value=pyxb.binding.datatypes.double(180.0))
stDoubleHelicalSectorWidth._InitializeFacetMap(stDoubleHelicalSectorWidth._CF_minInclusive,
   stDoubleHelicalSectorWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleHelicalSectorWidth', stDoubleHelicalSectorWidth)
_module_typeBindings.stDoubleHelicalSectorWidth = stDoubleHelicalSectorWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzSectorWidth
class stDoubleAzSectorWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzSectorWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2047, 2)
    _Documentation = ''
stDoubleAzSectorWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzSectorWidth, value=pyxb.binding.datatypes.double(0.02197))
stDoubleAzSectorWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzSectorWidth, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzSectorWidth._InitializeFacetMap(stDoubleAzSectorWidth._CF_minInclusive,
   stDoubleAzSectorWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzSectorWidth', stDoubleAzSectorWidth)
_module_typeBindings.stDoubleAzSectorWidth = stDoubleAzSectorWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarWidth
class stDoubleBarWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2059, 2)
    _Documentation = ''
stDoubleBarWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarWidth, value=pyxb.binding.datatypes.double(0.02197))
stDoubleBarWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarWidth, value=pyxb.binding.datatypes.double(359.978))
stDoubleBarWidth._InitializeFacetMap(stDoubleBarWidth._CF_minInclusive,
   stDoubleBarWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarWidth', stDoubleBarWidth)
_module_typeBindings.stDoubleBarWidth = stDoubleBarWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleCoverageAngle
class stDoubleCoverageAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleCoverageAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2071, 2)
    _Documentation = ''
stDoubleCoverageAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleCoverageAngle, value=pyxb.binding.datatypes.double(0.02197))
stDoubleCoverageAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleCoverageAngle, value=pyxb.binding.datatypes.double(359.978))
stDoubleCoverageAngle._InitializeFacetMap(stDoubleCoverageAngle._CF_minInclusive,
   stDoubleCoverageAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleCoverageAngle', stDoubleCoverageAngle)
_module_typeBindings.stDoubleCoverageAngle = stDoubleCoverageAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstPri
class stDoubleBurstPri (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstPri')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2083, 2)
    _Documentation = ''
stDoubleBurstPri._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstPri, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstPri._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstPri, value=pyxb.binding.datatypes.double(0.001024))
stDoubleBurstPri._InitializeFacetMap(stDoubleBurstPri._CF_minInclusive,
   stDoubleBurstPri._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstPri', stDoubleBurstPri)
_module_typeBindings.stDoubleBurstPri = stDoubleBurstPri

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstModBasePri
class stDoubleBurstModBasePri (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstModBasePri')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2095, 2)
    _Documentation = ''
stDoubleBurstModBasePri._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstModBasePri, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstModBasePri._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstModBasePri, value=pyxb.binding.datatypes.double(0.001024))
stDoubleBurstModBasePri._InitializeFacetMap(stDoubleBurstModBasePri._CF_minInclusive,
   stDoubleBurstModBasePri._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstModBasePri', stDoubleBurstModBasePri)
_module_typeBindings.stDoubleBurstModBasePri = stDoubleBurstModBasePri

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstPulseWidth
class stDoubleBurstPulseWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstPulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2107, 2)
    _Documentation = ''
stDoubleBurstPulseWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstPulseWidth, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoubleBurstPulseWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstPulseWidth, value=pyxb.binding.datatypes.double(0.000512))
stDoubleBurstPulseWidth._InitializeFacetMap(stDoubleBurstPulseWidth._CF_minInclusive,
   stDoubleBurstPulseWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstPulseWidth', stDoubleBurstPulseWidth)
_module_typeBindings.stDoubleBurstPulseWidth = stDoubleBurstPulseWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstModPulseWidth
class stDoubleBurstModPulseWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstModPulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2119, 2)
    _Documentation = ''
stDoubleBurstModPulseWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstModPulseWidth, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoubleBurstModPulseWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstModPulseWidth, value=pyxb.binding.datatypes.double(0.000512))
stDoubleBurstModPulseWidth._InitializeFacetMap(stDoubleBurstModPulseWidth._CF_minInclusive,
   stDoubleBurstModPulseWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstModPulseWidth', stDoubleBurstModPulseWidth)
_module_typeBindings.stDoubleBurstModPulseWidth = stDoubleBurstModPulseWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAmplitudeCellSize
class stDoubleAmplitudeCellSize (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAmplitudeCellSize')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2131, 2)
    _Documentation = ''
stDoubleAmplitudeCellSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAmplitudeCellSize, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoubleAmplitudeCellSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAmplitudeCellSize, value=pyxb.binding.datatypes.double(0.131072))
stDoubleAmplitudeCellSize._InitializeFacetMap(stDoubleAmplitudeCellSize._CF_minInclusive,
   stDoubleAmplitudeCellSize._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAmplitudeCellSize', stDoubleAmplitudeCellSize)
_module_typeBindings.stDoubleAmplitudeCellSize = stDoubleAmplitudeCellSize

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFrequencyCellSize
class stDoubleFrequencyCellSize (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFrequencyCellSize')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2143, 2)
    _Documentation = ''
stDoubleFrequencyCellSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFrequencyCellSize, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoubleFrequencyCellSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFrequencyCellSize, value=pyxb.binding.datatypes.double(0.131072))
stDoubleFrequencyCellSize._InitializeFacetMap(stDoubleFrequencyCellSize._CF_minInclusive,
   stDoubleFrequencyCellSize._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFrequencyCellSize', stDoubleFrequencyCellSize)
_module_typeBindings.stDoubleFrequencyCellSize = stDoubleFrequencyCellSize

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePhaseCellSize
class stDoublePhaseCellSize (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePhaseCellSize')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2155, 2)
    _Documentation = ''
stDoublePhaseCellSize._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePhaseCellSize, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoublePhaseCellSize._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePhaseCellSize, value=pyxb.binding.datatypes.double(0.131072))
stDoublePhaseCellSize._InitializeFacetMap(stDoublePhaseCellSize._CF_minInclusive,
   stDoublePhaseCellSize._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePhaseCellSize', stDoublePhaseCellSize)
_module_typeBindings.stDoublePhaseCellSize = stDoublePhaseCellSize

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLinearFreqDuration
class stDoubleLinearFreqDuration (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLinearFreqDuration')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2167, 2)
    _Documentation = ''
stDoubleLinearFreqDuration._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLinearFreqDuration, value=pyxb.binding.datatypes.double(7.8125e-09))
stDoubleLinearFreqDuration._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLinearFreqDuration, value=pyxb.binding.datatypes.double(0.131072))
stDoubleLinearFreqDuration._InitializeFacetMap(stDoubleLinearFreqDuration._CF_minInclusive,
   stDoubleLinearFreqDuration._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLinearFreqDuration', stDoubleLinearFreqDuration)
_module_typeBindings.stDoubleLinearFreqDuration = stDoubleLinearFreqDuration

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstModDeviation
class stDoubleBurstModDeviation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstModDeviation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2179, 2)
    _Documentation = ''
stDoubleBurstModDeviation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstModDeviation, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstModDeviation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstModDeviation, value=pyxb.binding.datatypes.double(0.001023984375))
stDoubleBurstModDeviation._InitializeFacetMap(stDoubleBurstModDeviation._CF_minInclusive,
   stDoubleBurstModDeviation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstModDeviation', stDoubleBurstModDeviation)
_module_typeBindings.stDoubleBurstModDeviation = stDoubleBurstModDeviation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstDwell
class stDoubleBurstDwell (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstDwell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2191, 2)
    _Documentation = ''
stDoubleBurstDwell._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstDwell, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstDwell._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstDwell, value=pyxb.binding.datatypes.double(0.1310719921875))
stDoubleBurstDwell._InitializeFacetMap(stDoubleBurstDwell._CF_minInclusive,
   stDoubleBurstDwell._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstDwell', stDoubleBurstDwell)
_module_typeBindings.stDoubleBurstDwell = stDoubleBurstDwell

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstModDwell
class stDoubleBurstModDwell (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstModDwell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2203, 2)
    _Documentation = ''
stDoubleBurstModDwell._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstModDwell, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstModDwell._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstModDwell, value=pyxb.binding.datatypes.double(0.1310719921875))
stDoubleBurstModDwell._InitializeFacetMap(stDoubleBurstModDwell._CF_minInclusive,
   stDoubleBurstModDwell._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstModDwell', stDoubleBurstModDwell)
_module_typeBindings.stDoubleBurstModDwell = stDoubleBurstModDwell

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStaggerModDwellTimeSinglePulse
class stDoubleStaggerModDwellTimeSinglePulse (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStaggerModDwellTimeSinglePulse')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2215, 2)
    _Documentation = ''
stDoubleStaggerModDwellTimeSinglePulse._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStaggerModDwellTimeSinglePulse, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleStaggerModDwellTimeSinglePulse._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStaggerModDwellTimeSinglePulse, value=pyxb.binding.datatypes.double(0.1310719921875))
stDoubleStaggerModDwellTimeSinglePulse._InitializeFacetMap(stDoubleStaggerModDwellTimeSinglePulse._CF_minInclusive,
   stDoubleStaggerModDwellTimeSinglePulse._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStaggerModDwellTimeSinglePulse', stDoubleStaggerModDwellTimeSinglePulse)
_module_typeBindings.stDoubleStaggerModDwellTimeSinglePulse = stDoubleStaggerModDwellTimeSinglePulse

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstPulseDuration
class stDoubleBurstPulseDuration (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstPulseDuration')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2227, 2)
    _Documentation = ''
stDoubleBurstPulseDuration._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstPulseDuration, value=pyxb.binding.datatypes.double(1.5625e-08))
stDoubleBurstPulseDuration._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstPulseDuration, value=pyxb.binding.datatypes.double(0.1310719921875))
stDoubleBurstPulseDuration._InitializeFacetMap(stDoubleBurstPulseDuration._CF_minInclusive,
   stDoubleBurstPulseDuration._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstPulseDuration', stDoubleBurstPulseDuration)
_module_typeBindings.stDoubleBurstPulseDuration = stDoubleBurstPulseDuration

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarScanRate
class stDoubleBarScanRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarScanRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2239, 2)
    _Documentation = ''
stDoubleBarScanRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarScanRate, value=pyxb.binding.datatypes.double(0.1676))
stDoubleBarScanRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarScanRate, value=pyxb.binding.datatypes.double(703125.0))
stDoubleBarScanRate._InitializeFacetMap(stDoubleBarScanRate._CF_minInclusive,
   stDoubleBarScanRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarScanRate', stDoubleBarScanRate)
_module_typeBindings.stDoubleBarScanRate = stDoubleBarScanRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSwitchDelayTime
class stDoubleSwitchDelayTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSwitchDelayTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2251, 2)
    _Documentation = ''
stDoubleSwitchDelayTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSwitchDelayTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleSwitchDelayTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSwitchDelayTime, value=pyxb.binding.datatypes.double(512.0))
stDoubleSwitchDelayTime._InitializeFacetMap(stDoubleSwitchDelayTime._CF_minInclusive,
   stDoubleSwitchDelayTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSwitchDelayTime', stDoubleSwitchDelayTime)
_module_typeBindings.stDoubleSwitchDelayTime = stDoubleSwitchDelayTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDwellVariation
class stDoubleDwellVariation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDwellVariation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2263, 2)
    _Documentation = ''
stDoubleDwellVariation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDwellVariation, value=pyxb.binding.datatypes.double(0.0))
stDoubleDwellVariation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDwellVariation, value=pyxb.binding.datatypes.double(0.131072))
stDoubleDwellVariation._InitializeFacetMap(stDoubleDwellVariation._CF_minInclusive,
   stDoubleDwellVariation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDwellVariation', stDoubleDwellVariation)
_module_typeBindings.stDoubleDwellVariation = stDoubleDwellVariation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzFlybackTime
class stDoubleAzFlybackTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzFlybackTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2275, 2)
    _Documentation = ''
stDoubleAzFlybackTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzFlybackTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleAzFlybackTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzFlybackTime, value=pyxb.binding.datatypes.double(120.0))
stDoubleAzFlybackTime._InitializeFacetMap(stDoubleAzFlybackTime._CF_minInclusive,
   stDoubleAzFlybackTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzFlybackTime', stDoubleAzFlybackTime)
_module_typeBindings.stDoubleAzFlybackTime = stDoubleAzFlybackTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElFlybackTime
class stDoubleElFlybackTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElFlybackTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2287, 2)
    _Documentation = ''
stDoubleElFlybackTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElFlybackTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleElFlybackTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElFlybackTime, value=pyxb.binding.datatypes.double(120.0))
stDoubleElFlybackTime._InitializeFacetMap(stDoubleElFlybackTime._CF_minInclusive,
   stDoubleElFlybackTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElFlybackTime', stDoubleElFlybackTime)
_module_typeBindings.stDoubleElFlybackTime = stDoubleElFlybackTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFlybackTime
class stDoubleFlybackTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFlybackTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2299, 2)
    _Documentation = ''
stDoubleFlybackTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFlybackTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleFlybackTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFlybackTime, value=pyxb.binding.datatypes.double(120.0))
stDoubleFlybackTime._InitializeFacetMap(stDoubleFlybackTime._CF_minInclusive,
   stDoubleFlybackTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFlybackTime', stDoubleFlybackTime)
_module_typeBindings.stDoubleFlybackTime = stDoubleFlybackTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleTransmitAttenuation
class stDoubleTransmitAttenuation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleTransmitAttenuation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2311, 2)
    _Documentation = ''
stDoubleTransmitAttenuation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleTransmitAttenuation, value=pyxb.binding.datatypes.double(0.0))
stDoubleTransmitAttenuation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleTransmitAttenuation, value=pyxb.binding.datatypes.double(127.75))
stDoubleTransmitAttenuation._InitializeFacetMap(stDoubleTransmitAttenuation._CF_minInclusive,
   stDoubleTransmitAttenuation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleTransmitAttenuation', stDoubleTransmitAttenuation)
_module_typeBindings.stDoubleTransmitAttenuation = stDoubleTransmitAttenuation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFrequencyOffset
class stDoubleFrequencyOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFrequencyOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2323, 2)
    _Documentation = ''
stDoubleFrequencyOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFrequencyOffset, value=pyxb.binding.datatypes.double(-16000000000.0))
stDoubleFrequencyOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFrequencyOffset, value=pyxb.binding.datatypes.double(16000000000.0))
stDoubleFrequencyOffset._InitializeFacetMap(stDoubleFrequencyOffset._CF_minInclusive,
   stDoubleFrequencyOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFrequencyOffset', stDoubleFrequencyOffset)
_module_typeBindings.stDoubleFrequencyOffset = stDoubleFrequencyOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleNoiseBandwidth
class stDoubleNoiseBandwidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleNoiseBandwidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2335, 2)
    _Documentation = ''
stDoubleNoiseBandwidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleNoiseBandwidth, value=pyxb.binding.datatypes.double(0.0))
stDoubleNoiseBandwidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleNoiseBandwidth, value=pyxb.binding.datatypes.double(2000000000.0))
stDoubleNoiseBandwidth._InitializeFacetMap(stDoubleNoiseBandwidth._CF_minInclusive,
   stDoubleNoiseBandwidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleNoiseBandwidth', stDoubleNoiseBandwidth)
_module_typeBindings.stDoubleNoiseBandwidth = stDoubleNoiseBandwidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDwellTime
class stDoubleDwellTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDwellTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2347, 2)
    _Documentation = ''
stDoubleDwellTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDwellTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleDwellTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDwellTime, value=pyxb.binding.datatypes.double(2147.483647))
stDoubleDwellTime._InitializeFacetMap(stDoubleDwellTime._CF_minInclusive,
   stDoubleDwellTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDwellTime', stDoubleDwellTime)
_module_typeBindings.stDoubleDwellTime = stDoubleDwellTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePulseDwellTime
class stDoublePulseDwellTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePulseDwellTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2359, 2)
    _Documentation = ''
stDoublePulseDwellTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePulseDwellTime, value=pyxb.binding.datatypes.double(0.0))
stDoublePulseDwellTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePulseDwellTime, value=pyxb.binding.datatypes.double(2147.483647))
stDoublePulseDwellTime._InitializeFacetMap(stDoublePulseDwellTime._CF_minInclusive,
   stDoublePulseDwellTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePulseDwellTime', stDoublePulseDwellTime)
_module_typeBindings.stDoublePulseDwellTime = stDoublePulseDwellTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleIntDurOverrideTime
class stDoubleIntDurOverrideTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleIntDurOverrideTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2371, 2)
    _Documentation = ''
stDoubleIntDurOverrideTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleIntDurOverrideTime, value=pyxb.binding.datatypes.double(1e-12))
stDoubleIntDurOverrideTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleIntDurOverrideTime, value=pyxb.binding.datatypes.double(2147.48364799999))
stDoubleIntDurOverrideTime._InitializeFacetMap(stDoubleIntDurOverrideTime._CF_minInclusive,
   stDoubleIntDurOverrideTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleIntDurOverrideTime', stDoubleIntDurOverrideTime)
_module_typeBindings.stDoubleIntDurOverrideTime = stDoubleIntDurOverrideTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterruptGeneratorDuration
class stDoubleInterruptGeneratorDuration (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterruptGeneratorDuration')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2383, 2)
    _Documentation = ''
stDoubleInterruptGeneratorDuration._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterruptGeneratorDuration, value=pyxb.binding.datatypes.double(0.0))
stDoubleInterruptGeneratorDuration._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterruptGeneratorDuration, value=pyxb.binding.datatypes.double(2147.48364799999))
stDoubleInterruptGeneratorDuration._InitializeFacetMap(stDoubleInterruptGeneratorDuration._CF_minInclusive,
   stDoubleInterruptGeneratorDuration._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterruptGeneratorDuration', stDoubleInterruptGeneratorDuration)
_module_typeBindings.stDoubleInterruptGeneratorDuration = stDoubleInterruptGeneratorDuration

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterruptGeneratorRevisit
class stDoubleInterruptGeneratorRevisit (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterruptGeneratorRevisit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2395, 2)
    _Documentation = ''
stDoubleInterruptGeneratorRevisit._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterruptGeneratorRevisit, value=pyxb.binding.datatypes.double(0.0))
stDoubleInterruptGeneratorRevisit._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterruptGeneratorRevisit, value=pyxb.binding.datatypes.double(2147.48364799999))
stDoubleInterruptGeneratorRevisit._InitializeFacetMap(stDoubleInterruptGeneratorRevisit._CF_minInclusive,
   stDoubleInterruptGeneratorRevisit._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterruptGeneratorRevisit', stDoubleInterruptGeneratorRevisit)
_module_typeBindings.stDoubleInterruptGeneratorRevisit = stDoubleInterruptGeneratorRevisit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterruptGeneratorStartTime
class stDoubleInterruptGeneratorStartTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterruptGeneratorStartTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2407, 2)
    _Documentation = ''
stDoubleInterruptGeneratorStartTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterruptGeneratorStartTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleInterruptGeneratorStartTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterruptGeneratorStartTime, value=pyxb.binding.datatypes.double(2147.48364799999))
stDoubleInterruptGeneratorStartTime._InitializeFacetMap(stDoubleInterruptGeneratorStartTime._CF_minInclusive,
   stDoubleInterruptGeneratorStartTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterruptGeneratorStartTime', stDoubleInterruptGeneratorStartTime)
_module_typeBindings.stDoubleInterruptGeneratorStartTime = stDoubleInterruptGeneratorStartTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAttenuation
class stDoubleAttenuation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAttenuation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2419, 2)
    _Documentation = ''
stDoubleAttenuation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAttenuation, value=pyxb.binding.datatypes.double(0.0))
stDoubleAttenuation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAttenuation, value=pyxb.binding.datatypes.double(31.5))
stDoubleAttenuation._InitializeFacetMap(stDoubleAttenuation._CF_minInclusive,
   stDoubleAttenuation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAttenuation', stDoubleAttenuation)
_module_typeBindings.stDoubleAttenuation = stDoubleAttenuation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleModAmpFrequency
class stDoubleModAmpFrequency (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleModAmpFrequency')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2431, 2)
    _Documentation = ''
stDoubleModAmpFrequency._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleModAmpFrequency, value=pyxb.binding.datatypes.double(0.0))
stDoubleModAmpFrequency._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleModAmpFrequency, value=pyxb.binding.datatypes.double(32000000000.0))
stDoubleModAmpFrequency._InitializeFacetMap(stDoubleModAmpFrequency._CF_minInclusive,
   stDoubleModAmpFrequency._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleModAmpFrequency', stDoubleModAmpFrequency)
_module_typeBindings.stDoubleModAmpFrequency = stDoubleModAmpFrequency

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDelayTimeModAmp
class stDoubleDelayTimeModAmp (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDelayTimeModAmp')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2443, 2)
    _Documentation = ''
stDoubleDelayTimeModAmp._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDelayTimeModAmp, value=pyxb.binding.datatypes.double(0.0))
stDoubleDelayTimeModAmp._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDelayTimeModAmp, value=pyxb.binding.datatypes.double(0.032))
stDoubleDelayTimeModAmp._InitializeFacetMap(stDoubleDelayTimeModAmp._CF_minInclusive,
   stDoubleDelayTimeModAmp._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDelayTimeModAmp', stDoubleDelayTimeModAmp)
_module_typeBindings.stDoubleDelayTimeModAmp = stDoubleDelayTimeModAmp

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzInitialBeamOffset
class stDoubleAzInitialBeamOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzInitialBeamOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2455, 2)
    _Documentation = ''
stDoubleAzInitialBeamOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzInitialBeamOffset, value=pyxb.binding.datatypes.double(0.0))
stDoubleAzInitialBeamOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzInitialBeamOffset, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzInitialBeamOffset._InitializeFacetMap(stDoubleAzInitialBeamOffset._CF_minInclusive,
   stDoubleAzInitialBeamOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzInitialBeamOffset', stDoubleAzInitialBeamOffset)
_module_typeBindings.stDoubleAzInitialBeamOffset = stDoubleAzInitialBeamOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInitialBeamOffset
class stDoubleInitialBeamOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInitialBeamOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2467, 2)
    _Documentation = ''
stDoubleInitialBeamOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInitialBeamOffset, value=pyxb.binding.datatypes.double(0.0))
stDoubleInitialBeamOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInitialBeamOffset, value=pyxb.binding.datatypes.double(359.978))
stDoubleInitialBeamOffset._InitializeFacetMap(stDoubleInitialBeamOffset._CF_minInclusive,
   stDoubleInitialBeamOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInitialBeamOffset', stDoubleInitialBeamOffset)
_module_typeBindings.stDoubleInitialBeamOffset = stDoubleInitialBeamOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePalmerInitialOffset
class stDoublePalmerInitialOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePalmerInitialOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2479, 2)
    _Documentation = ''
stDoublePalmerInitialOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePalmerInitialOffset, value=pyxb.binding.datatypes.double(0.0))
stDoublePalmerInitialOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePalmerInitialOffset, value=pyxb.binding.datatypes.double(359.978))
stDoublePalmerInitialOffset._InitializeFacetMap(stDoublePalmerInitialOffset._CF_minInclusive,
   stDoublePalmerInitialOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePalmerInitialOffset', stDoublePalmerInitialOffset)
_module_typeBindings.stDoublePalmerInitialOffset = stDoublePalmerInitialOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzBeamwidth
class stDoubleAzBeamwidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzBeamwidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2491, 2)
    _Documentation = ''
stDoubleAzBeamwidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzBeamwidth, value=pyxb.binding.datatypes.double(0.0))
stDoubleAzBeamwidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzBeamwidth, value=pyxb.binding.datatypes.double(360.0))
stDoubleAzBeamwidth._InitializeFacetMap(stDoubleAzBeamwidth._CF_minInclusive,
   stDoubleAzBeamwidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzBeamwidth', stDoubleAzBeamwidth)
_module_typeBindings.stDoubleAzBeamwidth = stDoubleAzBeamwidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDelayTimeJitterLimit
class stDoubleDelayTimeJitterLimit (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDelayTimeJitterLimit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2503, 2)
    _Documentation = ''
stDoubleDelayTimeJitterLimit._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDelayTimeJitterLimit, value=pyxb.binding.datatypes.double(0.0))
stDoubleDelayTimeJitterLimit._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDelayTimeJitterLimit, value=pyxb.binding.datatypes.double(0.499998))
stDoubleDelayTimeJitterLimit._InitializeFacetMap(stDoubleDelayTimeJitterLimit._CF_minInclusive,
   stDoubleDelayTimeJitterLimit._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDelayTimeJitterLimit', stDoubleDelayTimeJitterLimit)
_module_typeBindings.stDoubleDelayTimeJitterLimit = stDoubleDelayTimeJitterLimit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleJitterLimitPri
class stDoubleJitterLimitPri (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleJitterLimitPri')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2515, 2)
    _Documentation = ''
stDoubleJitterLimitPri._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleJitterLimitPri, value=pyxb.binding.datatypes.double(0.0))
stDoubleJitterLimitPri._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleJitterLimitPri, value=pyxb.binding.datatypes.double(0.499998))
stDoubleJitterLimitPri._InitializeFacetMap(stDoubleJitterLimitPri._CF_minInclusive,
   stDoubleJitterLimitPri._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleJitterLimitPri', stDoubleJitterLimitPri)
_module_typeBindings.stDoubleJitterLimitPri = stDoubleJitterLimitPri

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleClockedPriJitterExcursion
class stDoubleClockedPriJitterExcursion (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleClockedPriJitterExcursion')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2527, 2)
    _Documentation = ''
stDoubleClockedPriJitterExcursion._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleClockedPriJitterExcursion, value=pyxb.binding.datatypes.double(0.0))
stDoubleClockedPriJitterExcursion._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleClockedPriJitterExcursion, value=pyxb.binding.datatypes.double(0.499998))
stDoubleClockedPriJitterExcursion._InitializeFacetMap(stDoubleClockedPriJitterExcursion._CF_minInclusive,
   stDoubleClockedPriJitterExcursion._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleClockedPriJitterExcursion', stDoubleClockedPriJitterExcursion)
_module_typeBindings.stDoubleClockedPriJitterExcursion = stDoubleClockedPriJitterExcursion

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAgilityLimit
class stDoubleAgilityLimit (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAgilityLimit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2539, 2)
    _Documentation = ''
stDoubleAgilityLimit._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAgilityLimit, value=pyxb.binding.datatypes.double(0.0))
stDoubleAgilityLimit._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAgilityLimit, value=pyxb.binding.datatypes.double(65499940000.0))
stDoubleAgilityLimit._InitializeFacetMap(stDoubleAgilityLimit._CF_minInclusive,
   stDoubleAgilityLimit._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAgilityLimit', stDoubleAgilityLimit)
_module_typeBindings.stDoubleAgilityLimit = stDoubleAgilityLimit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleModAmpPri
class stDoubleModAmpPri (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleModAmpPri')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2551, 2)
    _Documentation = ''
stDoubleModAmpPri._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleModAmpPri, value=pyxb.binding.datatypes.double(0.0))
stDoubleModAmpPri._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleModAmpPri, value=pyxb.binding.datatypes.double(0.06553599999999976))
stDoubleModAmpPri._InitializeFacetMap(stDoubleModAmpPri._CF_minInclusive,
   stDoubleModAmpPri._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleModAmpPri', stDoubleModAmpPri)
_module_typeBindings.stDoubleModAmpPri = stDoubleModAmpPri

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterpulseModulationPeakDeviation
class stDoubleInterpulseModulationPeakDeviation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterpulseModulationPeakDeviation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2563, 2)
    _Documentation = ''
stDoubleInterpulseModulationPeakDeviation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterpulseModulationPeakDeviation, value=pyxb.binding.datatypes.double(0.0))
stDoubleInterpulseModulationPeakDeviation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterpulseModulationPeakDeviation, value=pyxb.binding.datatypes.double(0.06553599999999977))
stDoubleInterpulseModulationPeakDeviation._InitializeFacetMap(stDoubleInterpulseModulationPeakDeviation._CF_minInclusive,
   stDoubleInterpulseModulationPeakDeviation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterpulseModulationPeakDeviation', stDoubleInterpulseModulationPeakDeviation)
_module_typeBindings.stDoubleInterpulseModulationPeakDeviation = stDoubleInterpulseModulationPeakDeviation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFrequency
class stDoubleFrequency (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFrequency')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2575, 2)
    _Documentation = ''
stDoubleFrequency._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFrequency, value=pyxb.binding.datatypes.double(0.0))
stDoubleFrequency._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFrequency, value=pyxb.binding.datatypes.double(65535000000.0))
stDoubleFrequency._InitializeFacetMap(stDoubleFrequency._CF_minInclusive,
   stDoubleFrequency._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFrequency', stDoubleFrequency)
_module_typeBindings.stDoubleFrequency = stDoubleFrequency

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarTransitRate
class stDoubleBarTransitRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarTransitRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2587, 2)
    _Documentation = ''
stDoubleBarTransitRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarTransitRate, value=pyxb.binding.datatypes.double(0.0))
stDoubleBarTransitRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarTransitRate, value=pyxb.binding.datatypes.double(703125.0))
stDoubleBarTransitRate._InitializeFacetMap(stDoubleBarTransitRate._CF_minInclusive,
   stDoubleBarTransitRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarTransitRate', stDoubleBarTransitRate)
_module_typeBindings.stDoubleBarTransitRate = stDoubleBarTransitRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePalmerSquintAngle
class stDoublePalmerSquintAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePalmerSquintAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2599, 2)
    _Documentation = ''
stDoublePalmerSquintAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePalmerSquintAngle, value=pyxb.binding.datatypes.double(0.0))
stDoublePalmerSquintAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePalmerSquintAngle, value=pyxb.binding.datatypes.double(90.0))
stDoublePalmerSquintAngle._InitializeFacetMap(stDoublePalmerSquintAngle._CF_minInclusive,
   stDoublePalmerSquintAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePalmerSquintAngle', stDoublePalmerSquintAngle)
_module_typeBindings.stDoublePalmerSquintAngle = stDoublePalmerSquintAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSquintAngle
class stDoubleSquintAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSquintAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2611, 2)
    _Documentation = ''
stDoubleSquintAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSquintAngle, value=pyxb.binding.datatypes.double(0.0))
stDoubleSquintAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSquintAngle, value=pyxb.binding.datatypes.double(90.0))
stDoubleSquintAngle._InitializeFacetMap(stDoubleSquintAngle._CF_minInclusive,
   stDoubleSquintAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSquintAngle', stDoubleSquintAngle)
_module_typeBindings.stDoubleSquintAngle = stDoubleSquintAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleVhPolRatio
class stDoubleVhPolRatio (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleVhPolRatio')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2623, 2)
    _Documentation = ''
stDoubleVhPolRatio._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleVhPolRatio, value=pyxb.binding.datatypes.double(0.0))
stDoubleVhPolRatio._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleVhPolRatio, value=pyxb.binding.datatypes.double(90.0))
stDoubleVhPolRatio._InitializeFacetMap(stDoubleVhPolRatio._CF_minInclusive,
   stDoubleVhPolRatio._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleVhPolRatio', stDoubleVhPolRatio)
_module_typeBindings.stDoubleVhPolRatio = stDoubleVhPolRatio

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElBeamwidth
class stDoubleElBeamwidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElBeamwidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2635, 2)
    _Documentation = ''
stDoubleElBeamwidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElBeamwidth, value=pyxb.binding.datatypes.double(0.0))
stDoubleElBeamwidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElBeamwidth, value=pyxb.binding.datatypes.double(180.0))
stDoubleElBeamwidth._InitializeFacetMap(stDoubleElBeamwidth._CF_minInclusive,
   stDoubleElBeamwidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElBeamwidth', stDoubleElBeamwidth)
_module_typeBindings.stDoubleElBeamwidth = stDoubleElBeamwidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElInitialBeamOffset
class stDoubleElInitialBeamOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElInitialBeamOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2647, 2)
    _Documentation = ''
stDoubleElInitialBeamOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElInitialBeamOffset, value=pyxb.binding.datatypes.double(0.0))
stDoubleElInitialBeamOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElInitialBeamOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleElInitialBeamOffset._InitializeFacetMap(stDoubleElInitialBeamOffset._CF_minInclusive,
   stDoubleElInitialBeamOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElInitialBeamOffset', stDoubleElInitialBeamOffset)
_module_typeBindings.stDoubleElInitialBeamOffset = stDoubleElInitialBeamOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleClockedPriJitterVariance
class stDoubleClockedPriJitterVariance (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleClockedPriJitterVariance')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2659, 2)
    _Documentation = ''
stDoubleClockedPriJitterVariance._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleClockedPriJitterVariance, value=pyxb.binding.datatypes.double(0.0))
stDoubleClockedPriJitterVariance._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleClockedPriJitterVariance, value=pyxb.binding.datatypes.double(99.99))
stDoubleClockedPriJitterVariance._InitializeFacetMap(stDoubleClockedPriJitterVariance._CF_minInclusive,
   stDoubleClockedPriJitterVariance._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleClockedPriJitterVariance', stDoubleClockedPriJitterVariance)
_module_typeBindings.stDoubleClockedPriJitterVariance = stDoubleClockedPriJitterVariance

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterpulseModPriPercentage
class stDoubleInterpulseModPriPercentage (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterpulseModPriPercentage')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2671, 2)
    _Documentation = ''
stDoubleInterpulseModPriPercentage._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterpulseModPriPercentage, value=pyxb.binding.datatypes.double(0.0))
stDoubleInterpulseModPriPercentage._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterpulseModPriPercentage, value=pyxb.binding.datatypes.double(99.99))
stDoubleInterpulseModPriPercentage._InitializeFacetMap(stDoubleInterpulseModPriPercentage._CF_minInclusive,
   stDoubleInterpulseModPriPercentage._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterpulseModPriPercentage', stDoubleInterpulseModPriPercentage)
_module_typeBindings.stDoubleInterpulseModPriPercentage = stDoubleInterpulseModPriPercentage

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleMissingPulseFactor
class stDoubleMissingPulseFactor (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleMissingPulseFactor')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2683, 2)
    _Documentation = ''
stDoubleMissingPulseFactor._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleMissingPulseFactor, value=pyxb.binding.datatypes.double(0.0))
stDoubleMissingPulseFactor._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleMissingPulseFactor, value=pyxb.binding.datatypes.double(99.99847))
stDoubleMissingPulseFactor._InitializeFacetMap(stDoubleMissingPulseFactor._CF_minInclusive,
   stDoubleMissingPulseFactor._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleMissingPulseFactor', stDoubleMissingPulseFactor)
_module_typeBindings.stDoubleMissingPulseFactor = stDoubleMissingPulseFactor

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDelayTime
class stDoubleDelayTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDelayTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2695, 2)
    _Documentation = ''
stDoubleDelayTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDelayTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleDelayTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDelayTime, value=pyxb.binding.datatypes.double(0.999999))
stDoubleDelayTime._InitializeFacetMap(stDoubleDelayTime._CF_minInclusive,
   stDoubleDelayTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDelayTime', stDoubleDelayTime)
_module_typeBindings.stDoubleDelayTime = stDoubleDelayTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePri
class stDoublePri (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePri')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2707, 2)
    _Documentation = ''
stDoublePri._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePri, value=pyxb.binding.datatypes.double(0.0))
stDoublePri._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePri, value=pyxb.binding.datatypes.double(0.999999))
stDoublePri._InitializeFacetMap(stDoublePri._CF_minInclusive,
   stDoublePri._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePri', stDoublePri)
_module_typeBindings.stDoublePri = stDoublePri

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBurstModPeriod
class stDoubleBurstModPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBurstModPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2719, 2)
    _Documentation = ''
stDoubleBurstModPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBurstModPeriod, value=pyxb.binding.datatypes.double(1e-06))
stDoubleBurstModPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBurstModPeriod, value=pyxb.binding.datatypes.double(0.131071992))
stDoubleBurstModPeriod._InitializeFacetMap(stDoubleBurstModPeriod._CF_minInclusive,
   stDoubleBurstModPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBurstModPeriod', stDoubleBurstModPeriod)
_module_typeBindings.stDoubleBurstModPeriod = stDoubleBurstModPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFreqChannelization
class stDoubleFreqChannelization (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFreqChannelization')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2731, 2)
    _Documentation = ''
stDoubleFreqChannelization._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFreqChannelization, value=pyxb.binding.datatypes.double(1.0))
stDoubleFreqChannelization._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFreqChannelization, value=pyxb.binding.datatypes.double(511937500.0))
stDoubleFreqChannelization._InitializeFacetMap(stDoubleFreqChannelization._CF_minInclusive,
   stDoubleFreqChannelization._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFreqChannelization', stDoubleFreqChannelization)
_module_typeBindings.stDoubleFreqChannelization = stDoubleFreqChannelization

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDelayTimeModPeriod
class stDoubleDelayTimeModPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDelayTimeModPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2743, 2)
    _Documentation = ''
stDoubleDelayTimeModPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDelayTimeModPeriod, value=pyxb.binding.datatypes.double(0.0001))
stDoubleDelayTimeModPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDelayTimeModPeriod, value=pyxb.binding.datatypes.double(268.435456))
stDoubleDelayTimeModPeriod._InitializeFacetMap(stDoubleDelayTimeModPeriod._CF_minInclusive,
   stDoubleDelayTimeModPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDelayTimeModPeriod', stDoubleDelayTimeModPeriod)
_module_typeBindings.stDoubleDelayTimeModPeriod = stDoubleDelayTimeModPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecDtModPeriod
class stDoubleSecDtModPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecDtModPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2755, 2)
    _Documentation = ''
stDoubleSecDtModPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecDtModPeriod, value=pyxb.binding.datatypes.double(0.0001))
stDoubleSecDtModPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecDtModPeriod, value=pyxb.binding.datatypes.double(268.435456))
stDoubleSecDtModPeriod._InitializeFacetMap(stDoubleSecDtModPeriod._CF_minInclusive,
   stDoubleSecDtModPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecDtModPeriod', stDoubleSecDtModPeriod)
_module_typeBindings.stDoubleSecDtModPeriod = stDoubleSecDtModPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSecModPeriod
class stDoubleSecModPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSecModPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2767, 2)
    _Documentation = ''
stDoubleSecModPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSecModPeriod, value=pyxb.binding.datatypes.double(0.0001))
stDoubleSecModPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSecModPeriod, value=pyxb.binding.datatypes.double(268.435456))
stDoubleSecModPeriod._InitializeFacetMap(stDoubleSecModPeriod._CF_minInclusive,
   stDoubleSecModPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSecModPeriod', stDoubleSecModPeriod)
_module_typeBindings.stDoubleSecModPeriod = stDoubleSecModPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleModPeriod
class stDoubleModPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleModPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2779, 2)
    _Documentation = ''
stDoubleModPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleModPeriod, value=pyxb.binding.datatypes.double(0.0001))
stDoubleModPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleModPeriod, value=pyxb.binding.datatypes.double(268.435456))
stDoubleModPeriod._InitializeFacetMap(stDoubleModPeriod._CF_minInclusive,
   stDoubleModPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleModPeriod', stDoubleModPeriod)
_module_typeBindings.stDoubleModPeriod = stDoubleModPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleInterpulseModulationPeriod
class stDoubleInterpulseModulationPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleInterpulseModulationPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2791, 2)
    _Documentation = ''
stDoubleInterpulseModulationPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleInterpulseModulationPeriod, value=pyxb.binding.datatypes.double(0.0001))
stDoubleInterpulseModulationPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleInterpulseModulationPeriod, value=pyxb.binding.datatypes.double(268.435456))
stDoubleInterpulseModulationPeriod._InitializeFacetMap(stDoubleInterpulseModulationPeriod._CF_minInclusive,
   stDoubleInterpulseModulationPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleInterpulseModulationPeriod', stDoubleInterpulseModulationPeriod)
_module_typeBindings.stDoubleInterpulseModulationPeriod = stDoubleInterpulseModulationPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleFrequencyDeviation
class stDoubleFrequencyDeviation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleFrequencyDeviation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2803, 2)
    _Documentation = ''
stDoubleFrequencyDeviation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleFrequencyDeviation, value=pyxb.binding.datatypes.double(-1000000000.0))
stDoubleFrequencyDeviation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleFrequencyDeviation, value=pyxb.binding.datatypes.double(1000000000.0))
stDoubleFrequencyDeviation._InitializeFacetMap(stDoubleFrequencyDeviation._CF_minInclusive,
   stDoubleFrequencyDeviation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleFrequencyDeviation', stDoubleFrequencyDeviation)
_module_typeBindings.stDoubleFrequencyDeviation = stDoubleFrequencyDeviation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLinearFreqDeviation
class stDoubleLinearFreqDeviation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLinearFreqDeviation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2815, 2)
    _Documentation = ''
stDoubleLinearFreqDeviation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLinearFreqDeviation, value=pyxb.binding.datatypes.double(-1000000000.0))
stDoubleLinearFreqDeviation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLinearFreqDeviation, value=pyxb.binding.datatypes.double(1000000000.0))
stDoubleLinearFreqDeviation._InitializeFacetMap(stDoubleLinearFreqDeviation._CF_minInclusive,
   stDoubleLinearFreqDeviation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLinearFreqDeviation', stDoubleLinearFreqDeviation)
_module_typeBindings.stDoubleLinearFreqDeviation = stDoubleLinearFreqDeviation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleModeTransitionPeriod
class stDoubleModeTransitionPeriod (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleModeTransitionPeriod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2827, 2)
    _Documentation = ''
stDoubleModeTransitionPeriod._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleModeTransitionPeriod, value=pyxb.binding.datatypes.double(0.0))
stDoubleModeTransitionPeriod._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleModeTransitionPeriod, value=pyxb.binding.datatypes.double(2147.483647))
stDoubleModeTransitionPeriod._InitializeFacetMap(stDoubleModeTransitionPeriod._CF_minInclusive,
   stDoubleModeTransitionPeriod._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleModeTransitionPeriod', stDoubleModeTransitionPeriod)
_module_typeBindings.stDoubleModeTransitionPeriod = stDoubleModeTransitionPeriod

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzTrackOffset
class stDoubleAzTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2839, 2)
    _Documentation = ''
stDoubleAzTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzTrackOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleAzTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzTrackOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleAzTrackOffset._InitializeFacetMap(stDoubleAzTrackOffset._CF_minInclusive,
   stDoubleAzTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzTrackOffset', stDoubleAzTrackOffset)
_module_typeBindings.stDoubleAzTrackOffset = stDoubleAzTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElPointAngle
class stDoubleElPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2851, 2)
    _Documentation = ''
stDoubleElPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElPointAngle, value=pyxb.binding.datatypes.double(-180.0))
stDoubleElPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElPointAngle, value=pyxb.binding.datatypes.double(180.0))
stDoubleElPointAngle._InitializeFacetMap(stDoubleElPointAngle._CF_minInclusive,
   stDoubleElPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElPointAngle', stDoubleElPointAngle)
_module_typeBindings.stDoubleElPointAngle = stDoubleElPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElMasterOffset
class stDoubleElMasterOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElMasterOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2863, 2)
    _Documentation = ''
stDoubleElMasterOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElMasterOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleElMasterOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElMasterOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleElMasterOffset._InitializeFacetMap(stDoubleElMasterOffset._CF_minInclusive,
   stDoubleElMasterOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElMasterOffset', stDoubleElMasterOffset)
_module_typeBindings.stDoubleElMasterOffset = stDoubleElMasterOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleVhPhaseDelta
class stDoubleVhPhaseDelta (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleVhPhaseDelta')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2875, 2)
    _Documentation = ''
stDoubleVhPhaseDelta._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleVhPhaseDelta, value=pyxb.binding.datatypes.double(-180.0))
stDoubleVhPhaseDelta._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleVhPhaseDelta, value=pyxb.binding.datatypes.double(180.0))
stDoubleVhPhaseDelta._InitializeFacetMap(stDoubleVhPhaseDelta._CF_minInclusive,
   stDoubleVhPhaseDelta._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleVhPhaseDelta', stDoubleVhPhaseDelta)
_module_typeBindings.stDoubleVhPhaseDelta = stDoubleVhPhaseDelta

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzReferencePoint
class stDoubleAzReferencePoint (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzReferencePoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2887, 2)
    _Documentation = ''
stDoubleAzReferencePoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzReferencePoint, value=pyxb.binding.datatypes.double(-180.0))
stDoubleAzReferencePoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzReferencePoint, value=pyxb.binding.datatypes.double(180.0))
stDoubleAzReferencePoint._InitializeFacetMap(stDoubleAzReferencePoint._CF_minInclusive,
   stDoubleAzReferencePoint._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzReferencePoint', stDoubleAzReferencePoint)
_module_typeBindings.stDoubleAzReferencePoint = stDoubleAzReferencePoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElPlatformTrackRefOffset
class stDoubleElPlatformTrackRefOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElPlatformTrackRefOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2899, 2)
    _Documentation = ''
stDoubleElPlatformTrackRefOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElPlatformTrackRefOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleElPlatformTrackRefOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElPlatformTrackRefOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleElPlatformTrackRefOffset._InitializeFacetMap(stDoubleElPlatformTrackRefOffset._CF_minInclusive,
   stDoubleElPlatformTrackRefOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElPlatformTrackRefOffset', stDoubleElPlatformTrackRefOffset)
_module_typeBindings.stDoubleElPlatformTrackRefOffset = stDoubleElPlatformTrackRefOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElSutTrackRefOffset
class stDoubleElSutTrackRefOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElSutTrackRefOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2911, 2)
    _Documentation = ''
stDoubleElSutTrackRefOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElSutTrackRefOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleElSutTrackRefOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElSutTrackRefOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleElSutTrackRefOffset._InitializeFacetMap(stDoubleElSutTrackRefOffset._CF_minInclusive,
   stDoubleElSutTrackRefOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElSutTrackRefOffset', stDoubleElSutTrackRefOffset)
_module_typeBindings.stDoubleElSutTrackRefOffset = stDoubleElSutTrackRefOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBeamElPointAngle
class stDoubleBeamElPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBeamElPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2923, 2)
    _Documentation = ''
stDoubleBeamElPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBeamElPointAngle, value=pyxb.binding.datatypes.double(-180.0))
stDoubleBeamElPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBeamElPointAngle, value=pyxb.binding.datatypes.double(180.0))
stDoubleBeamElPointAngle._InitializeFacetMap(stDoubleBeamElPointAngle._CF_minInclusive,
   stDoubleBeamElPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBeamElPointAngle', stDoubleBeamElPointAngle)
_module_typeBindings.stDoubleBeamElPointAngle = stDoubleBeamElPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBeamAzTrackOffset
class stDoubleBeamAzTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBeamAzTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2935, 2)
    _Documentation = ''
stDoubleBeamAzTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBeamAzTrackOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleBeamAzTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBeamAzTrackOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleBeamAzTrackOffset._InitializeFacetMap(stDoubleBeamAzTrackOffset._CF_minInclusive,
   stDoubleBeamAzTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBeamAzTrackOffset', stDoubleBeamAzTrackOffset)
_module_typeBindings.stDoubleBeamAzTrackOffset = stDoubleBeamAzTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElStartAngle
class stDoubleElStartAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElStartAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2947, 2)
    _Documentation = ''
stDoubleElStartAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElStartAngle, value=pyxb.binding.datatypes.double(-180.0))
stDoubleElStartAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElStartAngle, value=pyxb.binding.datatypes.double(180.0))
stDoubleElStartAngle._InitializeFacetMap(stDoubleElStartAngle._CF_minInclusive,
   stDoubleElStartAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElStartAngle', stDoubleElStartAngle)
_module_typeBindings.stDoubleElStartAngle = stDoubleElStartAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarElPointAngle
class stDoubleBarElPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarElPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2959, 2)
    _Documentation = ''
stDoubleBarElPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarElPointAngle, value=pyxb.binding.datatypes.double(-180.0))
stDoubleBarElPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarElPointAngle, value=pyxb.binding.datatypes.double(180.0))
stDoubleBarElPointAngle._InitializeFacetMap(stDoubleBarElPointAngle._CF_minInclusive,
   stDoubleBarElPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarElPointAngle', stDoubleBarElPointAngle)
_module_typeBindings.stDoubleBarElPointAngle = stDoubleBarElPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarAzTrackOffset
class stDoubleBarAzTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarAzTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2971, 2)
    _Documentation = ''
stDoubleBarAzTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarAzTrackOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleBarAzTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarAzTrackOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleBarAzTrackOffset._InitializeFacetMap(stDoubleBarAzTrackOffset._CF_minInclusive,
   stDoubleBarAzTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarAzTrackOffset', stDoubleBarAzTrackOffset)
_module_typeBindings.stDoubleBarAzTrackOffset = stDoubleBarAzTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarOffset
class stDoubleBarOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2983, 2)
    _Documentation = ''
stDoubleBarOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarOffset, value=pyxb.binding.datatypes.double(-180.0))
stDoubleBarOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarOffset, value=pyxb.binding.datatypes.double(180.0))
stDoubleBarOffset._InitializeFacetMap(stDoubleBarOffset._CF_minInclusive,
   stDoubleBarOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarOffset', stDoubleBarOffset)
_module_typeBindings.stDoubleBarOffset = stDoubleBarOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleErp
class stDoubleErp (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleErp')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 2995, 2)
    _Documentation = ''
stDoubleErp._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleErp, value=pyxb.binding.datatypes.double(-255.75))
stDoubleErp._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleErp, value=pyxb.binding.datatypes.double(255.75))
stDoubleErp._InitializeFacetMap(stDoubleErp._CF_minInclusive,
   stDoubleErp._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleErp', stDoubleErp)
_module_typeBindings.stDoubleErp = stDoubleErp

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzPointAngle
class stDoubleAzPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3007, 2)
    _Documentation = ''
stDoubleAzPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzPointAngle, value=pyxb.binding.datatypes.double(-359.978))
stDoubleAzPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzPointAngle, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzPointAngle._InitializeFacetMap(stDoubleAzPointAngle._CF_minInclusive,
   stDoubleAzPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzPointAngle', stDoubleAzPointAngle)
_module_typeBindings.stDoubleAzPointAngle = stDoubleAzPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzMasterOffset
class stDoubleAzMasterOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzMasterOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3019, 2)
    _Documentation = ''
stDoubleAzMasterOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzMasterOffset, value=pyxb.binding.datatypes.double(-359.978))
stDoubleAzMasterOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzMasterOffset, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzMasterOffset._InitializeFacetMap(stDoubleAzMasterOffset._CF_minInclusive,
   stDoubleAzMasterOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzMasterOffset', stDoubleAzMasterOffset)
_module_typeBindings.stDoubleAzMasterOffset = stDoubleAzMasterOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzPlatformTrackRefOffset
class stDoubleAzPlatformTrackRefOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzPlatformTrackRefOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3031, 2)
    _Documentation = ''
stDoubleAzPlatformTrackRefOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzPlatformTrackRefOffset, value=pyxb.binding.datatypes.double(-359.978))
stDoubleAzPlatformTrackRefOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzPlatformTrackRefOffset, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzPlatformTrackRefOffset._InitializeFacetMap(stDoubleAzPlatformTrackRefOffset._CF_minInclusive,
   stDoubleAzPlatformTrackRefOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzPlatformTrackRefOffset', stDoubleAzPlatformTrackRefOffset)
_module_typeBindings.stDoubleAzPlatformTrackRefOffset = stDoubleAzPlatformTrackRefOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzSutTrackRefOffset
class stDoubleAzSutTrackRefOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzSutTrackRefOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3043, 2)
    _Documentation = ''
stDoubleAzSutTrackRefOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzSutTrackRefOffset, value=pyxb.binding.datatypes.double(-359.978))
stDoubleAzSutTrackRefOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzSutTrackRefOffset, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzSutTrackRefOffset._InitializeFacetMap(stDoubleAzSutTrackRefOffset._CF_minInclusive,
   stDoubleAzSutTrackRefOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzSutTrackRefOffset', stDoubleAzSutTrackRefOffset)
_module_typeBindings.stDoubleAzSutTrackRefOffset = stDoubleAzSutTrackRefOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBeamAzPointAngle
class stDoubleBeamAzPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBeamAzPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3055, 2)
    _Documentation = ''
stDoubleBeamAzPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBeamAzPointAngle, value=pyxb.binding.datatypes.double(-359.978))
stDoubleBeamAzPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBeamAzPointAngle, value=pyxb.binding.datatypes.double(359.978))
stDoubleBeamAzPointAngle._InitializeFacetMap(stDoubleBeamAzPointAngle._CF_minInclusive,
   stDoubleBeamAzPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBeamAzPointAngle', stDoubleBeamAzPointAngle)
_module_typeBindings.stDoubleBeamAzPointAngle = stDoubleBeamAzPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzStartAngle
class stDoubleAzStartAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzStartAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3067, 2)
    _Documentation = ''
stDoubleAzStartAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzStartAngle, value=pyxb.binding.datatypes.double(-359.978))
stDoubleAzStartAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzStartAngle, value=pyxb.binding.datatypes.double(359.978))
stDoubleAzStartAngle._InitializeFacetMap(stDoubleAzStartAngle._CF_minInclusive,
   stDoubleAzStartAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzStartAngle', stDoubleAzStartAngle)
_module_typeBindings.stDoubleAzStartAngle = stDoubleAzStartAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarAzPointAngle
class stDoubleBarAzPointAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarAzPointAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3079, 2)
    _Documentation = ''
stDoubleBarAzPointAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarAzPointAngle, value=pyxb.binding.datatypes.double(-359.978))
stDoubleBarAzPointAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarAzPointAngle, value=pyxb.binding.datatypes.double(359.978))
stDoubleBarAzPointAngle._InitializeFacetMap(stDoubleBarAzPointAngle._CF_minInclusive,
   stDoubleBarAzPointAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarAzPointAngle', stDoubleBarAzPointAngle)
_module_typeBindings.stDoubleBarAzPointAngle = stDoubleBarAzPointAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleAzSidelobeRatio
class stDoubleAzSidelobeRatio (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleAzSidelobeRatio')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3091, 2)
    _Documentation = ''
stDoubleAzSidelobeRatio._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleAzSidelobeRatio, value=pyxb.binding.datatypes.double(-63.75))
stDoubleAzSidelobeRatio._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleAzSidelobeRatio, value=pyxb.binding.datatypes.double(0.0))
stDoubleAzSidelobeRatio._InitializeFacetMap(stDoubleAzSidelobeRatio._CF_minInclusive,
   stDoubleAzSidelobeRatio._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleAzSidelobeRatio', stDoubleAzSidelobeRatio)
_module_typeBindings.stDoubleAzSidelobeRatio = stDoubleAzSidelobeRatio

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElSidelobeRatio
class stDoubleElSidelobeRatio (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElSidelobeRatio')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3103, 2)
    _Documentation = ''
stDoubleElSidelobeRatio._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElSidelobeRatio, value=pyxb.binding.datatypes.double(-63.75))
stDoubleElSidelobeRatio._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElSidelobeRatio, value=pyxb.binding.datatypes.double(0.0))
stDoubleElSidelobeRatio._InitializeFacetMap(stDoubleElSidelobeRatio._CF_minInclusive,
   stDoubleElSidelobeRatio._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElSidelobeRatio', stDoubleElSidelobeRatio)
_module_typeBindings.stDoubleElSidelobeRatio = stDoubleElSidelobeRatio

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElTrackOffset
class stDoubleElTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3115, 2)
    _Documentation = ''
stDoubleElTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElTrackOffset, value=pyxb.binding.datatypes.double(-90.0))
stDoubleElTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElTrackOffset, value=pyxb.binding.datatypes.double(90.0))
stDoubleElTrackOffset._InitializeFacetMap(stDoubleElTrackOffset._CF_minInclusive,
   stDoubleElTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElTrackOffset', stDoubleElTrackOffset)
_module_typeBindings.stDoubleElTrackOffset = stDoubleElTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleElReferencePoint
class stDoubleElReferencePoint (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleElReferencePoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3127, 2)
    _Documentation = ''
stDoubleElReferencePoint._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleElReferencePoint, value=pyxb.binding.datatypes.double(-90.0))
stDoubleElReferencePoint._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleElReferencePoint, value=pyxb.binding.datatypes.double(90.0))
stDoubleElReferencePoint._InitializeFacetMap(stDoubleElReferencePoint._CF_minInclusive,
   stDoubleElReferencePoint._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleElReferencePoint', stDoubleElReferencePoint)
_module_typeBindings.stDoubleElReferencePoint = stDoubleElReferencePoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBeamElTrackOffset
class stDoubleBeamElTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBeamElTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3139, 2)
    _Documentation = ''
stDoubleBeamElTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBeamElTrackOffset, value=pyxb.binding.datatypes.double(-90.0))
stDoubleBeamElTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBeamElTrackOffset, value=pyxb.binding.datatypes.double(90.0))
stDoubleBeamElTrackOffset._InitializeFacetMap(stDoubleBeamElTrackOffset._CF_minInclusive,
   stDoubleBeamElTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBeamElTrackOffset', stDoubleBeamElTrackOffset)
_module_typeBindings.stDoubleBeamElTrackOffset = stDoubleBeamElTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBarElTrackOffset
class stDoubleBarElTrackOffset (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBarElTrackOffset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3151, 2)
    _Documentation = ''
stDoubleBarElTrackOffset._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBarElTrackOffset, value=pyxb.binding.datatypes.double(-90.0))
stDoubleBarElTrackOffset._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBarElTrackOffset, value=pyxb.binding.datatypes.double(90.0))
stDoubleBarElTrackOffset._InitializeFacetMap(stDoubleBarElTrackOffset._CF_minInclusive,
   stDoubleBarElTrackOffset._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBarElTrackOffset', stDoubleBarElTrackOffset)
_module_typeBindings.stDoubleBarElTrackOffset = stDoubleBarElTrackOffset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumAntennaModelKind
class stEnumAntennaModelKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumAntennaModelKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3163, 2)
    _Documentation = ''
stEnumAntennaModelKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumAntennaModelKind, enum_prefix=None)
stEnumAntennaModelKind.Elliptical = stEnumAntennaModelKind._CF_enumeration.addEnumeration(unicode_value='Elliptical', tag='Elliptical')
stEnumAntennaModelKind.Rectangular = stEnumAntennaModelKind._CF_enumeration.addEnumeration(unicode_value='Rectangular', tag='Rectangular')
stEnumAntennaModelKind._InitializeFacetMap(stEnumAntennaModelKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumAntennaModelKind', stEnumAntennaModelKind)
_module_typeBindings.stEnumAntennaModelKind = stEnumAntennaModelKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumRasterOrientation
class stEnumRasterOrientation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumRasterOrientation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3175, 2)
    _Documentation = ''
stEnumRasterOrientation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumRasterOrientation, enum_prefix=None)
stEnumRasterOrientation.Azimuth = stEnumRasterOrientation._CF_enumeration.addEnumeration(unicode_value='Azimuth', tag='Azimuth')
stEnumRasterOrientation.Elevation = stEnumRasterOrientation._CF_enumeration.addEnumeration(unicode_value='Elevation', tag='Elevation')
stEnumRasterOrientation._InitializeFacetMap(stEnumRasterOrientation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumRasterOrientation', stEnumRasterOrientation)
_module_typeBindings.stEnumRasterOrientation = stEnumRasterOrientation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInitialBarDirection
class stEnumInitialBarDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInitialBarDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3187, 2)
    _Documentation = ''
stEnumInitialBarDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInitialBarDirection, enum_prefix=None)
stEnumInitialBarDirection.Clockwise = stEnumInitialBarDirection._CF_enumeration.addEnumeration(unicode_value='Clockwise', tag='Clockwise')
stEnumInitialBarDirection.Counter_Clockwise = stEnumInitialBarDirection._CF_enumeration.addEnumeration(unicode_value='Counter_Clockwise', tag='Counter_Clockwise')
stEnumInitialBarDirection.Up = stEnumInitialBarDirection._CF_enumeration.addEnumeration(unicode_value='Up', tag='Up')
stEnumInitialBarDirection.Down = stEnumInitialBarDirection._CF_enumeration.addEnumeration(unicode_value='Down', tag='Down')
stEnumInitialBarDirection._InitializeFacetMap(stEnumInitialBarDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInitialBarDirection', stEnumInitialBarDirection)
_module_typeBindings.stEnumInitialBarDirection = stEnumInitialBarDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumIntDurOverrideKind
class stEnumIntDurOverrideKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumIntDurOverrideKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3201, 2)
    _Documentation = ''
stEnumIntDurOverrideKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumIntDurOverrideKind, enum_prefix=None)
stEnumIntDurOverrideKind.Pulse_Based = stEnumIntDurOverrideKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumIntDurOverrideKind.Time_Based = stEnumIntDurOverrideKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumIntDurOverrideKind._InitializeFacetMap(stEnumIntDurOverrideKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumIntDurOverrideKind', stEnumIntDurOverrideKind)
_module_typeBindings.stEnumIntDurOverrideKind = stEnumIntDurOverrideKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInterbarDirection
class stEnumInterbarDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInterbarDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3213, 2)
    _Documentation = ''
stEnumInterbarDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInterbarDirection, enum_prefix=None)
stEnumInterbarDirection.Clockwise = stEnumInterbarDirection._CF_enumeration.addEnumeration(unicode_value='Clockwise', tag='Clockwise')
stEnumInterbarDirection.Counter_Clockwise = stEnumInterbarDirection._CF_enumeration.addEnumeration(unicode_value='Counter_Clockwise', tag='Counter_Clockwise')
stEnumInterbarDirection.Up = stEnumInterbarDirection._CF_enumeration.addEnumeration(unicode_value='Up', tag='Up')
stEnumInterbarDirection.Down = stEnumInterbarDirection._CF_enumeration.addEnumeration(unicode_value='Down', tag='Down')
stEnumInterbarDirection._InitializeFacetMap(stEnumInterbarDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInterbarDirection', stEnumInterbarDirection)
_module_typeBindings.stEnumInterbarDirection = stEnumInterbarDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumAzScanDirection
class stEnumAzScanDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumAzScanDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3227, 2)
    _Documentation = ''
stEnumAzScanDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumAzScanDirection, enum_prefix=None)
stEnumAzScanDirection.Clockwise = stEnumAzScanDirection._CF_enumeration.addEnumeration(unicode_value='Clockwise', tag='Clockwise')
stEnumAzScanDirection.Counter_Clockwise = stEnumAzScanDirection._CF_enumeration.addEnumeration(unicode_value='Counter_Clockwise', tag='Counter_Clockwise')
stEnumAzScanDirection._InitializeFacetMap(stEnumAzScanDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumAzScanDirection', stEnumAzScanDirection)
_module_typeBindings.stEnumAzScanDirection = stEnumAzScanDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBeamListOrder
class stEnumBeamListOrder (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBeamListOrder')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3239, 2)
    _Documentation = ''
stEnumBeamListOrder._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBeamListOrder, enum_prefix=None)
stEnumBeamListOrder.Random = stEnumBeamListOrder._CF_enumeration.addEnumeration(unicode_value='Random', tag='Random')
stEnumBeamListOrder.Sequential = stEnumBeamListOrder._CF_enumeration.addEnumeration(unicode_value='Sequential', tag='Sequential')
stEnumBeamListOrder._InitializeFacetMap(stEnumBeamListOrder._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBeamListOrder', stEnumBeamListOrder)
_module_typeBindings.stEnumBeamListOrder = stEnumBeamListOrder

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBiQuadPhaseMode
class stEnumBiQuadPhaseMode (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBiQuadPhaseMode')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3251, 2)
    _Documentation = ''
stEnumBiQuadPhaseMode._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBiQuadPhaseMode, enum_prefix=None)
stEnumBiQuadPhaseMode.None_ = stEnumBiQuadPhaseMode._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
stEnumBiQuadPhaseMode.Bi_Phase = stEnumBiQuadPhaseMode._CF_enumeration.addEnumeration(unicode_value='Bi_Phase', tag='Bi_Phase')
stEnumBiQuadPhaseMode.Quad_Phase = stEnumBiQuadPhaseMode._CF_enumeration.addEnumeration(unicode_value='Quad_Phase', tag='Quad_Phase')
stEnumBiQuadPhaseMode.Bi_And_Quad_Phase = stEnumBiQuadPhaseMode._CF_enumeration.addEnumeration(unicode_value='Bi_And_Quad_Phase', tag='Bi_And_Quad_Phase')
stEnumBiQuadPhaseMode._InitializeFacetMap(stEnumBiQuadPhaseMode._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBiQuadPhaseMode', stEnumBiQuadPhaseMode)
_module_typeBindings.stEnumBiQuadPhaseMode = stEnumBiQuadPhaseMode

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDirectionKind
class stEnumDirectionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDirectionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3265, 2)
    _Documentation = ''
stEnumDirectionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDirectionKind, enum_prefix=None)
stEnumDirectionKind.Pointing_Angle = stEnumDirectionKind._CF_enumeration.addEnumeration(unicode_value='Pointing_Angle', tag='Pointing_Angle')
stEnumDirectionKind.Tracking = stEnumDirectionKind._CF_enumeration.addEnumeration(unicode_value='Tracking', tag='Tracking')
stEnumDirectionKind.Sut_Tracking = stEnumDirectionKind._CF_enumeration.addEnumeration(unicode_value='Sut_Tracking', tag='Sut_Tracking')
stEnumDirectionKind._InitializeFacetMap(stEnumDirectionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDirectionKind', stEnumDirectionKind)
_module_typeBindings.stEnumDirectionKind = stEnumDirectionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBeamDirectionKind
class stEnumBeamDirectionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBeamDirectionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3278, 2)
    _Documentation = ''
stEnumBeamDirectionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBeamDirectionKind, enum_prefix=None)
stEnumBeamDirectionKind.Pointing_Angle = stEnumBeamDirectionKind._CF_enumeration.addEnumeration(unicode_value='Pointing_Angle', tag='Pointing_Angle')
stEnumBeamDirectionKind.Tracking = stEnumBeamDirectionKind._CF_enumeration.addEnumeration(unicode_value='Tracking', tag='Tracking')
stEnumBeamDirectionKind.Sut_Tracking = stEnumBeamDirectionKind._CF_enumeration.addEnumeration(unicode_value='Sut_Tracking', tag='Sut_Tracking')
stEnumBeamDirectionKind._InitializeFacetMap(stEnumBeamDirectionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBeamDirectionKind', stEnumBeamDirectionKind)
_module_typeBindings.stEnumBeamDirectionKind = stEnumBeamDirectionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBarDirectionKind
class stEnumBarDirectionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBarDirectionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3291, 2)
    _Documentation = ''
stEnumBarDirectionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBarDirectionKind, enum_prefix=None)
stEnumBarDirectionKind.Pointing_Angle = stEnumBarDirectionKind._CF_enumeration.addEnumeration(unicode_value='Pointing_Angle', tag='Pointing_Angle')
stEnumBarDirectionKind.Tracking = stEnumBarDirectionKind._CF_enumeration.addEnumeration(unicode_value='Tracking', tag='Tracking')
stEnumBarDirectionKind.Sut_Tracking = stEnumBarDirectionKind._CF_enumeration.addEnumeration(unicode_value='Sut_Tracking', tag='Sut_Tracking')
stEnumBarDirectionKind._InitializeFacetMap(stEnumBarDirectionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBarDirectionKind', stEnumBarDirectionKind)
_module_typeBindings.stEnumBarDirectionKind = stEnumBarDirectionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumElScanDirection
class stEnumElScanDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumElScanDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3304, 2)
    _Documentation = ''
stEnumElScanDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumElScanDirection, enum_prefix=None)
stEnumElScanDirection.Up = stEnumElScanDirection._CF_enumeration.addEnumeration(unicode_value='Up', tag='Up')
stEnumElScanDirection.Down = stEnumElScanDirection._CF_enumeration.addEnumeration(unicode_value='Down', tag='Down')
stEnumElScanDirection._InitializeFacetMap(stEnumElScanDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumElScanDirection', stEnumElScanDirection)
_module_typeBindings.stEnumElScanDirection = stEnumElScanDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumExternalIqSampleRateKind
class stEnumExternalIqSampleRateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumExternalIqSampleRateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3316, 2)
    _Documentation = ''
stEnumExternalIqSampleRateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumExternalIqSampleRateKind, enum_prefix=None)
stEnumExternalIqSampleRateKind.Sample_Rate_2_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_2_Msa_Sec', tag='Sample_Rate_2_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_8_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_8_Msa_Sec', tag='Sample_Rate_8_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_16_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_16_Msa_Sec', tag='Sample_Rate_16_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_32_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_32_Msa_Sec', tag='Sample_Rate_32_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_64_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_64_Msa_Sec', tag='Sample_Rate_64_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_128_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_128_Msa_Sec', tag='Sample_Rate_128_Msa_Sec')
stEnumExternalIqSampleRateKind.Sample_Rate_256_Msa_Sec = stEnumExternalIqSampleRateKind._CF_enumeration.addEnumeration(unicode_value='Sample_Rate_256_Msa_Sec', tag='Sample_Rate_256_Msa_Sec')
stEnumExternalIqSampleRateKind._InitializeFacetMap(stEnumExternalIqSampleRateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumExternalIqSampleRateKind', stEnumExternalIqSampleRateKind)
_module_typeBindings.stEnumExternalIqSampleRateKind = stEnumExternalIqSampleRateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumGeneratorKind
class stEnumGeneratorKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumGeneratorKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3333, 2)
    _Documentation = ''
stEnumGeneratorKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumGeneratorKind, enum_prefix=None)
stEnumGeneratorKind.Independent = stEnumGeneratorKind._CF_enumeration.addEnumeration(unicode_value='Independent', tag='Independent')
stEnumGeneratorKind.Synchronized = stEnumGeneratorKind._CF_enumeration.addEnumeration(unicode_value='Synchronized', tag='Synchronized')
stEnumGeneratorKind.Interrupt = stEnumGeneratorKind._CF_enumeration.addEnumeration(unicode_value='Interrupt', tag='Interrupt')
stEnumGeneratorKind._InitializeFacetMap(stEnumGeneratorKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumGeneratorKind', stEnumGeneratorKind)
_module_typeBindings.stEnumGeneratorKind = stEnumGeneratorKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumHfimSamplePeriodKind
class stEnumHfimSamplePeriodKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumHfimSamplePeriodKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3346, 2)
    _Documentation = ''
stEnumHfimSamplePeriodKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumHfimSamplePeriodKind, enum_prefix=None)
stEnumHfimSamplePeriodKind.Period_15_625_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_15_625_Nanosec', tag='Period_15_625_Nanosec')
stEnumHfimSamplePeriodKind.Period_62_5_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_62_5_Nanosec', tag='Period_62_5_Nanosec')
stEnumHfimSamplePeriodKind.Period_250_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_250_Nanosec', tag='Period_250_Nanosec')
stEnumHfimSamplePeriodKind.Period_1_Usec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_1_Usec', tag='Period_1_Usec')
stEnumHfimSamplePeriodKind.Period_7_813_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_7_813_Nanosec', tag='Period_7_813_Nanosec')
stEnumHfimSamplePeriodKind.Period_31_25_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_31_25_Nanosec', tag='Period_31_25_Nanosec')
stEnumHfimSamplePeriodKind.Period_125_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_125_Nanosec', tag='Period_125_Nanosec')
stEnumHfimSamplePeriodKind.Period_500_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_500_Nanosec', tag='Period_500_Nanosec')
stEnumHfimSamplePeriodKind.Period_2_Usec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_2_Usec', tag='Period_2_Usec')
stEnumHfimSamplePeriodKind.Period_3_90625_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_3_90625_Nanosec', tag='Period_3_90625_Nanosec')
stEnumHfimSamplePeriodKind.Period_0_78125_Nanosec = stEnumHfimSamplePeriodKind._CF_enumeration.addEnumeration(unicode_value='Period_0_78125_Nanosec', tag='Period_0_78125_Nanosec')
stEnumHfimSamplePeriodKind._InitializeFacetMap(stEnumHfimSamplePeriodKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumHfimSamplePeriodKind', stEnumHfimSamplePeriodKind)
_module_typeBindings.stEnumHfimSamplePeriodKind = stEnumHfimSamplePeriodKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInterpulseModulationKind
class stEnumInterpulseModulationKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInterpulseModulationKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3367, 2)
    _Documentation = ''
stEnumInterpulseModulationKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInterpulseModulationKind, enum_prefix=None)
stEnumInterpulseModulationKind.Constant_Duty_Cycle = stEnumInterpulseModulationKind._CF_enumeration.addEnumeration(unicode_value='Constant_Duty_Cycle', tag='Constant_Duty_Cycle')
stEnumInterpulseModulationKind.Pulse_Width_Jitter = stEnumInterpulseModulationKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Width_Jitter', tag='Pulse_Width_Jitter')
stEnumInterpulseModulationKind.Periodic_Modulation = stEnumInterpulseModulationKind._CF_enumeration.addEnumeration(unicode_value='Periodic_Modulation', tag='Periodic_Modulation')
stEnumInterpulseModulationKind._InitializeFacetMap(stEnumInterpulseModulationKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInterpulseModulationKind', stEnumInterpulseModulationKind)
_module_typeBindings.stEnumInterpulseModulationKind = stEnumInterpulseModulationKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPowerLevelKind
class stEnumPowerLevelKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPowerLevelKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3380, 2)
    _Documentation = ''
stEnumPowerLevelKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPowerLevelKind, enum_prefix=None)
stEnumPowerLevelKind.Low_Power = stEnumPowerLevelKind._CF_enumeration.addEnumeration(unicode_value='Low_Power', tag='Low_Power')
stEnumPowerLevelKind.High_Power = stEnumPowerLevelKind._CF_enumeration.addEnumeration(unicode_value='High_Power', tag='High_Power')
stEnumPowerLevelKind._InitializeFacetMap(stEnumPowerLevelKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPowerLevelKind', stEnumPowerLevelKind)
_module_typeBindings.stEnumPowerLevelKind = stEnumPowerLevelKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPhaseShiftKind
class stEnumPhaseShiftKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPhaseShiftKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3392, 2)
    _Documentation = ''
stEnumPhaseShiftKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPhaseShiftKind, enum_prefix=None)
stEnumPhaseShiftKind.Of_0 = stEnumPhaseShiftKind._CF_enumeration.addEnumeration(unicode_value='Of_0', tag='Of_0')
stEnumPhaseShiftKind.Of_90 = stEnumPhaseShiftKind._CF_enumeration.addEnumeration(unicode_value='Of_90', tag='Of_90')
stEnumPhaseShiftKind.Of_180 = stEnumPhaseShiftKind._CF_enumeration.addEnumeration(unicode_value='Of_180', tag='Of_180')
stEnumPhaseShiftKind.Of_270 = stEnumPhaseShiftKind._CF_enumeration.addEnumeration(unicode_value='Of_270', tag='Of_270')
stEnumPhaseShiftKind._InitializeFacetMap(stEnumPhaseShiftKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPhaseShiftKind', stEnumPhaseShiftKind)
_module_typeBindings.stEnumPhaseShiftKind = stEnumPhaseShiftKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPolarizationKind
class stEnumPolarizationKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPolarizationKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3406, 2)
    _Documentation = ''
stEnumPolarizationKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPolarizationKind, enum_prefix=None)
stEnumPolarizationKind.PolNone = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='PolNone', tag='PolNone')
stEnumPolarizationKind.Horizontal = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='Horizontal', tag='Horizontal')
stEnumPolarizationKind.Vertical = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='Vertical', tag='Vertical')
stEnumPolarizationKind.Right_Slant = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='Right_Slant', tag='Right_Slant')
stEnumPolarizationKind.Left_Slant = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='Left_Slant', tag='Left_Slant')
stEnumPolarizationKind.RH_Circular = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='RH_Circular', tag='RH_Circular')
stEnumPolarizationKind.LH_Circular = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='LH_Circular', tag='LH_Circular')
stEnumPolarizationKind.Elliptical = stEnumPolarizationKind._CF_enumeration.addEnumeration(unicode_value='Elliptical', tag='Elliptical')
stEnumPolarizationKind._InitializeFacetMap(stEnumPolarizationKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPolarizationKind', stEnumPolarizationKind)
_module_typeBindings.stEnumPolarizationKind = stEnumPolarizationKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPolarizationModelKind
class stEnumPolarizationModelKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPolarizationModelKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3424, 2)
    _Documentation = ''
stEnumPolarizationModelKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPolarizationModelKind, enum_prefix=None)
stEnumPolarizationModelKind.None_ = stEnumPolarizationModelKind._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
stEnumPolarizationModelKind.Uniform_Polarization = stEnumPolarizationModelKind._CF_enumeration.addEnumeration(unicode_value='Uniform_Polarization', tag='Uniform_Polarization')
stEnumPolarizationModelKind.Az_El_Polarization = stEnumPolarizationModelKind._CF_enumeration.addEnumeration(unicode_value='Az_El_Polarization', tag='Az_El_Polarization')
stEnumPolarizationModelKind._InitializeFacetMap(stEnumPolarizationModelKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPolarizationModelKind', stEnumPolarizationModelKind)
_module_typeBindings.stEnumPolarizationModelKind = stEnumPolarizationModelKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumFrequencySource
class stEnumFrequencySource (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumFrequencySource')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3437, 2)
    _Documentation = ''
stEnumFrequencySource._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumFrequencySource, enum_prefix=None)
stEnumFrequencySource.Primary = stEnumFrequencySource._CF_enumeration.addEnumeration(unicode_value='Primary', tag='Primary')
stEnumFrequencySource.Secondary = stEnumFrequencySource._CF_enumeration.addEnumeration(unicode_value='Secondary', tag='Secondary')
stEnumFrequencySource._InitializeFacetMap(stEnumFrequencySource._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumFrequencySource', stEnumFrequencySource)
_module_typeBindings.stEnumFrequencySource = stEnumFrequencySource

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPriority
class stEnumPriority (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPriority')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3449, 2)
    _Documentation = ''
stEnumPriority._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPriority, enum_prefix=None)
stEnumPriority.None_ = stEnumPriority._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
stEnumPriority.Digital = stEnumPriority._CF_enumeration.addEnumeration(unicode_value='Digital', tag='Digital')
stEnumPriority.Digital_Rf_Interrupt = stEnumPriority._CF_enumeration.addEnumeration(unicode_value='Digital_Rf_Interrupt', tag='Digital_Rf_Interrupt')
stEnumPriority._InitializeFacetMap(stEnumPriority._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPriority', stEnumPriority)
_module_typeBindings.stEnumPriority = stEnumPriority

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPulseGroupKind
class stEnumPulseGroupKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPulseGroupKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3462, 2)
    _Documentation = ''
stEnumPulseGroupKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPulseGroupKind, enum_prefix=None)
stEnumPulseGroupKind.Stable = stEnumPulseGroupKind._CF_enumeration.addEnumeration(unicode_value='Stable', tag='Stable')
stEnumPulseGroupKind.Modulation = stEnumPulseGroupKind._CF_enumeration.addEnumeration(unicode_value='Modulation', tag='Modulation')
stEnumPulseGroupKind.Stagger = stEnumPulseGroupKind._CF_enumeration.addEnumeration(unicode_value='Stagger', tag='Stagger')
stEnumPulseGroupKind._InitializeFacetMap(stEnumPulseGroupKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPulseGroupKind', stEnumPulseGroupKind)
_module_typeBindings.stEnumPulseGroupKind = stEnumPulseGroupKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDwellKind
class stEnumDwellKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDwellKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3475, 2)
    _Documentation = ''
stEnumDwellKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDwellKind, enum_prefix=None)
stEnumDwellKind.Pulse_Based = stEnumDwellKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumDwellKind.Time_Based = stEnumDwellKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumDwellKind._InitializeFacetMap(stEnumDwellKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDwellKind', stEnumDwellKind)
_module_typeBindings.stEnumDwellKind = stEnumDwellKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDelayTimeModPeriodKind
class stEnumDelayTimeModPeriodKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDelayTimeModPeriodKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3487, 2)
    _Documentation = ''
stEnumDelayTimeModPeriodKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDelayTimeModPeriodKind, enum_prefix=None)
stEnumDelayTimeModPeriodKind.Pulse_Based = stEnumDelayTimeModPeriodKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumDelayTimeModPeriodKind.Time_Based = stEnumDelayTimeModPeriodKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumDelayTimeModPeriodKind._InitializeFacetMap(stEnumDelayTimeModPeriodKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDelayTimeModPeriodKind', stEnumDelayTimeModPeriodKind)
_module_typeBindings.stEnumDelayTimeModPeriodKind = stEnumDelayTimeModPeriodKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumModPeriodKind
class stEnumModPeriodKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumModPeriodKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3499, 2)
    _Documentation = ''
stEnumModPeriodKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumModPeriodKind, enum_prefix=None)
stEnumModPeriodKind.Pulse_Based = stEnumModPeriodKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumModPeriodKind.Time_Based = stEnumModPeriodKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumModPeriodKind._InitializeFacetMap(stEnumModPeriodKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumModPeriodKind', stEnumModPeriodKind)
_module_typeBindings.stEnumModPeriodKind = stEnumModPeriodKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInterruptGeneratorKind
class stEnumInterruptGeneratorKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInterruptGeneratorKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3511, 2)
    _Documentation = ''
stEnumInterruptGeneratorKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInterruptGeneratorKind, enum_prefix=None)
stEnumInterruptGeneratorKind.Pulse_Based = stEnumInterruptGeneratorKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumInterruptGeneratorKind.Time_Based = stEnumInterruptGeneratorKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumInterruptGeneratorKind._InitializeFacetMap(stEnumInterruptGeneratorKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInterruptGeneratorKind', stEnumInterruptGeneratorKind)
_module_typeBindings.stEnumInterruptGeneratorKind = stEnumInterruptGeneratorKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSwitchDelayKind
class stEnumSwitchDelayKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSwitchDelayKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3523, 2)
    _Documentation = ''
stEnumSwitchDelayKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSwitchDelayKind, enum_prefix=None)
stEnumSwitchDelayKind.Pulse_Based = stEnumSwitchDelayKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumSwitchDelayKind.Time_Based = stEnumSwitchDelayKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumSwitchDelayKind._InitializeFacetMap(stEnumSwitchDelayKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSwitchDelayKind', stEnumSwitchDelayKind)
_module_typeBindings.stEnumSwitchDelayKind = stEnumSwitchDelayKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBeamDwellKind
class stEnumBeamDwellKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBeamDwellKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3535, 2)
    _Documentation = ''
stEnumBeamDwellKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBeamDwellKind, enum_prefix=None)
stEnumBeamDwellKind.Pulse_Based = stEnumBeamDwellKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumBeamDwellKind.Time_Based = stEnumBeamDwellKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumBeamDwellKind._InitializeFacetMap(stEnumBeamDwellKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBeamDwellKind', stEnumBeamDwellKind)
_module_typeBindings.stEnumBeamDwellKind = stEnumBeamDwellKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInterpulseModulationPeriodKind
class stEnumInterpulseModulationPeriodKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInterpulseModulationPeriodKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3547, 2)
    _Documentation = ''
stEnumInterpulseModulationPeriodKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInterpulseModulationPeriodKind, enum_prefix=None)
stEnumInterpulseModulationPeriodKind.Pulse_Based = stEnumInterpulseModulationPeriodKind._CF_enumeration.addEnumeration(unicode_value='Pulse_Based', tag='Pulse_Based')
stEnumInterpulseModulationPeriodKind.Time_Based = stEnumInterpulseModulationPeriodKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumInterpulseModulationPeriodKind._InitializeFacetMap(stEnumInterpulseModulationPeriodKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInterpulseModulationPeriodKind', stEnumInterpulseModulationPeriodKind)
_module_typeBindings.stEnumInterpulseModulationPeriodKind = stEnumInterpulseModulationPeriodKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumAzScanKind
class stEnumAzScanKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumAzScanKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3559, 2)
    _Documentation = ''
stEnumAzScanKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumAzScanKind, enum_prefix=None)
stEnumAzScanKind.Circular = stEnumAzScanKind._CF_enumeration.addEnumeration(unicode_value='Circular', tag='Circular')
stEnumAzScanKind.Omni = stEnumAzScanKind._CF_enumeration.addEnumeration(unicode_value='Omni', tag='Omni')
stEnumAzScanKind.Sector = stEnumAzScanKind._CF_enumeration.addEnumeration(unicode_value='Sector', tag='Sector')
stEnumAzScanKind.Steady = stEnumAzScanKind._CF_enumeration.addEnumeration(unicode_value='Steady', tag='Steady')
stEnumAzScanKind.Synchronized = stEnumAzScanKind._CF_enumeration.addEnumeration(unicode_value='Synchronized', tag='Synchronized')
stEnumAzScanKind._InitializeFacetMap(stEnumAzScanKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumAzScanKind', stEnumAzScanKind)
_module_typeBindings.stEnumAzScanKind = stEnumAzScanKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumElScanKind
class stEnumElScanKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumElScanKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3574, 2)
    _Documentation = ''
stEnumElScanKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumElScanKind, enum_prefix=None)
stEnumElScanKind.Circular = stEnumElScanKind._CF_enumeration.addEnumeration(unicode_value='Circular', tag='Circular')
stEnumElScanKind.Omni = stEnumElScanKind._CF_enumeration.addEnumeration(unicode_value='Omni', tag='Omni')
stEnumElScanKind.Sector = stEnumElScanKind._CF_enumeration.addEnumeration(unicode_value='Sector', tag='Sector')
stEnumElScanKind.Steady = stEnumElScanKind._CF_enumeration.addEnumeration(unicode_value='Steady', tag='Steady')
stEnumElScanKind.Synchronized = stEnumElScanKind._CF_enumeration.addEnumeration(unicode_value='Synchronized', tag='Synchronized')
stEnumElScanKind._InitializeFacetMap(stEnumElScanKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumElScanKind', stEnumElScanKind)
_module_typeBindings.stEnumElScanKind = stEnumElScanKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumScanMotion
class stEnumScanMotion (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumScanMotion')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3589, 2)
    _Documentation = ''
stEnumScanMotion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumScanMotion, enum_prefix=None)
stEnumScanMotion.Bidirectional = stEnumScanMotion._CF_enumeration.addEnumeration(unicode_value='Bidirectional', tag='Bidirectional')
stEnumScanMotion.Unidirectional = stEnumScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional', tag='Unidirectional')
stEnumScanMotion.Unidirectional_Flyback = stEnumScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional_Flyback', tag='Unidirectional_Flyback')
stEnumScanMotion._InitializeFacetMap(stEnumScanMotion._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumScanMotion', stEnumScanMotion)
_module_typeBindings.stEnumScanMotion = stEnumScanMotion

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumAzScanMotion
class stEnumAzScanMotion (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumAzScanMotion')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3602, 2)
    _Documentation = ''
stEnumAzScanMotion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumAzScanMotion, enum_prefix=None)
stEnumAzScanMotion.Bidirectional = stEnumAzScanMotion._CF_enumeration.addEnumeration(unicode_value='Bidirectional', tag='Bidirectional')
stEnumAzScanMotion.Unidirectional = stEnumAzScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional', tag='Unidirectional')
stEnumAzScanMotion.Unidirectional_Flyback = stEnumAzScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional_Flyback', tag='Unidirectional_Flyback')
stEnumAzScanMotion._InitializeFacetMap(stEnumAzScanMotion._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumAzScanMotion', stEnumAzScanMotion)
_module_typeBindings.stEnumAzScanMotion = stEnumAzScanMotion

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumElScanMotion
class stEnumElScanMotion (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumElScanMotion')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3615, 2)
    _Documentation = ''
stEnumElScanMotion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumElScanMotion, enum_prefix=None)
stEnumElScanMotion.Bidirectional = stEnumElScanMotion._CF_enumeration.addEnumeration(unicode_value='Bidirectional', tag='Bidirectional')
stEnumElScanMotion.Unidirectional = stEnumElScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional', tag='Unidirectional')
stEnumElScanMotion.Unidirectional_Flyback = stEnumElScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional_Flyback', tag='Unidirectional_Flyback')
stEnumElScanMotion._InitializeFacetMap(stEnumElScanMotion._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumElScanMotion', stEnumElScanMotion)
_module_typeBindings.stEnumElScanMotion = stEnumElScanMotion

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumBarScanMotion
class stEnumBarScanMotion (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumBarScanMotion')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3628, 2)
    _Documentation = ''
stEnumBarScanMotion._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumBarScanMotion, enum_prefix=None)
stEnumBarScanMotion.Bidirectional = stEnumBarScanMotion._CF_enumeration.addEnumeration(unicode_value='Bidirectional', tag='Bidirectional')
stEnumBarScanMotion.Unidirectional = stEnumBarScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional', tag='Unidirectional')
stEnumBarScanMotion.Unidirectional_Flyback = stEnumBarScanMotion._CF_enumeration.addEnumeration(unicode_value='Unidirectional_Flyback', tag='Unidirectional_Flyback')
stEnumBarScanMotion._InitializeFacetMap(stEnumBarScanMotion._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumBarScanMotion', stEnumBarScanMotion)
_module_typeBindings.stEnumBarScanMotion = stEnumBarScanMotion

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSpiralDirection
class stEnumSpiralDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSpiralDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3641, 2)
    _Documentation = ''
stEnumSpiralDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSpiralDirection, enum_prefix=None)
stEnumSpiralDirection.Inward = stEnumSpiralDirection._CF_enumeration.addEnumeration(unicode_value='Inward', tag='Inward')
stEnumSpiralDirection.Outward = stEnumSpiralDirection._CF_enumeration.addEnumeration(unicode_value='Outward', tag='Outward')
stEnumSpiralDirection._InitializeFacetMap(stEnumSpiralDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSpiralDirection', stEnumSpiralDirection)
_module_typeBindings.stEnumSpiralDirection = stEnumSpiralDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumTriggerType
class stEnumTriggerType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumTriggerType')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3653, 2)
    _Documentation = ''
stEnumTriggerType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumTriggerType, enum_prefix=None)
stEnumTriggerType.Bar = stEnumTriggerType._CF_enumeration.addEnumeration(unicode_value='Bar', tag='Bar')
stEnumTriggerType.Raster = stEnumTriggerType._CF_enumeration.addEnumeration(unicode_value='Raster', tag='Raster')
stEnumTriggerType._InitializeFacetMap(stEnumTriggerType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumTriggerType', stEnumTriggerType)
_module_typeBindings.stEnumTriggerType = stEnumTriggerType

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringSegmentName
class stStringSegmentName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringSegmentName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3665, 2)
    _Documentation = ''
stStringSegmentName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stStringSegmentName', stStringSegmentName)
_module_typeBindings.stStringSegmentName = stStringSegmentName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringDelayTimeJitterDstrbKind
class stStringDelayTimeJitterDstrbKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringDelayTimeJitterDstrbKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3674, 2)
    _Documentation = ''
stStringDelayTimeJitterDstrbKind._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringDelayTimeJitterDstrbKind._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringDelayTimeJitterDstrbKind._InitializeFacetMap(stStringDelayTimeJitterDstrbKind._CF_minLength,
   stStringDelayTimeJitterDstrbKind._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringDelayTimeJitterDstrbKind', stStringDelayTimeJitterDstrbKind)
_module_typeBindings.stStringDelayTimeJitterDstrbKind = stStringDelayTimeJitterDstrbKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringSecDtJitterDstrbKind
class stStringSecDtJitterDstrbKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringSecDtJitterDstrbKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3686, 2)
    _Documentation = ''
stStringSecDtJitterDstrbKind._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringSecDtJitterDstrbKind._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringSecDtJitterDstrbKind._InitializeFacetMap(stStringSecDtJitterDstrbKind._CF_minLength,
   stStringSecDtJitterDstrbKind._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringSecDtJitterDstrbKind', stStringSecDtJitterDstrbKind)
_module_typeBindings.stStringSecDtJitterDstrbKind = stStringSecDtJitterDstrbKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringJitterDstrbKind
class stStringJitterDstrbKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringJitterDstrbKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3698, 2)
    _Documentation = ''
stStringJitterDstrbKind._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringJitterDstrbKind._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringJitterDstrbKind._InitializeFacetMap(stStringJitterDstrbKind._CF_minLength,
   stStringJitterDstrbKind._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringJitterDstrbKind', stStringJitterDstrbKind)
_module_typeBindings.stStringJitterDstrbKind = stStringJitterDstrbKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringSecJitterDstrbKind
class stStringSecJitterDstrbKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringSecJitterDstrbKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3710, 2)
    _Documentation = ''
stStringSecJitterDstrbKind._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringSecJitterDstrbKind._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringSecJitterDstrbKind._InitializeFacetMap(stStringSecJitterDstrbKind._CF_minLength,
   stStringSecJitterDstrbKind._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringSecJitterDstrbKind', stStringSecJitterDstrbKind)
_module_typeBindings.stStringSecJitterDstrbKind = stStringSecJitterDstrbKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringAgilityPatternName
class stStringAgilityPatternName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringAgilityPatternName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3722, 2)
    _Documentation = ''
stStringAgilityPatternName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringAgilityPatternName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringAgilityPatternName._InitializeFacetMap(stStringAgilityPatternName._CF_minLength,
   stStringAgilityPatternName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringAgilityPatternName', stStringAgilityPatternName)
_module_typeBindings.stStringAgilityPatternName = stStringAgilityPatternName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringJitterDstrbName
class stStringJitterDstrbName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringJitterDstrbName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3734, 2)
    _Documentation = ''
stStringJitterDstrbName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringJitterDstrbName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringJitterDstrbName._InitializeFacetMap(stStringJitterDstrbName._CF_minLength,
   stStringJitterDstrbName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringJitterDstrbName', stStringJitterDstrbName)
_module_typeBindings.stStringJitterDstrbName = stStringJitterDstrbName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringModeComment
class stStringModeComment (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringModeComment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3746, 2)
    _Documentation = ''
stStringModeComment._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringModeComment._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(250))
stStringModeComment._InitializeFacetMap(stStringModeComment._CF_minLength,
   stStringModeComment._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringModeComment', stStringModeComment)
_module_typeBindings.stStringModeComment = stStringModeComment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringGeneratorComment
class stStringGeneratorComment (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringGeneratorComment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3758, 2)
    _Documentation = ''
stStringGeneratorComment._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stStringGeneratorComment', stStringGeneratorComment)
_module_typeBindings.stStringGeneratorComment = stStringGeneratorComment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringGeneratorName
class stStringGeneratorName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringGeneratorName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3767, 2)
    _Documentation = ''
stStringGeneratorName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringGeneratorName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(250))
stStringGeneratorName._InitializeFacetMap(stStringGeneratorName._CF_minLength,
   stStringGeneratorName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringGeneratorName', stStringGeneratorName)
_module_typeBindings.stStringGeneratorName = stStringGeneratorName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringModeName
class stStringModeName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringModeName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3779, 2)
    _Documentation = ''
stStringModeName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(1))
stStringModeName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringModeName._InitializeFacetMap(stStringModeName._CF_minLength,
   stStringModeName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringModeName', stStringModeName)
_module_typeBindings.stStringModeName = stStringModeName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringSubmodeName
class stStringSubmodeName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringSubmodeName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3791, 2)
    _Documentation = ''
stStringSubmodeName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringSubmodeName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(22))
stStringSubmodeName._InitializeFacetMap(stStringSubmodeName._CF_minLength,
   stStringSubmodeName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringSubmodeName', stStringSubmodeName)
_module_typeBindings.stStringSubmodeName = stStringSubmodeName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringComplexPriEntryId
class stStringComplexPriEntryId (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringComplexPriEntryId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3803, 2)
    _Documentation = ''
stStringComplexPriEntryId._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringComplexPriEntryId._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(40))
stStringComplexPriEntryId._InitializeFacetMap(stStringComplexPriEntryId._CF_minLength,
   stStringComplexPriEntryId._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringComplexPriEntryId', stStringComplexPriEntryId)
_module_typeBindings.stStringComplexPriEntryId = stStringComplexPriEntryId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringTriggersSegment
class stStringTriggersSegment (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringTriggersSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3815, 2)
    _Documentation = ''
stStringTriggersSegment._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringTriggersSegment._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringTriggersSegment._InitializeFacetMap(stStringTriggersSegment._CF_minLength,
   stStringTriggersSegment._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringTriggersSegment', stStringTriggersSegment)
_module_typeBindings.stStringTriggersSegment = stStringTriggersSegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextAzElPatternName
class stTextAzElPatternName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextAzElPatternName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3827, 2)
    _Documentation = ''
stTextAzElPatternName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextAzElPatternName', stTextAzElPatternName)
_module_typeBindings.stTextAzElPatternName = stTextAzElPatternName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextExternalIqPatternName
class stTextExternalIqPatternName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextExternalIqPatternName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3836, 2)
    _Documentation = ''
stTextExternalIqPatternName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextExternalIqPatternName', stTextExternalIqPatternName)
_module_typeBindings.stTextExternalIqPatternName = stTextExternalIqPatternName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextHfimSampleName
class stTextHfimSampleName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextHfimSampleName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3845, 2)
    _Documentation = ''
stTextHfimSampleName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextHfimSampleName', stTextHfimSampleName)
_module_typeBindings.stTextHfimSampleName = stTextHfimSampleName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextAzScanShape
class stTextAzScanShape (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextAzScanShape')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3854, 2)
    _Documentation = ''
stTextAzScanShape._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextAzScanShape', stTextAzScanShape)
_module_typeBindings.stTextAzScanShape = stTextAzScanShape

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextElScanShape
class stTextElScanShape (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextElScanShape')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3863, 2)
    _Documentation = ''
stTextElScanShape._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextElScanShape', stTextElScanShape)
_module_typeBindings.stTextElScanShape = stTextElScanShape

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextDelayTimeModPatternKind
class stTextDelayTimeModPatternKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextDelayTimeModPatternKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3872, 2)
    _Documentation = ''
stTextDelayTimeModPatternKind._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextDelayTimeModPatternKind', stTextDelayTimeModPatternKind)
_module_typeBindings.stTextDelayTimeModPatternKind = stTextDelayTimeModPatternKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextSecDtModPatternKind
class stTextSecDtModPatternKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextSecDtModPatternKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3881, 2)
    _Documentation = ''
stTextSecDtModPatternKind._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextSecDtModPatternKind', stTextSecDtModPatternKind)
_module_typeBindings.stTextSecDtModPatternKind = stTextSecDtModPatternKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextSecModPatternKind
class stTextSecModPatternKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextSecModPatternKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3890, 2)
    _Documentation = ''
stTextSecModPatternKind._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextSecModPatternKind', stTextSecModPatternKind)
_module_typeBindings.stTextSecModPatternKind = stTextSecModPatternKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextModPatternKind
class stTextModPatternKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextModPatternKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3899, 2)
    _Documentation = ''
stTextModPatternKind._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextModPatternKind', stTextModPatternKind)
_module_typeBindings.stTextModPatternKind = stTextModPatternKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextInterpulseModulationPatternName
class stTextInterpulseModulationPatternName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextInterpulseModulationPatternName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3908, 2)
    _Documentation = ''
stTextInterpulseModulationPatternName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextInterpulseModulationPatternName', stTextInterpulseModulationPatternName)
_module_typeBindings.stTextInterpulseModulationPatternName = stTextInterpulseModulationPatternName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextBurstModPatternName
class stTextBurstModPatternName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextBurstModPatternName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3917, 2)
    _Documentation = ''
stTextBurstModPatternName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextBurstModPatternName', stTextBurstModPatternName)
_module_typeBindings.stTextBurstModPatternName = stTextBurstModPatternName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAgilityResolutionSwitch
class stBoolAgilityResolutionSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAgilityResolutionSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3926, 2)
    _Documentation = ''
stBoolAgilityResolutionSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAgilityResolutionSwitch', stBoolAgilityResolutionSwitch)
_module_typeBindings.stBoolAgilityResolutionSwitch = stBoolAgilityResolutionSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAgilityStatus
class stBoolAgilityStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAgilityStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3935, 2)
    _Documentation = ''
stBoolAgilityStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAgilityStatus', stBoolAgilityStatus)
_module_typeBindings.stBoolAgilityStatus = stBoolAgilityStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAntennaRotation
class stBoolAntennaRotation (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAntennaRotation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3944, 2)
    _Documentation = ''
stBoolAntennaRotation._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAntennaRotation', stBoolAntennaRotation)
_module_typeBindings.stBoolAntennaRotation = stBoolAntennaRotation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzExitCondition
class stBoolAzExitCondition (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzExitCondition')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3953, 2)
    _Documentation = ''
stBoolAzExitCondition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzExitCondition', stBoolAzExitCondition)
_module_typeBindings.stBoolAzExitCondition = stBoolAzExitCondition

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzimuthFrequencyTrigger
class stBoolAzimuthFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzimuthFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3962, 2)
    _Documentation = ''
stBoolAzimuthFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzimuthFrequencyTrigger', stBoolAzimuthFrequencyTrigger)
_module_typeBindings.stBoolAzimuthFrequencyTrigger = stBoolAzimuthFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzimuthPriTrigger
class stBoolAzimuthPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzimuthPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3971, 2)
    _Documentation = ''
stBoolAzimuthPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzimuthPriTrigger', stBoolAzimuthPriTrigger)
_module_typeBindings.stBoolAzimuthPriTrigger = stBoolAzimuthPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzimuthPulseTrigger
class stBoolAzimuthPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzimuthPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3980, 2)
    _Documentation = ''
stBoolAzimuthPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzimuthPulseTrigger', stBoolAzimuthPulseTrigger)
_module_typeBindings.stBoolAzimuthPulseTrigger = stBoolAzimuthPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzimuthTestPoint
class stBoolAzimuthTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzimuthTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3989, 2)
    _Documentation = ''
stBoolAzimuthTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzimuthTestPoint', stBoolAzimuthTestPoint)
_module_typeBindings.stBoolAzimuthTestPoint = stBoolAzimuthTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzPeriodSynchronization
class stBoolAzPeriodSynchronization (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzPeriodSynchronization')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 3998, 2)
    _Documentation = ''
stBoolAzPeriodSynchronization._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzPeriodSynchronization', stBoolAzPeriodSynchronization)
_module_typeBindings.stBoolAzPeriodSynchronization = stBoolAzPeriodSynchronization

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzScanReset
class stBoolAzScanReset (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzScanReset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4007, 2)
    _Documentation = ''
stBoolAzScanReset._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzScanReset', stBoolAzScanReset)
_module_typeBindings.stBoolAzScanReset = stBoolAzScanReset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzSutTrackingSwitch
class stBoolAzSutTrackingSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzSutTrackingSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4016, 2)
    _Documentation = ''
stBoolAzSutTrackingSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzSutTrackingSwitch', stBoolAzSutTrackingSwitch)
_module_typeBindings.stBoolAzSutTrackingSwitch = stBoolAzSutTrackingSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAzTrackingSwitch
class stBoolAzTrackingSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAzTrackingSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4025, 2)
    _Documentation = ''
stBoolAzTrackingSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAzTrackingSwitch', stBoolAzTrackingSwitch)
_module_typeBindings.stBoolAzTrackingSwitch = stBoolAzTrackingSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBarFrequencyTrigger
class stBoolBarFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBarFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4034, 2)
    _Documentation = ''
stBoolBarFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBarFrequencyTrigger', stBoolBarFrequencyTrigger)
_module_typeBindings.stBoolBarFrequencyTrigger = stBoolBarFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBarPriTrigger
class stBoolBarPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBarPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4043, 2)
    _Documentation = ''
stBoolBarPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBarPriTrigger', stBoolBarPriTrigger)
_module_typeBindings.stBoolBarPriTrigger = stBoolBarPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBarPulseTrigger
class stBoolBarPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBarPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4052, 2)
    _Documentation = ''
stBoolBarPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBarPulseTrigger', stBoolBarPulseTrigger)
_module_typeBindings.stBoolBarPulseTrigger = stBoolBarPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBarScanTrigger
class stBoolBarScanTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBarScanTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4061, 2)
    _Documentation = ''
stBoolBarScanTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBarScanTrigger', stBoolBarScanTrigger)
_module_typeBindings.stBoolBarScanTrigger = stBoolBarScanTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamAzimuthTestPoint
class stBoolBeamAzimuthTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamAzimuthTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4070, 2)
    _Documentation = ''
stBoolBeamAzimuthTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamAzimuthTestPoint', stBoolBeamAzimuthTestPoint)
_module_typeBindings.stBoolBeamAzimuthTestPoint = stBoolBeamAzimuthTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamBlankingList
class stBoolBeamBlankingList (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamBlankingList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4079, 2)
    _Documentation = ''
stBoolBeamBlankingList._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamBlankingList', stBoolBeamBlankingList)
_module_typeBindings.stBoolBeamBlankingList = stBoolBeamBlankingList

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamDwellStatus
class stBoolBeamDwellStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamDwellStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4088, 2)
    _Documentation = ''
stBoolBeamDwellStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamDwellStatus', stBoolBeamDwellStatus)
_module_typeBindings.stBoolBeamDwellStatus = stBoolBeamDwellStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamElevationTestPoint
class stBoolBeamElevationTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamElevationTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4097, 2)
    _Documentation = ''
stBoolBeamElevationTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamElevationTestPoint', stBoolBeamElevationTestPoint)
_module_typeBindings.stBoolBeamElevationTestPoint = stBoolBeamElevationTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamFrequencyTrigger
class stBoolBeamFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4106, 2)
    _Documentation = ''
stBoolBeamFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamFrequencyTrigger', stBoolBeamFrequencyTrigger)
_module_typeBindings.stBoolBeamFrequencyTrigger = stBoolBeamFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamPriTrigger
class stBoolBeamPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4115, 2)
    _Documentation = ''
stBoolBeamPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamPriTrigger', stBoolBeamPriTrigger)
_module_typeBindings.stBoolBeamPriTrigger = stBoolBeamPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBeamPulseTrigger
class stBoolBeamPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBeamPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4124, 2)
    _Documentation = ''
stBoolBeamPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBeamPulseTrigger', stBoolBeamPulseTrigger)
_module_typeBindings.stBoolBeamPulseTrigger = stBoolBeamPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolBidirectionReturnOnSameBar
class stBoolBidirectionReturnOnSameBar (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolBidirectionReturnOnSameBar')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4133, 2)
    _Documentation = ''
stBoolBidirectionReturnOnSameBar._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolBidirectionReturnOnSameBar', stBoolBidirectionReturnOnSameBar)
_module_typeBindings.stBoolBidirectionReturnOnSameBar = stBoolBidirectionReturnOnSameBar

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolChannelAudioTestPoint
class stBoolChannelAudioTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolChannelAudioTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4142, 2)
    _Documentation = ''
stBoolChannelAudioTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolChannelAudioTestPoint', stBoolChannelAudioTestPoint)
_module_typeBindings.stBoolChannelAudioTestPoint = stBoolChannelAudioTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolChannelVideoTestPoint
class stBoolChannelVideoTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolChannelVideoTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4151, 2)
    _Documentation = ''
stBoolChannelVideoTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolChannelVideoTestPoint', stBoolChannelVideoTestPoint)
_module_typeBindings.stBoolChannelVideoTestPoint = stBoolChannelVideoTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolClockedPriJitterState
class stBoolClockedPriJitterState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolClockedPriJitterState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4160, 2)
    _Documentation = ''
stBoolClockedPriJitterState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolClockedPriJitterState', stBoolClockedPriJitterState)
_module_typeBindings.stBoolClockedPriJitterState = stBoolClockedPriJitterState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolComplexPriState
class stBoolComplexPriState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolComplexPriState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4169, 2)
    _Documentation = ''
stBoolComplexPriState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolComplexPriState', stBoolComplexPriState)
_module_typeBindings.stBoolComplexPriState = stBoolComplexPriState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolCoupledAxisMotionModel
class stBoolCoupledAxisMotionModel (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolCoupledAxisMotionModel')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4178, 2)
    _Documentation = ''
stBoolCoupledAxisMotionModel._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolCoupledAxisMotionModel', stBoolCoupledAxisMotionModel)
_module_typeBindings.stBoolCoupledAxisMotionModel = stBoolCoupledAxisMotionModel

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDedicatedChannelStatus
class stBoolDedicatedChannelStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDedicatedChannelStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4187, 2)
    _Documentation = ''
stBoolDedicatedChannelStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDedicatedChannelStatus', stBoolDedicatedChannelStatus)
_module_typeBindings.stBoolDedicatedChannelStatus = stBoolDedicatedChannelStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDelayTimeJitterResSwitch
class stBoolDelayTimeJitterResSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDelayTimeJitterResSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4196, 2)
    _Documentation = ''
stBoolDelayTimeJitterResSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDelayTimeJitterResSwitch', stBoolDelayTimeJitterResSwitch)
_module_typeBindings.stBoolDelayTimeJitterResSwitch = stBoolDelayTimeJitterResSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDelayTimeJitterStatus
class stBoolDelayTimeJitterStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDelayTimeJitterStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4205, 2)
    _Documentation = ''
stBoolDelayTimeJitterStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDelayTimeJitterStatus', stBoolDelayTimeJitterStatus)
_module_typeBindings.stBoolDelayTimeJitterStatus = stBoolDelayTimeJitterStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDelayTimeModPeriodSync
class stBoolDelayTimeModPeriodSync (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDelayTimeModPeriodSync')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4214, 2)
    _Documentation = ''
stBoolDelayTimeModPeriodSync._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDelayTimeModPeriodSync', stBoolDelayTimeModPeriodSync)
_module_typeBindings.stBoolDelayTimeModPeriodSync = stBoolDelayTimeModPeriodSync

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDelayTimeModStatus
class stBoolDelayTimeModStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDelayTimeModStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4223, 2)
    _Documentation = ''
stBoolDelayTimeModStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDelayTimeModStatus', stBoolDelayTimeModStatus)
_module_typeBindings.stBoolDelayTimeModStatus = stBoolDelayTimeModStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDigitalVideoTestPoint
class stBoolDigitalVideoTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDigitalVideoTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4232, 2)
    _Documentation = ''
stBoolDigitalVideoTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDigitalVideoTestPoint', stBoolDigitalVideoTestPoint)
_module_typeBindings.stBoolDigitalVideoTestPoint = stBoolDigitalVideoTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDiscreteAmplitudeState
class stBoolDiscreteAmplitudeState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDiscreteAmplitudeState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4241, 2)
    _Documentation = ''
stBoolDiscreteAmplitudeState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDiscreteAmplitudeState', stBoolDiscreteAmplitudeState)
_module_typeBindings.stBoolDiscreteAmplitudeState = stBoolDiscreteAmplitudeState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDiscreteFrequencyState
class stBoolDiscreteFrequencyState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDiscreteFrequencyState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4250, 2)
    _Documentation = ''
stBoolDiscreteFrequencyState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDiscreteFrequencyState', stBoolDiscreteFrequencyState)
_module_typeBindings.stBoolDiscreteFrequencyState = stBoolDiscreteFrequencyState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDiscretePhaseShiftState
class stBoolDiscretePhaseShiftState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDiscretePhaseShiftState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4259, 2)
    _Documentation = ''
stBoolDiscretePhaseShiftState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDiscretePhaseShiftState', stBoolDiscretePhaseShiftState)
_module_typeBindings.stBoolDiscretePhaseShiftState = stBoolDiscretePhaseShiftState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDwellFrequencyTrigger
class stBoolDwellFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDwellFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4268, 2)
    _Documentation = ''
stBoolDwellFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDwellFrequencyTrigger', stBoolDwellFrequencyTrigger)
_module_typeBindings.stBoolDwellFrequencyTrigger = stBoolDwellFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDwellPriTrigger
class stBoolDwellPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDwellPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4277, 2)
    _Documentation = ''
stBoolDwellPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDwellPriTrigger', stBoolDwellPriTrigger)
_module_typeBindings.stBoolDwellPriTrigger = stBoolDwellPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDwellPulseTrigger
class stBoolDwellPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDwellPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4286, 2)
    _Documentation = ''
stBoolDwellPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDwellPulseTrigger', stBoolDwellPulseTrigger)
_module_typeBindings.stBoolDwellPulseTrigger = stBoolDwellPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDwellStatus
class stBoolDwellStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDwellStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4295, 2)
    _Documentation = ''
stBoolDwellStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDwellStatus', stBoolDwellStatus)
_module_typeBindings.stBoolDwellStatus = stBoolDwellStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolEarSequenceTriggerState
class stBoolEarSequenceTriggerState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolEarSequenceTriggerState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4304, 2)
    _Documentation = ''
stBoolEarSequenceTriggerState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolEarSequenceTriggerState', stBoolEarSequenceTriggerState)
_module_typeBindings.stBoolEarSequenceTriggerState = stBoolEarSequenceTriggerState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElevationFrequencyTrigger
class stBoolElevationFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElevationFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4313, 2)
    _Documentation = ''
stBoolElevationFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElevationFrequencyTrigger', stBoolElevationFrequencyTrigger)
_module_typeBindings.stBoolElevationFrequencyTrigger = stBoolElevationFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElevationPriTrigger
class stBoolElevationPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElevationPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4322, 2)
    _Documentation = ''
stBoolElevationPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElevationPriTrigger', stBoolElevationPriTrigger)
_module_typeBindings.stBoolElevationPriTrigger = stBoolElevationPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElevationPulseTrigger
class stBoolElevationPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElevationPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4331, 2)
    _Documentation = ''
stBoolElevationPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElevationPulseTrigger', stBoolElevationPulseTrigger)
_module_typeBindings.stBoolElevationPulseTrigger = stBoolElevationPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElevationTestPoint
class stBoolElevationTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElevationTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4340, 2)
    _Documentation = ''
stBoolElevationTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElevationTestPoint', stBoolElevationTestPoint)
_module_typeBindings.stBoolElevationTestPoint = stBoolElevationTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElExitCondition
class stBoolElExitCondition (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElExitCondition')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4349, 2)
    _Documentation = ''
stBoolElExitCondition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElExitCondition', stBoolElExitCondition)
_module_typeBindings.stBoolElExitCondition = stBoolElExitCondition

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolEllipticalAxisScaling
class stBoolEllipticalAxisScaling (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolEllipticalAxisScaling')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4358, 2)
    _Documentation = ''
stBoolEllipticalAxisScaling._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolEllipticalAxisScaling', stBoolEllipticalAxisScaling)
_module_typeBindings.stBoolEllipticalAxisScaling = stBoolEllipticalAxisScaling

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElPeriodSynchronization
class stBoolElPeriodSynchronization (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElPeriodSynchronization')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4367, 2)
    _Documentation = ''
stBoolElPeriodSynchronization._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElPeriodSynchronization', stBoolElPeriodSynchronization)
_module_typeBindings.stBoolElPeriodSynchronization = stBoolElPeriodSynchronization

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElScanReset
class stBoolElScanReset (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElScanReset')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4376, 2)
    _Documentation = ''
stBoolElScanReset._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElScanReset', stBoolElScanReset)
_module_typeBindings.stBoolElScanReset = stBoolElScanReset

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElSutTrackingSwitch
class stBoolElSutTrackingSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElSutTrackingSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4385, 2)
    _Documentation = ''
stBoolElSutTrackingSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElSutTrackingSwitch', stBoolElSutTrackingSwitch)
_module_typeBindings.stBoolElSutTrackingSwitch = stBoolElSutTrackingSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolElTrackingSwitch
class stBoolElTrackingSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolElTrackingSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4394, 2)
    _Documentation = ''
stBoolElTrackingSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolElTrackingSwitch', stBoolElTrackingSwitch)
_module_typeBindings.stBoolElTrackingSwitch = stBoolElTrackingSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolEndOfRasterTriggerStatus
class stBoolEndOfRasterTriggerStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolEndOfRasterTriggerStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4403, 2)
    _Documentation = ''
stBoolEndOfRasterTriggerStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolEndOfRasterTriggerStatus', stBoolEndOfRasterTriggerStatus)
_module_typeBindings.stBoolEndOfRasterTriggerStatus = stBoolEndOfRasterTriggerStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolExternalIqState
class stBoolExternalIqState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolExternalIqState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4412, 2)
    _Documentation = ''
stBoolExternalIqState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolExternalIqState', stBoolExternalIqState)
_module_typeBindings.stBoolExternalIqState = stBoolExternalIqState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolExternalIqUpsampleData
class stBoolExternalIqUpsampleData (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolExternalIqUpsampleData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4421, 2)
    _Documentation = ''
stBoolExternalIqUpsampleData._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolExternalIqUpsampleData', stBoolExternalIqUpsampleData)
_module_typeBindings.stBoolExternalIqUpsampleData = stBoolExternalIqUpsampleData

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolExternalIqLoopPatternData
class stBoolExternalIqLoopPatternData (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolExternalIqLoopPatternData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4430, 2)
    _Documentation = ''
stBoolExternalIqLoopPatternData._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolExternalIqLoopPatternData', stBoolExternalIqLoopPatternData)
_module_typeBindings.stBoolExternalIqLoopPatternData = stBoolExternalIqLoopPatternData

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolFrequencyTrigger
class stBoolFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4439, 2)
    _Documentation = ''
stBoolFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolFrequencyTrigger', stBoolFrequencyTrigger)
_module_typeBindings.stBoolFrequencyTrigger = stBoolFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGeneratorTriggerState
class stBoolGeneratorTriggerState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGeneratorTriggerState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4448, 2)
    _Documentation = ''
stBoolGeneratorTriggerState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGeneratorTriggerState', stBoolGeneratorTriggerState)
_module_typeBindings.stBoolGeneratorTriggerState = stBoolGeneratorTriggerState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGpAssigned
class stBoolGpAssigned (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGpAssigned')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4457, 2)
    _Documentation = ''
stBoolGpAssigned._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGpAssigned', stBoolGpAssigned)
_module_typeBindings.stBoolGpAssigned = stBoolGpAssigned

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGpPooled
class stBoolGpPooled (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGpPooled')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4466, 2)
    _Documentation = ''
stBoolGpPooled._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGpPooled', stBoolGpPooled)
_module_typeBindings.stBoolGpPooled = stBoolGpPooled

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolHfimState
class stBoolHfimState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolHfimState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4475, 2)
    _Documentation = ''
stBoolHfimState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolHfimState', stBoolHfimState)
_module_typeBindings.stBoolHfimState = stBoolHfimState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterbarBlankingStatus
class stBoolInterbarBlankingStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterbarBlankingStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4484, 2)
    _Documentation = ''
stBoolInterbarBlankingStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterbarBlankingStatus', stBoolInterbarBlankingStatus)
_module_typeBindings.stBoolInterbarBlankingStatus = stBoolInterbarBlankingStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterbarFrequencyTrigger
class stBoolInterbarFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterbarFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4493, 2)
    _Documentation = ''
stBoolInterbarFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterbarFrequencyTrigger', stBoolInterbarFrequencyTrigger)
_module_typeBindings.stBoolInterbarFrequencyTrigger = stBoolInterbarFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterbarPriTrigger
class stBoolInterbarPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterbarPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4502, 2)
    _Documentation = ''
stBoolInterbarPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterbarPriTrigger', stBoolInterbarPriTrigger)
_module_typeBindings.stBoolInterbarPriTrigger = stBoolInterbarPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterbarPulseTrigger
class stBoolInterbarPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterbarPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4511, 2)
    _Documentation = ''
stBoolInterbarPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterbarPulseTrigger', stBoolInterbarPulseTrigger)
_module_typeBindings.stBoolInterbarPulseTrigger = stBoolInterbarPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterbarScanTrigger
class stBoolInterbarScanTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterbarScanTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4520, 2)
    _Documentation = ''
stBoolInterbarScanTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterbarScanTrigger', stBoolInterbarScanTrigger)
_module_typeBindings.stBoolInterbarScanTrigger = stBoolInterbarScanTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterpulseModulationPriSync
class stBoolInterpulseModulationPriSync (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterpulseModulationPriSync')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4529, 2)
    _Documentation = ''
stBoolInterpulseModulationPriSync._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterpulseModulationPriSync', stBoolInterpulseModulationPriSync)
_module_typeBindings.stBoolInterpulseModulationPriSync = stBoolInterpulseModulationPriSync

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterpulseModulationStatus
class stBoolInterpulseModulationStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterpulseModulationStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4538, 2)
    _Documentation = ''
stBoolInterpulseModulationStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterpulseModulationStatus', stBoolInterpulseModulationStatus)
_module_typeBindings.stBoolInterpulseModulationStatus = stBoolInterpulseModulationStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolIntDurOverrideActive
class stBoolIntDurOverrideActive (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolIntDurOverrideActive')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4547, 2)
    _Documentation = ''
stBoolIntDurOverrideActive._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolIntDurOverrideActive', stBoolIntDurOverrideActive)
_module_typeBindings.stBoolIntDurOverrideActive = stBoolIntDurOverrideActive

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInterruptGeneratorInterruptActive
class stBoolInterruptGeneratorInterruptActive (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInterruptGeneratorInterruptActive')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4556, 2)
    _Documentation = ''
stBoolInterruptGeneratorInterruptActive._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInterruptGeneratorInterruptActive', stBoolInterruptGeneratorInterruptActive)
_module_typeBindings.stBoolInterruptGeneratorInterruptActive = stBoolInterruptGeneratorInterruptActive

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolIntrapulseModulationStatus
class stBoolIntrapulseModulationStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolIntrapulseModulationStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4565, 2)
    _Documentation = ''
stBoolIntrapulseModulationStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolIntrapulseModulationStatus', stBoolIntrapulseModulationStatus)
_module_typeBindings.stBoolIntrapulseModulationStatus = stBoolIntrapulseModulationStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolJammerStatus
class stBoolJammerStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolJammerStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4574, 2)
    _Documentation = ''
stBoolJammerStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolJammerStatus', stBoolJammerStatus)
_module_typeBindings.stBoolJammerStatus = stBoolJammerStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolJitterResSwitch
class stBoolJitterResSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolJitterResSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4583, 2)
    _Documentation = ''
stBoolJitterResSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolJitterResSwitch', stBoolJitterResSwitch)
_module_typeBindings.stBoolJitterResSwitch = stBoolJitterResSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolJitterStatus
class stBoolJitterStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolJitterStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4592, 2)
    _Documentation = ''
stBoolJitterStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolJitterStatus', stBoolJitterStatus)
_module_typeBindings.stBoolJitterStatus = stBoolJitterStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolLinearFreqResetFlag
class stBoolLinearFreqResetFlag (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolLinearFreqResetFlag')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4601, 2)
    _Documentation = ''
stBoolLinearFreqResetFlag._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolLinearFreqResetFlag', stBoolLinearFreqResetFlag)
_module_typeBindings.stBoolLinearFreqResetFlag = stBoolLinearFreqResetFlag

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolLinearFrequencyState
class stBoolLinearFrequencyState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolLinearFrequencyState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4610, 2)
    _Documentation = ''
stBoolLinearFrequencyState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolLinearFrequencyState', stBoolLinearFrequencyState)
_module_typeBindings.stBoolLinearFrequencyState = stBoolLinearFrequencyState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolModeProtectionSwitch
class stBoolModeProtectionSwitch (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolModeProtectionSwitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4619, 2)
    _Documentation = ''
stBoolModeProtectionSwitch._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolModeProtectionSwitch', stBoolModeProtectionSwitch)
_module_typeBindings.stBoolModeProtectionSwitch = stBoolModeProtectionSwitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolModeTransitionPeriodActive
class stBoolModeTransitionPeriodActive (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolModeTransitionPeriodActive')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4628, 2)
    _Documentation = ''
stBoolModeTransitionPeriodActive._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolModeTransitionPeriodActive', stBoolModeTransitionPeriodActive)
_module_typeBindings.stBoolModeTransitionPeriodActive = stBoolModeTransitionPeriodActive

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolModPeriodSync
class stBoolModPeriodSync (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolModPeriodSync')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4637, 2)
    _Documentation = ''
stBoolModPeriodSync._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolModPeriodSync', stBoolModPeriodSync)
_module_typeBindings.stBoolModPeriodSync = stBoolModPeriodSync

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolModStatus
class stBoolModStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolModStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4646, 2)
    _Documentation = ''
stBoolModStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolModStatus', stBoolModStatus)
_module_typeBindings.stBoolModStatus = stBoolModStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolNoiseBandwidthState
class stBoolNoiseBandwidthState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolNoiseBandwidthState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4655, 2)
    _Documentation = ''
stBoolNoiseBandwidthState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolNoiseBandwidthState', stBoolNoiseBandwidthState)
_module_typeBindings.stBoolNoiseBandwidthState = stBoolNoiseBandwidthState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPalmerExitCondition
class stBoolPalmerExitCondition (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPalmerExitCondition')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4664, 2)
    _Documentation = ''
stBoolPalmerExitCondition._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPalmerExitCondition', stBoolPalmerExitCondition)
_module_typeBindings.stBoolPalmerExitCondition = stBoolPalmerExitCondition

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPalmerFrequencyTrigger
class stBoolPalmerFrequencyTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPalmerFrequencyTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4673, 2)
    _Documentation = ''
stBoolPalmerFrequencyTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPalmerFrequencyTrigger', stBoolPalmerFrequencyTrigger)
_module_typeBindings.stBoolPalmerFrequencyTrigger = stBoolPalmerFrequencyTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPalmerPriTrigger
class stBoolPalmerPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPalmerPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4682, 2)
    _Documentation = ''
stBoolPalmerPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPalmerPriTrigger', stBoolPalmerPriTrigger)
_module_typeBindings.stBoolPalmerPriTrigger = stBoolPalmerPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPalmerPulseTrigger
class stBoolPalmerPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPalmerPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4691, 2)
    _Documentation = ''
stBoolPalmerPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPalmerPulseTrigger', stBoolPalmerPulseTrigger)
_module_typeBindings.stBoolPalmerPulseTrigger = stBoolPalmerPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPalmerStatus
class stBoolPalmerStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPalmerStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4700, 2)
    _Documentation = ''
stBoolPalmerStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPalmerStatus', stBoolPalmerStatus)
_module_typeBindings.stBoolPalmerStatus = stBoolPalmerStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPgpDefaultMode
class stBoolPgpDefaultMode (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPgpDefaultMode')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4709, 2)
    _Documentation = ''
stBoolPgpDefaultMode._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPgpDefaultMode', stBoolPgpDefaultMode)
_module_typeBindings.stBoolPgpDefaultMode = stBoolPgpDefaultMode

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPgpDropTrackMode
class stBoolPgpDropTrackMode (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPgpDropTrackMode')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4718, 2)
    _Documentation = ''
stBoolPgpDropTrackMode._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPgpDropTrackMode', stBoolPgpDropTrackMode)
_module_typeBindings.stBoolPgpDropTrackMode = stBoolPgpDropTrackMode

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPooledStatus
class stBoolPooledStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPooledStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4727, 2)
    _Documentation = ''
stBoolPooledStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPooledStatus', stBoolPooledStatus)
_module_typeBindings.stBoolPooledStatus = stBoolPooledStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPriTestPoint
class stBoolPriTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPriTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4736, 2)
    _Documentation = ''
stBoolPriTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPriTestPoint', stBoolPriTestPoint)
_module_typeBindings.stBoolPriTestPoint = stBoolPriTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPriTestPoint2
class stBoolPriTestPoint2 (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPriTestPoint2')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4745, 2)
    _Documentation = ''
stBoolPriTestPoint2._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPriTestPoint2', stBoolPriTestPoint2)
_module_typeBindings.stBoolPriTestPoint2 = stBoolPriTestPoint2

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPriTestPoint3
class stBoolPriTestPoint3 (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPriTestPoint3')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4754, 2)
    _Documentation = ''
stBoolPriTestPoint3._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPriTestPoint3', stBoolPriTestPoint3)
_module_typeBindings.stBoolPriTestPoint3 = stBoolPriTestPoint3

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPriTestPoint4
class stBoolPriTestPoint4 (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPriTestPoint4')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4763, 2)
    _Documentation = ''
stBoolPriTestPoint4._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPriTestPoint4', stBoolPriTestPoint4)
_module_typeBindings.stBoolPriTestPoint4 = stBoolPriTestPoint4

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPriTrigger
class stBoolPriTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPriTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4772, 2)
    _Documentation = ''
stBoolPriTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPriTrigger', stBoolPriTrigger)
_module_typeBindings.stBoolPriTrigger = stBoolPriTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPulseGroupState
class stBoolPulseGroupState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPulseGroupState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4781, 2)
    _Documentation = ''
stBoolPulseGroupState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPulseGroupState', stBoolPulseGroupState)
_module_typeBindings.stBoolPulseGroupState = stBoolPulseGroupState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPulseInvisibleState
class stBoolPulseInvisibleState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPulseInvisibleState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4790, 2)
    _Documentation = ''
stBoolPulseInvisibleState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPulseInvisibleState', stBoolPulseInvisibleState)
_module_typeBindings.stBoolPulseInvisibleState = stBoolPulseInvisibleState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPulseTrigger
class stBoolPulseTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPulseTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4799, 2)
    _Documentation = ''
stBoolPulseTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPulseTrigger', stBoolPulseTrigger)
_module_typeBindings.stBoolPulseTrigger = stBoolPulseTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRasterFlybackStatus
class stBoolRasterFlybackStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRasterFlybackStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4808, 2)
    _Documentation = ''
stBoolRasterFlybackStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRasterFlybackStatus', stBoolRasterFlybackStatus)
_module_typeBindings.stBoolRasterFlybackStatus = stBoolRasterFlybackStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRfBlanking
class stBoolRfBlanking (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRfBlanking')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4817, 2)
    _Documentation = ''
stBoolRfBlanking._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRfBlanking', stBoolRfBlanking)
_module_typeBindings.stBoolRfBlanking = stBoolRfBlanking

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRfBlankingVideoTestPoint
class stBoolRfBlankingVideoTestPoint (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRfBlankingVideoTestPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4826, 2)
    _Documentation = ''
stBoolRfBlankingVideoTestPoint._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRfBlankingVideoTestPoint', stBoolRfBlankingVideoTestPoint)
_module_typeBindings.stBoolRfBlankingVideoTestPoint = stBoolRfBlankingVideoTestPoint

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolScanBlanking
class stBoolScanBlanking (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolScanBlanking')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4835, 2)
    _Documentation = ''
stBoolScanBlanking._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolScanBlanking', stBoolScanBlanking)
_module_typeBindings.stBoolScanBlanking = stBoolScanBlanking

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolScanTrigger
class stBoolScanTrigger (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolScanTrigger')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4844, 2)
    _Documentation = ''
stBoolScanTrigger._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolScanTrigger', stBoolScanTrigger)
_module_typeBindings.stBoolScanTrigger = stBoolScanTrigger

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSecDtJitterStatus
class stBoolSecDtJitterStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSecDtJitterStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4853, 2)
    _Documentation = ''
stBoolSecDtJitterStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSecDtJitterStatus', stBoolSecDtJitterStatus)
_module_typeBindings.stBoolSecDtJitterStatus = stBoolSecDtJitterStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSecDtModStatus
class stBoolSecDtModStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSecDtModStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4862, 2)
    _Documentation = ''
stBoolSecDtModStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSecDtModStatus', stBoolSecDtModStatus)
_module_typeBindings.stBoolSecDtModStatus = stBoolSecDtModStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSecJitterStatus
class stBoolSecJitterStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSecJitterStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4871, 2)
    _Documentation = ''
stBoolSecJitterStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSecJitterStatus', stBoolSecJitterStatus)
_module_typeBindings.stBoolSecJitterStatus = stBoolSecJitterStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSecModStatus
class stBoolSecModStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSecModStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4880, 2)
    _Documentation = ''
stBoolSecModStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSecModStatus', stBoolSecModStatus)
_module_typeBindings.stBoolSecModStatus = stBoolSecModStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSensitivityOverride
class stBoolSensitivityOverride (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSensitivityOverride')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4889, 2)
    _Documentation = ''
stBoolSensitivityOverride._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSensitivityOverride', stBoolSensitivityOverride)
_module_typeBindings.stBoolSensitivityOverride = stBoolSensitivityOverride

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSlowRiseTimeStatus
class stBoolSlowRiseTimeStatus (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSlowRiseTimeStatus')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4898, 2)
    _Documentation = ''
stBoolSlowRiseTimeStatus._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSlowRiseTimeStatus', stBoolSlowRiseTimeStatus)
_module_typeBindings.stBoolSlowRiseTimeStatus = stBoolSlowRiseTimeStatus

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSwitchDelayState
class stBoolSwitchDelayState (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSwitchDelayState')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4907, 2)
    _Documentation = ''
stBoolSwitchDelayState._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSwitchDelayState', stBoolSwitchDelayState)
_module_typeBindings.stBoolSwitchDelayState = stBoolSwitchDelayState

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolTerminalSegment
class stBoolTerminalSegment (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolTerminalSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4916, 2)
    _Documentation = ''
stBoolTerminalSegment._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolTerminalSegment', stBoolTerminalSegment)
_module_typeBindings.stBoolTerminalSegment = stBoolTerminalSegment

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stUnsignedLongExternalIqNumberOfSamples
class stUnsignedLongExternalIqNumberOfSamples (pyxb.binding.datatypes.unsignedLong):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stUnsignedLongExternalIqNumberOfSamples')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 4925, 2)
    _Documentation = ''
stUnsignedLongExternalIqNumberOfSamples._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stUnsignedLongExternalIqNumberOfSamples', stUnsignedLongExternalIqNumberOfSamples)
_module_typeBindings.stUnsignedLongExternalIqNumberOfSamples = stUnsignedLongExternalIqNumberOfSamples

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleActivationTime
class stDoubleActivationTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleActivationTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 57, 2)
    _Documentation = ''
stDoubleActivationTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleActivationTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleActivationTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleActivationTime, value=pyxb.binding.datatypes.double(137438.953471))
stDoubleActivationTime._InitializeFacetMap(stDoubleActivationTime._CF_minInclusive,
   stDoubleActivationTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleActivationTime', stDoubleActivationTime)
_module_typeBindings.stDoubleActivationTime = stDoubleActivationTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSpeedUnits
class stEnumSpeedUnits (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSpeedUnits')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 69, 2)
    _Documentation = ''
stEnumSpeedUnits._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSpeedUnits, enum_prefix=None)
stEnumSpeedUnits.Ft_Per_Sec = stEnumSpeedUnits._CF_enumeration.addEnumeration(unicode_value='Ft_Per_Sec', tag='Ft_Per_Sec')
stEnumSpeedUnits.Km_Per_Hr = stEnumSpeedUnits._CF_enumeration.addEnumeration(unicode_value='Km_Per_Hr', tag='Km_Per_Hr')
stEnumSpeedUnits.Kt = stEnumSpeedUnits._CF_enumeration.addEnumeration(unicode_value='Kt', tag='Kt')
stEnumSpeedUnits.M_Per_Sec = stEnumSpeedUnits._CF_enumeration.addEnumeration(unicode_value='M_Per_Sec', tag='M_Per_Sec')
stEnumSpeedUnits.Miles_Per_Hour = stEnumSpeedUnits._CF_enumeration.addEnumeration(unicode_value='Miles_Per_Hour', tag='Miles_Per_Hour')
stEnumSpeedUnits._InitializeFacetMap(stEnumSpeedUnits._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSpeedUnits', stEnumSpeedUnits)
_module_typeBindings.stEnumSpeedUnits = stEnumSpeedUnits

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringPlatformId
class stStringPlatformId (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringPlatformId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 84, 2)
    _Documentation = ''
stStringPlatformId._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringPlatformId._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(12))
stStringPlatformId._InitializeFacetMap(stStringPlatformId._CF_minLength,
   stStringPlatformId._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringPlatformId', stStringPlatformId)
_module_typeBindings.stStringPlatformId = stStringPlatformId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextSymbolKind
class stTextSymbolKind (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextSymbolKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 96, 2)
    _Documentation = ''
stTextSymbolKind._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextSymbolKind', stTextSymbolKind)
_module_typeBindings.stTextSymbolKind = stTextSymbolKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolCoupledMotionEnable
class stBoolCoupledMotionEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolCoupledMotionEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 193, 2)
    _Documentation = ''
stBoolCoupledMotionEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolCoupledMotionEnable', stBoolCoupledMotionEnable)
_module_typeBindings.stBoolCoupledMotionEnable = stBoolCoupledMotionEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDeactivate
class stBoolDeactivate (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDeactivate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 202, 2)
    _Documentation = ''
stBoolDeactivate._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDeactivate', stBoolDeactivate)
_module_typeBindings.stBoolDeactivate = stBoolDeactivate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolFirstSegmentOnPath
class stBoolFirstSegmentOnPath (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolFirstSegmentOnPath')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 211, 2)
    _Documentation = ''
stBoolFirstSegmentOnPath._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolFirstSegmentOnPath', stBoolFirstSegmentOnPath)
_module_typeBindings.stBoolFirstSegmentOnPath = stBoolFirstSegmentOnPath

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolLimitDurationFlag
class stBoolLimitDurationFlag (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolLimitDurationFlag')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 220, 2)
    _Documentation = ''
stBoolLimitDurationFlag._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolLimitDurationFlag', stBoolLimitDurationFlag)
_module_typeBindings.stBoolLimitDurationFlag = stBoolLimitDurationFlag

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolTargetSutFlag
class stBoolTargetSutFlag (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolTargetSutFlag')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 229, 2)
    _Documentation = ''
stBoolTargetSutFlag._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolTargetSutFlag', stBoolTargetSutFlag)
_module_typeBindings.stBoolTargetSutFlag = stBoolTargetSutFlag

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleBankAngle
class stDoubleBankAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleBankAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 238, 2)
    _Documentation = ''
stDoubleBankAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleBankAngle, value=pyxb.binding.datatypes.double(-90.0))
stDoubleBankAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleBankAngle, value=pyxb.binding.datatypes.double(90.0))
stDoubleBankAngle._InitializeFacetMap(stDoubleBankAngle._CF_minInclusive,
   stDoubleBankAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleBankAngle', stDoubleBankAngle)
_module_typeBindings.stDoubleBankAngle = stDoubleBankAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleClimbAngle
class stDoubleClimbAngle (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleClimbAngle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 250, 2)
    _Documentation = ''
stDoubleClimbAngle._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleClimbAngle, value=pyxb.binding.datatypes.double(-90.0))
stDoubleClimbAngle._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleClimbAngle, value=pyxb.binding.datatypes.double(90.0))
stDoubleClimbAngle._InitializeFacetMap(stDoubleClimbAngle._CF_minInclusive,
   stDoubleClimbAngle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleClimbAngle', stDoubleClimbAngle)
_module_typeBindings.stDoubleClimbAngle = stDoubleClimbAngle

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDuration
class stDoubleDuration (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDuration')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 262, 2)
    _Documentation = ''
stDoubleDuration._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDuration, value=pyxb.binding.datatypes.double(2.0))
stDoubleDuration._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDuration, value=pyxb.binding.datatypes.double(3600.0))
stDoubleDuration._InitializeFacetMap(stDoubleDuration._CF_minInclusive,
   stDoubleDuration._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDuration', stDoubleDuration)
_module_typeBindings.stDoubleDuration = stDoubleDuration

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndPitch
class stDoubleEndPitch (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndPitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 274, 2)
    _Documentation = ''
stDoubleEndPitch._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndPitch, value=pyxb.binding.datatypes.double(-180.0))
stDoubleEndPitch._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndPitch, value=pyxb.binding.datatypes.double(180.0))
stDoubleEndPitch._InitializeFacetMap(stDoubleEndPitch._CF_minInclusive,
   stDoubleEndPitch._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndPitch', stDoubleEndPitch)
_module_typeBindings.stDoubleEndPitch = stDoubleEndPitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndPitchRate
class stDoubleEndPitchRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndPitchRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 286, 2)
    _Documentation = ''
stDoubleEndPitchRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndPitchRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoubleEndPitchRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndPitchRate, value=pyxb.binding.datatypes.double(1000.0))
stDoubleEndPitchRate._InitializeFacetMap(stDoubleEndPitchRate._CF_minInclusive,
   stDoubleEndPitchRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndPitchRate', stDoubleEndPitchRate)
_module_typeBindings.stDoubleEndPitchRate = stDoubleEndPitchRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndRoll
class stDoubleEndRoll (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndRoll')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 298, 2)
    _Documentation = ''
stDoubleEndRoll._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndRoll, value=pyxb.binding.datatypes.double(-180.0))
stDoubleEndRoll._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndRoll, value=pyxb.binding.datatypes.double(180.0))
stDoubleEndRoll._InitializeFacetMap(stDoubleEndRoll._CF_minInclusive,
   stDoubleEndRoll._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndRoll', stDoubleEndRoll)
_module_typeBindings.stDoubleEndRoll = stDoubleEndRoll

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndRollRate
class stDoubleEndRollRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndRollRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 310, 2)
    _Documentation = ''
stDoubleEndRollRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndRollRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoubleEndRollRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndRollRate, value=pyxb.binding.datatypes.double(1000.0))
stDoubleEndRollRate._InitializeFacetMap(stDoubleEndRollRate._CF_minInclusive,
   stDoubleEndRollRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndRollRate', stDoubleEndRollRate)
_module_typeBindings.stDoubleEndRollRate = stDoubleEndRollRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndSpeed
class stDoubleEndSpeed (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndSpeed')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 322, 2)
    _Documentation = ''
stDoubleEndSpeed._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndSpeed, value=pyxb.binding.datatypes.double(0.0))
stDoubleEndSpeed._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndSpeed, value=pyxb.binding.datatypes.double(2777.77777777778))
stDoubleEndSpeed._InitializeFacetMap(stDoubleEndSpeed._CF_minInclusive,
   stDoubleEndSpeed._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndSpeed', stDoubleEndSpeed)
_module_typeBindings.stDoubleEndSpeed = stDoubleEndSpeed

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndYaw
class stDoubleEndYaw (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndYaw')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 334, 2)
    _Documentation = ''
stDoubleEndYaw._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndYaw, value=pyxb.binding.datatypes.double(-180.0))
stDoubleEndYaw._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndYaw, value=pyxb.binding.datatypes.double(180.0))
stDoubleEndYaw._InitializeFacetMap(stDoubleEndYaw._CF_minInclusive,
   stDoubleEndYaw._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndYaw', stDoubleEndYaw)
_module_typeBindings.stDoubleEndYaw = stDoubleEndYaw

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEndYawRate
class stDoubleEndYawRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEndYawRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 346, 2)
    _Documentation = ''
stDoubleEndYawRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEndYawRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoubleEndYawRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEndYawRate, value=pyxb.binding.datatypes.double(1000.0))
stDoubleEndYawRate._InitializeFacetMap(stDoubleEndYawRate._CF_minInclusive,
   stDoubleEndYawRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEndYawRate', stDoubleEndYawRate)
_module_typeBindings.stDoubleEndYawRate = stDoubleEndYawRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleHeading
class stDoubleHeading (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleHeading')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 358, 2)
    _Documentation = ''
stDoubleHeading._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleHeading, value=pyxb.binding.datatypes.double(-180.0))
stDoubleHeading._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleHeading, value=pyxb.binding.datatypes.double(180.0))
stDoubleHeading._InitializeFacetMap(stDoubleHeading._CF_minInclusive,
   stDoubleHeading._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleHeading', stDoubleHeading)
_module_typeBindings.stDoubleHeading = stDoubleHeading

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLoadFactor
class stDoubleLoadFactor (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLoadFactor')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 370, 2)
    _Documentation = ''
stDoubleLoadFactor._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLoadFactor, value=pyxb.binding.datatypes.double(0.0))
stDoubleLoadFactor._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLoadFactor, value=pyxb.binding.datatypes.double(100.0))
stDoubleLoadFactor._InitializeFacetMap(stDoubleLoadFactor._CF_minInclusive,
   stDoubleLoadFactor._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLoadFactor', stDoubleLoadFactor)
_module_typeBindings.stDoubleLoadFactor = stDoubleLoadFactor

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoublePitchRate
class stDoublePitchRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoublePitchRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 382, 2)
    _Documentation = ''
stDoublePitchRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoublePitchRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoublePitchRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoublePitchRate, value=pyxb.binding.datatypes.double(1000.0))
stDoublePitchRate._InitializeFacetMap(stDoublePitchRate._CF_minInclusive,
   stDoublePitchRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoublePitchRate', stDoublePitchRate)
_module_typeBindings.stDoublePitchRate = stDoublePitchRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleRange
class stDoubleRange (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleRange')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 394, 2)
    _Documentation = ''
stDoubleRange._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleRange, value=pyxb.binding.datatypes.double(10.0))
stDoubleRange._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleRange, value=pyxb.binding.datatypes.double(20000.0))
stDoubleRange._InitializeFacetMap(stDoubleRange._CF_minInclusive,
   stDoubleRange._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleRange', stDoubleRange)
_module_typeBindings.stDoubleRange = stDoubleRange

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleRollRate
class stDoubleRollRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleRollRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 406, 2)
    _Documentation = ''
stDoubleRollRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleRollRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoubleRollRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleRollRate, value=pyxb.binding.datatypes.double(1000.0))
stDoubleRollRate._InitializeFacetMap(stDoubleRollRate._CF_minInclusive,
   stDoubleRollRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleRollRate', stDoubleRollRate)
_module_typeBindings.stDoubleRollRate = stDoubleRollRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSpeed
class stDoubleSpeed (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSpeed')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 418, 2)
    _Documentation = ''
stDoubleSpeed._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSpeed, value=pyxb.binding.datatypes.double(0.277777))
stDoubleSpeed._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSpeed, value=pyxb.binding.datatypes.double(2777.777777))
stDoubleSpeed._InitializeFacetMap(stDoubleSpeed._CF_minInclusive,
   stDoubleSpeed._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSpeed', stDoubleSpeed)
_module_typeBindings.stDoubleSpeed = stDoubleSpeed

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStartPitch
class stDoubleStartPitch (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStartPitch')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 430, 2)
    _Documentation = ''
stDoubleStartPitch._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStartPitch, value=pyxb.binding.datatypes.double(-180.0))
stDoubleStartPitch._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStartPitch, value=pyxb.binding.datatypes.double(180.0))
stDoubleStartPitch._InitializeFacetMap(stDoubleStartPitch._CF_minInclusive,
   stDoubleStartPitch._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStartPitch', stDoubleStartPitch)
_module_typeBindings.stDoubleStartPitch = stDoubleStartPitch

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStartRoll
class stDoubleStartRoll (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStartRoll')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 442, 2)
    _Documentation = ''
stDoubleStartRoll._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStartRoll, value=pyxb.binding.datatypes.double(-180.0))
stDoubleStartRoll._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStartRoll, value=pyxb.binding.datatypes.double(180.0))
stDoubleStartRoll._InitializeFacetMap(stDoubleStartRoll._CF_minInclusive,
   stDoubleStartRoll._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStartRoll', stDoubleStartRoll)
_module_typeBindings.stDoubleStartRoll = stDoubleStartRoll

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStartSpeed
class stDoubleStartSpeed (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStartSpeed')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 454, 2)
    _Documentation = ''
stDoubleStartSpeed._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStartSpeed, value=pyxb.binding.datatypes.double(0.0))
stDoubleStartSpeed._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStartSpeed, value=pyxb.binding.datatypes.double(2777.77777777778))
stDoubleStartSpeed._InitializeFacetMap(stDoubleStartSpeed._CF_minInclusive,
   stDoubleStartSpeed._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStartSpeed', stDoubleStartSpeed)
_module_typeBindings.stDoubleStartSpeed = stDoubleStartSpeed

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStartTime
class stDoubleStartTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStartTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 466, 2)
    _Documentation = ''
stDoubleStartTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStartTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleStartTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStartTime, value=pyxb.binding.datatypes.double(86400.0))
stDoubleStartTime._InitializeFacetMap(stDoubleStartTime._CF_minInclusive,
   stDoubleStartTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStartTime', stDoubleStartTime)
_module_typeBindings.stDoubleStartTime = stDoubleStartTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleStartYaw
class stDoubleStartYaw (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleStartYaw')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 478, 2)
    _Documentation = ''
stDoubleStartYaw._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleStartYaw, value=pyxb.binding.datatypes.double(-180.0))
stDoubleStartYaw._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleStartYaw, value=pyxb.binding.datatypes.double(180.0))
stDoubleStartYaw._InitializeFacetMap(stDoubleStartYaw._CF_minInclusive,
   stDoubleStartYaw._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleStartYaw', stDoubleStartYaw)
_module_typeBindings.stDoubleStartYaw = stDoubleStartYaw

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleYawRate
class stDoubleYawRate (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleYawRate')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 490, 2)
    _Documentation = ''
stDoubleYawRate._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleYawRate, value=pyxb.binding.datatypes.double(-1000.0))
stDoubleYawRate._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleYawRate, value=pyxb.binding.datatypes.double(1000.0))
stDoubleYawRate._InitializeFacetMap(stDoubleYawRate._CF_minInclusive,
   stDoubleYawRate._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleYawRate', stDoubleYawRate)
_module_typeBindings.stDoubleYawRate = stDoubleYawRate

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumAltitudeKind
class stEnumAltitudeKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumAltitudeKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 502, 2)
    _Documentation = ''
stEnumAltitudeKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumAltitudeKind, enum_prefix=None)
stEnumAltitudeKind.Km_Above_Sea_Level = stEnumAltitudeKind._CF_enumeration.addEnumeration(unicode_value='Km_Above_Sea_Level', tag='Km_Above_Sea_Level')
stEnumAltitudeKind.Km_Above_Terrain = stEnumAltitudeKind._CF_enumeration.addEnumeration(unicode_value='Km_Above_Terrain', tag='Km_Above_Terrain')
stEnumAltitudeKind._InitializeFacetMap(stEnumAltitudeKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumAltitudeKind', stEnumAltitudeKind)
_module_typeBindings.stEnumAltitudeKind = stEnumAltitudeKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumEndActionKind
class stEnumEndActionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumEndActionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 514, 2)
    _Documentation = ''
stEnumEndActionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumEndActionKind, enum_prefix=None)
stEnumEndActionKind.Continue_In_Final_Direction = stEnumEndActionKind._CF_enumeration.addEnumeration(unicode_value='Continue_In_Final_Direction', tag='Continue_In_Final_Direction')
stEnumEndActionKind.Stop = stEnumEndActionKind._CF_enumeration.addEnumeration(unicode_value='Stop', tag='Stop')
stEnumEndActionKind.Deactivate = stEnumEndActionKind._CF_enumeration.addEnumeration(unicode_value='Deactivate', tag='Deactivate')
stEnumEndActionKind._InitializeFacetMap(stEnumEndActionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumEndActionKind', stEnumEndActionKind)
_module_typeBindings.stEnumEndActionKind = stEnumEndActionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumInterceptKind
class stEnumInterceptKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumInterceptKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 527, 2)
    _Documentation = ''
stEnumInterceptKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumInterceptKind, enum_prefix=None)
stEnumInterceptKind.Constant_Speed = stEnumInterceptKind._CF_enumeration.addEnumeration(unicode_value='Constant_Speed', tag='Constant_Speed')
stEnumInterceptKind.Time_Based = stEnumInterceptKind._CF_enumeration.addEnumeration(unicode_value='Time_Based', tag='Time_Based')
stEnumInterceptKind._InitializeFacetMap(stEnumInterceptKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumInterceptKind', stEnumInterceptKind)
_module_typeBindings.stEnumInterceptKind = stEnumInterceptKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPitchKind
class stEnumPitchKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPitchKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 539, 2)
    _Documentation = ''
stEnumPitchKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPitchKind, enum_prefix=None)
stEnumPitchKind.Absolute = stEnumPitchKind._CF_enumeration.addEnumeration(unicode_value='Absolute', tag='Absolute')
stEnumPitchKind.Relative = stEnumPitchKind._CF_enumeration.addEnumeration(unicode_value='Relative', tag='Relative')
stEnumPitchKind._InitializeFacetMap(stEnumPitchKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPitchKind', stEnumPitchKind)
_module_typeBindings.stEnumPitchKind = stEnumPitchKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumTurnKind
class stEnumTurnKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumTurnKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 551, 2)
    _Documentation = ''
stEnumTurnKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumTurnKind, enum_prefix=None)
stEnumTurnKind.Load_Factor = stEnumTurnKind._CF_enumeration.addEnumeration(unicode_value='Load_Factor', tag='Load_Factor')
stEnumTurnKind.Radius = stEnumTurnKind._CF_enumeration.addEnumeration(unicode_value='Radius', tag='Radius')
stEnumTurnKind._InitializeFacetMap(stEnumTurnKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumTurnKind', stEnumTurnKind)
_module_typeBindings.stEnumTurnKind = stEnumTurnKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntTargetPlatformNumber
class stIntTargetPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntTargetPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 563, 2)
    _Documentation = ''
stIntTargetPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntTargetPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntTargetPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntTargetPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntTargetPlatformNumber._InitializeFacetMap(stIntTargetPlatformNumber._CF_minInclusive,
   stIntTargetPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntTargetPlatformNumber', stIntTargetPlatformNumber)
_module_typeBindings.stIntTargetPlatformNumber = stIntTargetPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolAtmosphericAbsorptionAttenuationEnable
class stBoolAtmosphericAbsorptionAttenuationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolAtmosphericAbsorptionAttenuationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 386, 2)
    _Documentation = ''
stBoolAtmosphericAbsorptionAttenuationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolAtmosphericAbsorptionAttenuationEnable', stBoolAtmosphericAbsorptionAttenuationEnable)
_module_typeBindings.stBoolAtmosphericAbsorptionAttenuationEnable = stBoolAtmosphericAbsorptionAttenuationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolCircularBufferCollection
class stBoolCircularBufferCollection (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolCircularBufferCollection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 395, 2)
    _Documentation = ''
stBoolCircularBufferCollection._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolCircularBufferCollection', stBoolCircularBufferCollection)
_module_typeBindings.stBoolCircularBufferCollection = stBoolCircularBufferCollection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolCwInterruptEnable
class stBoolCwInterruptEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolCwInterruptEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 404, 2)
    _Documentation = ''
stBoolCwInterruptEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolCwInterruptEnable', stBoolCwInterruptEnable)
_module_typeBindings.stBoolCwInterruptEnable = stBoolCwInterruptEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDataRecordingEnable
class stBoolDataRecordingEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDataRecordingEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 413, 2)
    _Documentation = ''
stBoolDataRecordingEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDataRecordingEnable', stBoolDataRecordingEnable)
_module_typeBindings.stBoolDataRecordingEnable = stBoolDataRecordingEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayBarriers
class stBoolDisplayBarriers (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayBarriers')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 422, 2)
    _Documentation = ''
stBoolDisplayBarriers._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayBarriers', stBoolDisplayBarriers)
_module_typeBindings.stBoolDisplayBarriers = stBoolDisplayBarriers

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayCanals
class stBoolDisplayCanals (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayCanals')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 431, 2)
    _Documentation = ''
stBoolDisplayCanals._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayCanals', stBoolDisplayCanals)
_module_typeBindings.stBoolDisplayCanals = stBoolDisplayCanals

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayCoastline
class stBoolDisplayCoastline (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayCoastline')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 440, 2)
    _Documentation = ''
stBoolDisplayCoastline._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayCoastline', stBoolDisplayCoastline)
_module_typeBindings.stBoolDisplayCoastline = stBoolDisplayCoastline

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayDepthLines
class stBoolDisplayDepthLines (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayDepthLines')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 449, 2)
    _Documentation = ''
stBoolDisplayDepthLines._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayDepthLines', stBoolDisplayDepthLines)
_module_typeBindings.stBoolDisplayDepthLines = stBoolDisplayDepthLines

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayGeopolitical
class stBoolDisplayGeopolitical (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayGeopolitical')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 458, 2)
    _Documentation = ''
stBoolDisplayGeopolitical._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayGeopolitical', stBoolDisplayGeopolitical)
_module_typeBindings.stBoolDisplayGeopolitical = stBoolDisplayGeopolitical

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayGrids
class stBoolDisplayGrids (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayGrids')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 467, 2)
    _Documentation = ''
stBoolDisplayGrids._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayGrids', stBoolDisplayGrids)
_module_typeBindings.stBoolDisplayGrids = stBoolDisplayGrids

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayHud
class stBoolDisplayHud (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayHud')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 476, 2)
    _Documentation = ''
stBoolDisplayHud._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayHud', stBoolDisplayHud)
_module_typeBindings.stBoolDisplayHud = stBoolDisplayHud

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayInactivePlatforms
class stBoolDisplayInactivePlatforms (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayInactivePlatforms')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 485, 2)
    _Documentation = ''
stBoolDisplayInactivePlatforms._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayInactivePlatforms', stBoolDisplayInactivePlatforms)
_module_typeBindings.stBoolDisplayInactivePlatforms = stBoolDisplayInactivePlatforms

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayLandforms
class stBoolDisplayLandforms (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayLandforms')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 494, 2)
    _Documentation = ''
stBoolDisplayLandforms._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayLandforms', stBoolDisplayLandforms)
_module_typeBindings.stBoolDisplayLandforms = stBoolDisplayLandforms

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPipelines
class stBoolDisplayPipelines (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPipelines')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 503, 2)
    _Documentation = ''
stBoolDisplayPipelines._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPipelines', stBoolDisplayPipelines)
_module_typeBindings.stBoolDisplayPipelines = stBoolDisplayPipelines

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPoliticalLines
class stBoolDisplayPoliticalLines (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPoliticalLines')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 512, 2)
    _Documentation = ''
stBoolDisplayPoliticalLines._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPoliticalLines', stBoolDisplayPoliticalLines)
_module_typeBindings.stBoolDisplayPoliticalLines = stBoolDisplayPoliticalLines

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPath
class stBoolDisplayPath (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPath')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 521, 2)
    _Documentation = ''
stBoolDisplayPath._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPath', stBoolDisplayPath)
_module_typeBindings.stBoolDisplayPath = stBoolDisplayPath

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPathHistory
class stBoolDisplayPathHistory (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPathHistory')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 530, 2)
    _Documentation = ''
stBoolDisplayPathHistory._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPathHistory', stBoolDisplayPathHistory)
_module_typeBindings.stBoolDisplayPathHistory = stBoolDisplayPathHistory

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPlatform
class stBoolDisplayPlatform (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPlatform')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 539, 2)
    _Documentation = ''
stBoolDisplayPlatform._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPlatform', stBoolDisplayPlatform)
_module_typeBindings.stBoolDisplayPlatform = stBoolDisplayPlatform

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayPlatformDetails
class stBoolDisplayPlatformDetails (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayPlatformDetails')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 548, 2)
    _Documentation = ''
stBoolDisplayPlatformDetails._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayPlatformDetails', stBoolDisplayPlatformDetails)
_module_typeBindings.stBoolDisplayPlatformDetails = stBoolDisplayPlatformDetails

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayProjectedPath
class stBoolDisplayProjectedPath (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayProjectedPath')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 557, 2)
    _Documentation = ''
stBoolDisplayProjectedPath._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayProjectedPath', stBoolDisplayProjectedPath)
_module_typeBindings.stBoolDisplayProjectedPath = stBoolDisplayProjectedPath

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayRailroads
class stBoolDisplayRailroads (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayRailroads')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 566, 2)
    _Documentation = ''
stBoolDisplayRailroads._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayRailroads', stBoolDisplayRailroads)
_module_typeBindings.stBoolDisplayRailroads = stBoolDisplayRailroads

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayRoads
class stBoolDisplayRoads (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayRoads')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 575, 2)
    _Documentation = ''
stBoolDisplayRoads._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayRoads', stBoolDisplayRoads)
_module_typeBindings.stBoolDisplayRoads = stBoolDisplayRoads

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayRoughness
class stBoolDisplayRoughness (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayRoughness')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 584, 2)
    _Documentation = ''
stBoolDisplayRoughness._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayRoughness', stBoolDisplayRoughness)
_module_typeBindings.stBoolDisplayRoughness = stBoolDisplayRoughness

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayRoughnessLegend
class stBoolDisplayRoughnessLegend (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayRoughnessLegend')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 593, 2)
    _Documentation = ''
stBoolDisplayRoughnessLegend._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayRoughnessLegend', stBoolDisplayRoughnessLegend)
_module_typeBindings.stBoolDisplayRoughnessLegend = stBoolDisplayRoughnessLegend

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayStructures
class stBoolDisplayStructures (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayStructures')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 602, 2)
    _Documentation = ''
stBoolDisplayStructures._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayStructures', stBoolDisplayStructures)
_module_typeBindings.stBoolDisplayStructures = stBoolDisplayStructures

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplaySymbol
class stBoolDisplaySymbol (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplaySymbol')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 611, 2)
    _Documentation = ''
stBoolDisplaySymbol._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplaySymbol', stBoolDisplaySymbol)
_module_typeBindings.stBoolDisplaySymbol = stBoolDisplaySymbol

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplaySymbolLegend
class stBoolDisplaySymbolLegend (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplaySymbolLegend')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 620, 2)
    _Documentation = ''
stBoolDisplaySymbolLegend._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplaySymbolLegend', stBoolDisplaySymbolLegend)
_module_typeBindings.stBoolDisplaySymbolLegend = stBoolDisplaySymbolLegend

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayTerrain
class stBoolDisplayTerrain (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayTerrain')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 629, 2)
    _Documentation = ''
stBoolDisplayTerrain._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayTerrain', stBoolDisplayTerrain)
_module_typeBindings.stBoolDisplayTerrain = stBoolDisplayTerrain

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayTerrainLegend
class stBoolDisplayTerrainLegend (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayTerrainLegend')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 638, 2)
    _Documentation = ''
stBoolDisplayTerrainLegend._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayTerrainLegend', stBoolDisplayTerrainLegend)
_module_typeBindings.stBoolDisplayTerrainLegend = stBoolDisplayTerrainLegend

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayTrails
class stBoolDisplayTrails (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayTrails')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 647, 2)
    _Documentation = ''
stBoolDisplayTrails._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayTrails', stBoolDisplayTrails)
_module_typeBindings.stBoolDisplayTrails = stBoolDisplayTrails

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayUtilities
class stBoolDisplayUtilities (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayUtilities')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 656, 2)
    _Documentation = ''
stBoolDisplayUtilities._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayUtilities', stBoolDisplayUtilities)
_module_typeBindings.stBoolDisplayUtilities = stBoolDisplayUtilities

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayVisibility
class stBoolDisplayVisibility (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayVisibility')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 665, 2)
    _Documentation = ''
stBoolDisplayVisibility._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayVisibility', stBoolDisplayVisibility)
_module_typeBindings.stBoolDisplayVisibility = stBoolDisplayVisibility

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayVmapLegend
class stBoolDisplayVmapLegend (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayVmapLegend')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 674, 2)
    _Documentation = ''
stBoolDisplayVmapLegend._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayVmapLegend', stBoolDisplayVmapLegend)
_module_typeBindings.stBoolDisplayVmapLegend = stBoolDisplayVmapLegend

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDisplayWaterways
class stBoolDisplayWaterways (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDisplayWaterways')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 683, 2)
    _Documentation = ''
stBoolDisplayWaterways._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDisplayWaterways', stBoolDisplayWaterways)
_module_typeBindings.stBoolDisplayWaterways = stBoolDisplayWaterways

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDpmBoardCollectionEnable
class stBoolDpmBoardCollectionEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDpmBoardCollectionEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 692, 2)
    _Documentation = ''
stBoolDpmBoardCollectionEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDpmBoardCollectionEnable', stBoolDpmBoardCollectionEnable)
_module_typeBindings.stBoolDpmBoardCollectionEnable = stBoolDpmBoardCollectionEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolDuctingEnable
class stBoolDuctingEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolDuctingEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 701, 2)
    _Documentation = ''
stBoolDuctingEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolDuctingEnable', stBoolDuctingEnable)
_module_typeBindings.stBoolDuctingEnable = stBoolDuctingEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolEmitterLibraryEnable
class stBoolEmitterLibraryEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolEmitterLibraryEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 710, 2)
    _Documentation = ''
stBoolEmitterLibraryEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolEmitterLibraryEnable', stBoolEmitterLibraryEnable)
_module_typeBindings.stBoolEmitterLibraryEnable = stBoolEmitterLibraryEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolExternalSutFlag
class stBoolExternalSutFlag (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolExternalSutFlag')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 719, 2)
    _Documentation = ''
stBoolExternalSutFlag._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolExternalSutFlag', stBoolExternalSutFlag)
_module_typeBindings.stBoolExternalSutFlag = stBoolExternalSutFlag

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolFrequencyAttenuationEnable
class stBoolFrequencyAttenuationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolFrequencyAttenuationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 728, 2)
    _Documentation = ''
stBoolFrequencyAttenuationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolFrequencyAttenuationEnable', stBoolFrequencyAttenuationEnable)
_module_typeBindings.stBoolFrequencyAttenuationEnable = stBoolFrequencyAttenuationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolFrequencyDopplerShiftEnable
class stBoolFrequencyDopplerShiftEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolFrequencyDopplerShiftEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 737, 2)
    _Documentation = ''
stBoolFrequencyDopplerShiftEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolFrequencyDopplerShiftEnable', stBoolFrequencyDopplerShiftEnable)
_module_typeBindings.stBoolFrequencyDopplerShiftEnable = stBoolFrequencyDopplerShiftEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolGeotiffEnable
class stBoolGeotiffEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolGeotiffEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 746, 2)
    _Documentation = ''
stBoolGeotiffEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolGeotiffEnable', stBoolGeotiffEnable)
_module_typeBindings.stBoolGeotiffEnable = stBoolGeotiffEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolHorizonMaskingEnable
class stBoolHorizonMaskingEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolHorizonMaskingEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 755, 2)
    _Documentation = ''
stBoolHorizonMaskingEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolHorizonMaskingEnable', stBoolHorizonMaskingEnable)
_module_typeBindings.stBoolHorizonMaskingEnable = stBoolHorizonMaskingEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolInvalidPdwsFlag
class stBoolInvalidPdwsFlag (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolInvalidPdwsFlag')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 764, 2)
    _Documentation = ''
stBoolInvalidPdwsFlag._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolInvalidPdwsFlag', stBoolInvalidPdwsFlag)
_module_typeBindings.stBoolInvalidPdwsFlag = stBoolInvalidPdwsFlag

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolMultipathEnable
class stBoolMultipathEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolMultipathEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 773, 2)
    _Documentation = ''
stBoolMultipathEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolMultipathEnable', stBoolMultipathEnable)
_module_typeBindings.stBoolMultipathEnable = stBoolMultipathEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolNavIfEnable
class stBoolNavIfEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolNavIfEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 782, 2)
    _Documentation = ''
stBoolNavIfEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolNavIfEnable', stBoolNavIfEnable)
_module_typeBindings.stBoolNavIfEnable = stBoolNavIfEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolPulseTruncationEnable
class stBoolPulseTruncationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolPulseTruncationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 791, 2)
    _Documentation = ''
stBoolPulseTruncationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolPulseTruncationEnable', stBoolPulseTruncationEnable)
_module_typeBindings.stBoolPulseTruncationEnable = stBoolPulseTruncationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRangeAndPriDopplerShiftEnable
class stBoolRangeAndPriDopplerShiftEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRangeAndPriDopplerShiftEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 800, 2)
    _Documentation = ''
stBoolRangeAndPriDopplerShiftEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRangeAndPriDopplerShiftEnable', stBoolRangeAndPriDopplerShiftEnable)
_module_typeBindings.stBoolRangeAndPriDopplerShiftEnable = stBoolRangeAndPriDopplerShiftEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRangeAttenuationEnable
class stBoolRangeAttenuationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRangeAttenuationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 809, 2)
    _Documentation = ''
stBoolRangeAttenuationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRangeAttenuationEnable', stBoolRangeAttenuationEnable)
_module_typeBindings.stBoolRangeAttenuationEnable = stBoolRangeAttenuationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRecordEmitterEventsEnable
class stBoolRecordEmitterEventsEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRecordEmitterEventsEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 818, 2)
    _Documentation = ''
stBoolRecordEmitterEventsEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRecordEmitterEventsEnable', stBoolRecordEmitterEventsEnable)
_module_typeBindings.stBoolRecordEmitterEventsEnable = stBoolRecordEmitterEventsEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRecordEmitterStatusEnable
class stBoolRecordEmitterStatusEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRecordEmitterStatusEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 827, 2)
    _Documentation = ''
stBoolRecordEmitterStatusEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRecordEmitterStatusEnable', stBoolRecordEmitterStatusEnable)
_module_typeBindings.stBoolRecordEmitterStatusEnable = stBoolRecordEmitterStatusEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRecordPlatformEventsEnable
class stBoolRecordPlatformEventsEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRecordPlatformEventsEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 836, 2)
    _Documentation = ''
stBoolRecordPlatformEventsEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRecordPlatformEventsEnable', stBoolRecordPlatformEventsEnable)
_module_typeBindings.stBoolRecordPlatformEventsEnable = stBoolRecordPlatformEventsEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRecordPlatformStatusEnable
class stBoolRecordPlatformStatusEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRecordPlatformStatusEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 845, 2)
    _Documentation = ''
stBoolRecordPlatformStatusEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRecordPlatformStatusEnable', stBoolRecordPlatformStatusEnable)
_module_typeBindings.stBoolRecordPlatformStatusEnable = stBoolRecordPlatformStatusEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRecordPulseCountsEnable
class stBoolRecordPulseCountsEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRecordPulseCountsEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 854, 2)
    _Documentation = ''
stBoolRecordPulseCountsEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRecordPulseCountsEnable', stBoolRecordPulseCountsEnable)
_module_typeBindings.stBoolRecordPulseCountsEnable = stBoolRecordPulseCountsEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolRoughnessEnable
class stBoolRoughnessEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolRoughnessEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 863, 2)
    _Documentation = ''
stBoolRoughnessEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolRoughnessEnable', stBoolRoughnessEnable)
_module_typeBindings.stBoolRoughnessEnable = stBoolRoughnessEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolScenarioElementLibraryEnable
class stBoolScenarioElementLibraryEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolScenarioElementLibraryEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 872, 2)
    _Documentation = ''
stBoolScenarioElementLibraryEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolScenarioElementLibraryEnable', stBoolScenarioElementLibraryEnable)
_module_typeBindings.stBoolScenarioElementLibraryEnable = stBoolScenarioElementLibraryEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSensitivityThresholdEnable
class stBoolSensitivityThresholdEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSensitivityThresholdEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 881, 2)
    _Documentation = ''
stBoolSensitivityThresholdEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSensitivityThresholdEnable', stBoolSensitivityThresholdEnable)
_module_typeBindings.stBoolSensitivityThresholdEnable = stBoolSensitivityThresholdEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolSutEmitterEarthReflectionEnable
class stBoolSutEmitterEarthReflectionEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolSutEmitterEarthReflectionEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 890, 2)
    _Documentation = ''
stBoolSutEmitterEarthReflectionEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolSutEmitterEarthReflectionEnable', stBoolSutEmitterEarthReflectionEnable)
_module_typeBindings.stBoolSutEmitterEarthReflectionEnable = stBoolSutEmitterEarthReflectionEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolTerrainEnable
class stBoolTerrainEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolTerrainEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 899, 2)
    _Documentation = ''
stBoolTerrainEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolTerrainEnable', stBoolTerrainEnable)
_module_typeBindings.stBoolTerrainEnable = stBoolTerrainEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolTerrainMaskingAttenuationEnable
class stBoolTerrainMaskingAttenuationEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolTerrainMaskingAttenuationEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 908, 2)
    _Documentation = ''
stBoolTerrainMaskingAttenuationEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolTerrainMaskingAttenuationEnable', stBoolTerrainMaskingAttenuationEnable)
_module_typeBindings.stBoolTerrainMaskingAttenuationEnable = stBoolTerrainMaskingAttenuationEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolVmapEnable
class stBoolVmapEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolVmapEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 917, 2)
    _Documentation = ''
stBoolVmapEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolVmapEnable', stBoolVmapEnable)
_module_typeBindings.stBoolVmapEnable = stBoolVmapEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stBoolWaveSplashEnable
class stBoolWaveSplashEnable (pyxb.binding.datatypes.boolean):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stBoolWaveSplashEnable')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 926, 2)
    _Documentation = ''
stBoolWaveSplashEnable._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stBoolWaveSplashEnable', stBoolWaveSplashEnable)
_module_typeBindings.stBoolWaveSplashEnable = stBoolWaveSplashEnable

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDisplayIntensity
class stDoubleDisplayIntensity (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDisplayIntensity')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 935, 2)
    _Documentation = ''
stDoubleDisplayIntensity._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDisplayIntensity, value=pyxb.binding.datatypes.double(0.01))
stDoubleDisplayIntensity._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDisplayIntensity, value=pyxb.binding.datatypes.double(1.0))
stDoubleDisplayIntensity._InitializeFacetMap(stDoubleDisplayIntensity._CF_minInclusive,
   stDoubleDisplayIntensity._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDisplayIntensity', stDoubleDisplayIntensity)
_module_typeBindings.stDoubleDisplayIntensity = stDoubleDisplayIntensity

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDisplayScale
class stDoubleDisplayScale (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDisplayScale')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 947, 2)
    _Documentation = ''
stDoubleDisplayScale._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDisplayScale, value=pyxb.binding.datatypes.double(0.01))
stDoubleDisplayScale._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDisplayScale, value=pyxb.binding.datatypes.double(8.0))
stDoubleDisplayScale._InitializeFacetMap(stDoubleDisplayScale._CF_minInclusive,
   stDoubleDisplayScale._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDisplayScale', stDoubleDisplayScale)
_module_typeBindings.stDoubleDisplayScale = stDoubleDisplayScale

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDuctingHeight
class stDoubleDuctingHeight (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDuctingHeight')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 959, 2)
    _Documentation = ''
stDoubleDuctingHeight._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDuctingHeight, value=pyxb.binding.datatypes.double(0.0))
stDoubleDuctingHeight._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDuctingHeight, value=pyxb.binding.datatypes.double(1000000.0))
stDoubleDuctingHeight._InitializeFacetMap(stDoubleDuctingHeight._CF_minInclusive,
   stDoubleDuctingHeight._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDuctingHeight', stDoubleDuctingHeight)
_module_typeBindings.stDoubleDuctingHeight = stDoubleDuctingHeight

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleDuctingRefractivity
class stDoubleDuctingRefractivity (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleDuctingRefractivity')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 971, 2)
    _Documentation = ''
stDoubleDuctingRefractivity._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleDuctingRefractivity, value=pyxb.binding.datatypes.double(0.0))
stDoubleDuctingRefractivity._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleDuctingRefractivity, value=pyxb.binding.datatypes.double(32.0))
stDoubleDuctingRefractivity._InitializeFacetMap(stDoubleDuctingRefractivity._CF_minInclusive,
   stDoubleDuctingRefractivity._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleDuctingRefractivity', stDoubleDuctingRefractivity)
_module_typeBindings.stDoubleDuctingRefractivity = stDoubleDuctingRefractivity

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEarthRadiusFactor
class stDoubleEarthRadiusFactor (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEarthRadiusFactor')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 983, 2)
    _Documentation = ''
stDoubleEarthRadiusFactor._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEarthRadiusFactor, value=pyxb.binding.datatypes.double(0.1))
stDoubleEarthRadiusFactor._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEarthRadiusFactor, value=pyxb.binding.datatypes.double(1000.0))
stDoubleEarthRadiusFactor._InitializeFacetMap(stDoubleEarthRadiusFactor._CF_minInclusive,
   stDoubleEarthRadiusFactor._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEarthRadiusFactor', stDoubleEarthRadiusFactor)
_module_typeBindings.stDoubleEarthRadiusFactor = stDoubleEarthRadiusFactor

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleEastLongitude
class stDoubleEastLongitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleEastLongitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 995, 2)
    _Documentation = ''
stDoubleEastLongitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleEastLongitude, value=pyxb.binding.datatypes.double(0.0))
stDoubleEastLongitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleEastLongitude, value=pyxb.binding.datatypes.double(180.0))
stDoubleEastLongitude._InitializeFacetMap(stDoubleEastLongitude._CF_minInclusive,
   stDoubleEastLongitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleEastLongitude', stDoubleEastLongitude)
_module_typeBindings.stDoubleEastLongitude = stDoubleEastLongitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleGeopoliticalCenterLatitude
class stDoubleGeopoliticalCenterLatitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleGeopoliticalCenterLatitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1007, 2)
    _Documentation = ''
stDoubleGeopoliticalCenterLatitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleGeopoliticalCenterLatitude, value=pyxb.binding.datatypes.double(-90.0))
stDoubleGeopoliticalCenterLatitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleGeopoliticalCenterLatitude, value=pyxb.binding.datatypes.double(90.0))
stDoubleGeopoliticalCenterLatitude._InitializeFacetMap(stDoubleGeopoliticalCenterLatitude._CF_minInclusive,
   stDoubleGeopoliticalCenterLatitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleGeopoliticalCenterLatitude', stDoubleGeopoliticalCenterLatitude)
_module_typeBindings.stDoubleGeopoliticalCenterLatitude = stDoubleGeopoliticalCenterLatitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleGeopoliticalCenterLongitude
class stDoubleGeopoliticalCenterLongitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleGeopoliticalCenterLongitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1019, 2)
    _Documentation = ''
stDoubleGeopoliticalCenterLongitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleGeopoliticalCenterLongitude, value=pyxb.binding.datatypes.double(-180.0))
stDoubleGeopoliticalCenterLongitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleGeopoliticalCenterLongitude, value=pyxb.binding.datatypes.double(180.0))
stDoubleGeopoliticalCenterLongitude._InitializeFacetMap(stDoubleGeopoliticalCenterLongitude._CF_minInclusive,
   stDoubleGeopoliticalCenterLongitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleGeopoliticalCenterLongitude', stDoubleGeopoliticalCenterLongitude)
_module_typeBindings.stDoubleGeopoliticalCenterLongitude = stDoubleGeopoliticalCenterLongitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleIntensity
class stDoubleIntensity (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleIntensity')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1031, 2)
    _Documentation = ''
stDoubleIntensity._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleIntensity, value=pyxb.binding.datatypes.double(0.0))
stDoubleIntensity._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleIntensity, value=pyxb.binding.datatypes.double(1.0))
stDoubleIntensity._InitializeFacetMap(stDoubleIntensity._CF_minInclusive,
   stDoubleIntensity._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleIntensity', stDoubleIntensity)
_module_typeBindings.stDoubleIntensity = stDoubleIntensity

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerAz
class stDoubleLowerAz (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerAz')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1043, 2)
    _Documentation = ''
stDoubleLowerAz._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerAz, value=pyxb.binding.datatypes.double(0.0))
stDoubleLowerAz._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerAz, value=pyxb.binding.datatypes.double(360.0))
stDoubleLowerAz._InitializeFacetMap(stDoubleLowerAz._CF_minInclusive,
   stDoubleLowerAz._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerAz', stDoubleLowerAz)
_module_typeBindings.stDoubleLowerAz = stDoubleLowerAz

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerElevation
class stDoubleLowerElevation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerElevation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1055, 2)
    _Documentation = ''
stDoubleLowerElevation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerElevation, value=pyxb.binding.datatypes.double(-90.0))
stDoubleLowerElevation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerElevation, value=pyxb.binding.datatypes.double(90.0))
stDoubleLowerElevation._InitializeFacetMap(stDoubleLowerElevation._CF_minInclusive,
   stDoubleLowerElevation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerElevation', stDoubleLowerElevation)
_module_typeBindings.stDoubleLowerElevation = stDoubleLowerElevation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerFrequency
class stDoubleLowerFrequency (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerFrequency')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1067, 2)
    _Documentation = ''
stDoubleLowerFrequency._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerFrequency, value=pyxb.binding.datatypes.double(0.0))
stDoubleLowerFrequency._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerFrequency, value=pyxb.binding.datatypes.double(131071000000.0))
stDoubleLowerFrequency._InitializeFacetMap(stDoubleLowerFrequency._CF_minInclusive,
   stDoubleLowerFrequency._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerFrequency', stDoubleLowerFrequency)
_module_typeBindings.stDoubleLowerFrequency = stDoubleLowerFrequency

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerPower
class stDoubleLowerPower (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerPower')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1079, 2)
    _Documentation = ''
stDoubleLowerPower._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerPower, value=pyxb.binding.datatypes.double(-256.0))
stDoubleLowerPower._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerPower, value=pyxb.binding.datatypes.double(255.75))
stDoubleLowerPower._InitializeFacetMap(stDoubleLowerPower._CF_minInclusive,
   stDoubleLowerPower._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerPower', stDoubleLowerPower)
_module_typeBindings.stDoubleLowerPower = stDoubleLowerPower

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerPulseWidth
class stDoubleLowerPulseWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerPulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1091, 2)
    _Documentation = ''
stDoubleLowerPulseWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerPulseWidth, value=pyxb.binding.datatypes.double(0.0))
stDoubleLowerPulseWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerPulseWidth, value=pyxb.binding.datatypes.double(0.131071))
stDoubleLowerPulseWidth._InitializeFacetMap(stDoubleLowerPulseWidth._CF_minInclusive,
   stDoubleLowerPulseWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerPulseWidth', stDoubleLowerPulseWidth)
_module_typeBindings.stDoubleLowerPulseWidth = stDoubleLowerPulseWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleLowerTime
class stDoubleLowerTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleLowerTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1103, 2)
    _Documentation = ''
stDoubleLowerTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleLowerTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleLowerTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleLowerTime, value=pyxb.binding.datatypes.double(137438.0))
stDoubleLowerTime._InitializeFacetMap(stDoubleLowerTime._CF_minInclusive,
   stDoubleLowerTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleLowerTime', stDoubleLowerTime)
_module_typeBindings.stDoubleLowerTime = stDoubleLowerTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleNorthLatitude
class stDoubleNorthLatitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleNorthLatitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1115, 2)
    _Documentation = ''
stDoubleNorthLatitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleNorthLatitude, value=pyxb.binding.datatypes.double(0.0))
stDoubleNorthLatitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleNorthLatitude, value=pyxb.binding.datatypes.double(90.0))
stDoubleNorthLatitude._InitializeFacetMap(stDoubleNorthLatitude._CF_minInclusive,
   stDoubleNorthLatitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleNorthLatitude', stDoubleNorthLatitude)
_module_typeBindings.stDoubleNorthLatitude = stDoubleNorthLatitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleScale
class stDoubleScale (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleScale')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1127, 2)
    _Documentation = ''
stDoubleScale._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleScale, value=pyxb.binding.datatypes.double(0.0))
stDoubleScale._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleScale, value=pyxb.binding.datatypes.double(1.0))
stDoubleScale._InitializeFacetMap(stDoubleScale._CF_minInclusive,
   stDoubleScale._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleScale', stDoubleScale)
_module_typeBindings.stDoubleScale = stDoubleScale

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleSouthLatitude
class stDoubleSouthLatitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleSouthLatitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1139, 2)
    _Documentation = ''
stDoubleSouthLatitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleSouthLatitude, value=pyxb.binding.datatypes.double(0.0))
stDoubleSouthLatitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleSouthLatitude, value=pyxb.binding.datatypes.double(90.0))
stDoubleSouthLatitude._InitializeFacetMap(stDoubleSouthLatitude._CF_minInclusive,
   stDoubleSouthLatitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleSouthLatitude', stDoubleSouthLatitude)
_module_typeBindings.stDoubleSouthLatitude = stDoubleSouthLatitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperAz
class stDoubleUpperAz (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperAz')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1151, 2)
    _Documentation = ''
stDoubleUpperAz._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperAz, value=pyxb.binding.datatypes.double(0.0))
stDoubleUpperAz._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperAz, value=pyxb.binding.datatypes.double(360.0))
stDoubleUpperAz._InitializeFacetMap(stDoubleUpperAz._CF_minInclusive,
   stDoubleUpperAz._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperAz', stDoubleUpperAz)
_module_typeBindings.stDoubleUpperAz = stDoubleUpperAz

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperElevation
class stDoubleUpperElevation (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperElevation')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1163, 2)
    _Documentation = ''
stDoubleUpperElevation._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperElevation, value=pyxb.binding.datatypes.double(-90.0))
stDoubleUpperElevation._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperElevation, value=pyxb.binding.datatypes.double(90.0))
stDoubleUpperElevation._InitializeFacetMap(stDoubleUpperElevation._CF_minInclusive,
   stDoubleUpperElevation._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperElevation', stDoubleUpperElevation)
_module_typeBindings.stDoubleUpperElevation = stDoubleUpperElevation

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperFrequency
class stDoubleUpperFrequency (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperFrequency')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1175, 2)
    _Documentation = ''
stDoubleUpperFrequency._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperFrequency, value=pyxb.binding.datatypes.double(0.0))
stDoubleUpperFrequency._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperFrequency, value=pyxb.binding.datatypes.double(131071000000.0))
stDoubleUpperFrequency._InitializeFacetMap(stDoubleUpperFrequency._CF_minInclusive,
   stDoubleUpperFrequency._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperFrequency', stDoubleUpperFrequency)
_module_typeBindings.stDoubleUpperFrequency = stDoubleUpperFrequency

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperPower
class stDoubleUpperPower (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperPower')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1187, 2)
    _Documentation = ''
stDoubleUpperPower._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperPower, value=pyxb.binding.datatypes.double(-256.0))
stDoubleUpperPower._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperPower, value=pyxb.binding.datatypes.double(255.75))
stDoubleUpperPower._InitializeFacetMap(stDoubleUpperPower._CF_minInclusive,
   stDoubleUpperPower._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperPower', stDoubleUpperPower)
_module_typeBindings.stDoubleUpperPower = stDoubleUpperPower

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperPulseWidth
class stDoubleUpperPulseWidth (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperPulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1199, 2)
    _Documentation = ''
stDoubleUpperPulseWidth._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperPulseWidth, value=pyxb.binding.datatypes.double(0.0))
stDoubleUpperPulseWidth._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperPulseWidth, value=pyxb.binding.datatypes.double(0.131071))
stDoubleUpperPulseWidth._InitializeFacetMap(stDoubleUpperPulseWidth._CF_minInclusive,
   stDoubleUpperPulseWidth._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperPulseWidth', stDoubleUpperPulseWidth)
_module_typeBindings.stDoubleUpperPulseWidth = stDoubleUpperPulseWidth

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleUpperTime
class stDoubleUpperTime (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleUpperTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1211, 2)
    _Documentation = ''
stDoubleUpperTime._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleUpperTime, value=pyxb.binding.datatypes.double(0.0))
stDoubleUpperTime._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleUpperTime, value=pyxb.binding.datatypes.double(137438.0))
stDoubleUpperTime._InitializeFacetMap(stDoubleUpperTime._CF_minInclusive,
   stDoubleUpperTime._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleUpperTime', stDoubleUpperTime)
_module_typeBindings.stDoubleUpperTime = stDoubleUpperTime

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleVelocityVectorDuration
class stDoubleVelocityVectorDuration (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleVelocityVectorDuration')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1223, 2)
    _Documentation = ''
stDoubleVelocityVectorDuration._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleVelocityVectorDuration, value=pyxb.binding.datatypes.double(0.0))
stDoubleVelocityVectorDuration._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleVelocityVectorDuration, value=pyxb.binding.datatypes.double(600.0))
stDoubleVelocityVectorDuration._InitializeFacetMap(stDoubleVelocityVectorDuration._CF_minInclusive,
   stDoubleVelocityVectorDuration._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleVelocityVectorDuration', stDoubleVelocityVectorDuration)
_module_typeBindings.stDoubleVelocityVectorDuration = stDoubleVelocityVectorDuration

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stDoubleWestLongitude
class stDoubleWestLongitude (pyxb.binding.datatypes.double):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stDoubleWestLongitude')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1235, 2)
    _Documentation = ''
stDoubleWestLongitude._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stDoubleWestLongitude, value=pyxb.binding.datatypes.double(0.0))
stDoubleWestLongitude._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stDoubleWestLongitude, value=pyxb.binding.datatypes.double(180.0))
stDoubleWestLongitude._InitializeFacetMap(stDoubleWestLongitude._CF_minInclusive,
   stDoubleWestLongitude._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stDoubleWestLongitude', stDoubleWestLongitude)
_module_typeBindings.stDoubleWestLongitude = stDoubleWestLongitude

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDgsVideoStateKind
class stEnumDgsVideoStateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDgsVideoStateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1247, 2)
    _Documentation = ''
stEnumDgsVideoStateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDgsVideoStateKind, enum_prefix=None)
stEnumDgsVideoStateKind.Ignore = stEnumDgsVideoStateKind._CF_enumeration.addEnumeration(unicode_value='Ignore', tag='Ignore')
stEnumDgsVideoStateKind.Store_Only_Video_Enabled_Pulses = stEnumDgsVideoStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Video_Enabled_Pulses', tag='Store_Only_Video_Enabled_Pulses')
stEnumDgsVideoStateKind._InitializeFacetMap(stEnumDgsVideoStateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDgsVideoStateKind', stEnumDgsVideoStateKind)
_module_typeBindings.stEnumDgsVideoStateKind = stEnumDgsVideoStateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDisplayCenterKind
class stEnumDisplayCenterKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDisplayCenterKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1259, 2)
    _Documentation = ''
stEnumDisplayCenterKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDisplayCenterKind, enum_prefix=None)
stEnumDisplayCenterKind.On_Sut = stEnumDisplayCenterKind._CF_enumeration.addEnumeration(unicode_value='On_Sut', tag='On_Sut')
stEnumDisplayCenterKind.On_Platform = stEnumDisplayCenterKind._CF_enumeration.addEnumeration(unicode_value='On_Platform', tag='On_Platform')
stEnumDisplayCenterKind.At_Fixed_Point = stEnumDisplayCenterKind._CF_enumeration.addEnumeration(unicode_value='At_Fixed_Point', tag='At_Fixed_Point')
stEnumDisplayCenterKind._InitializeFacetMap(stEnumDisplayCenterKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDisplayCenterKind', stEnumDisplayCenterKind)
_module_typeBindings.stEnumDisplayCenterKind = stEnumDisplayCenterKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDisplayGridKind
class stEnumDisplayGridKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDisplayGridKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1272, 2)
    _Documentation = ''
stEnumDisplayGridKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDisplayGridKind, enum_prefix=None)
stEnumDisplayGridKind.Decimal = stEnumDisplayGridKind._CF_enumeration.addEnumeration(unicode_value='Decimal', tag='Decimal')
stEnumDisplayGridKind.Deg_Min_Sec = stEnumDisplayGridKind._CF_enumeration.addEnumeration(unicode_value='Deg_Min_Sec', tag='Deg_Min_Sec')
stEnumDisplayGridKind._InitializeFacetMap(stEnumDisplayGridKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDisplayGridKind', stEnumDisplayGridKind)
_module_typeBindings.stEnumDisplayGridKind = stEnumDisplayGridKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDistanceUnits
class stEnumDistanceUnits (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDistanceUnits')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1284, 2)
    _Documentation = ''
stEnumDistanceUnits._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDistanceUnits, enum_prefix=None)
stEnumDistanceUnits.Kilometers = stEnumDistanceUnits._CF_enumeration.addEnumeration(unicode_value='Kilometers', tag='Kilometers')
stEnumDistanceUnits.Nautical_Miles = stEnumDistanceUnits._CF_enumeration.addEnumeration(unicode_value='Nautical_Miles', tag='Nautical_Miles')
stEnumDistanceUnits._InitializeFacetMap(stEnumDistanceUnits._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDistanceUnits', stEnumDistanceUnits)
_module_typeBindings.stEnumDistanceUnits = stEnumDistanceUnits

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumDuctingBoundaryKind
class stEnumDuctingBoundaryKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumDuctingBoundaryKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1296, 2)
    _Documentation = ''
stEnumDuctingBoundaryKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumDuctingBoundaryKind, enum_prefix=None)
stEnumDuctingBoundaryKind.Independent_Of_Surface_Type = stEnumDuctingBoundaryKind._CF_enumeration.addEnumeration(unicode_value='Independent_Of_Surface_Type', tag='Independent_Of_Surface_Type')
stEnumDuctingBoundaryKind.Land_Sea_Boundaries = stEnumDuctingBoundaryKind._CF_enumeration.addEnumeration(unicode_value='Land_Sea_Boundaries', tag='Land_Sea_Boundaries')
stEnumDuctingBoundaryKind._InitializeFacetMap(stEnumDuctingBoundaryKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumDuctingBoundaryKind', stEnumDuctingBoundaryKind)
_module_typeBindings.stEnumDuctingBoundaryKind = stEnumDuctingBoundaryKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumEastWestDirectionKind
class stEnumEastWestDirectionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumEastWestDirectionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1308, 2)
    _Documentation = ''
stEnumEastWestDirectionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumEastWestDirectionKind, enum_prefix=None)
stEnumEastWestDirectionKind.East = stEnumEastWestDirectionKind._CF_enumeration.addEnumeration(unicode_value='East', tag='East')
stEnumEastWestDirectionKind.West = stEnumEastWestDirectionKind._CF_enumeration.addEnumeration(unicode_value='West', tag='West')
stEnumEastWestDirectionKind._InitializeFacetMap(stEnumEastWestDirectionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumEastWestDirectionKind', stEnumEastWestDirectionKind)
_module_typeBindings.stEnumEastWestDirectionKind = stEnumEastWestDirectionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumEnvironmentKind
class stEnumEnvironmentKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumEnvironmentKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1320, 2)
    _Documentation = ''
stEnumEnvironmentKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumEnvironmentKind, enum_prefix=None)
stEnumEnvironmentKind.Round = stEnumEnvironmentKind._CF_enumeration.addEnumeration(unicode_value='Round', tag='Round')
stEnumEnvironmentKind.Flat = stEnumEnvironmentKind._CF_enumeration.addEnumeration(unicode_value='Flat', tag='Flat')
stEnumEnvironmentKind._InitializeFacetMap(stEnumEnvironmentKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumEnvironmentKind', stEnumEnvironmentKind)
_module_typeBindings.stEnumEnvironmentKind = stEnumEnvironmentKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumExternalGatingStateKind
class stEnumExternalGatingStateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumExternalGatingStateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1332, 2)
    _Documentation = ''
stEnumExternalGatingStateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumExternalGatingStateKind, enum_prefix=None)
stEnumExternalGatingStateKind.Ignore = stEnumExternalGatingStateKind._CF_enumeration.addEnumeration(unicode_value='Ignore', tag='Ignore')
stEnumExternalGatingStateKind.Store_Only_Gated_Pulses = stEnumExternalGatingStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Gated_Pulses', tag='Store_Only_Gated_Pulses')
stEnumExternalGatingStateKind._InitializeFacetMap(stEnumExternalGatingStateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumExternalGatingStateKind', stEnumExternalGatingStateKind)
_module_typeBindings.stEnumExternalGatingStateKind = stEnumExternalGatingStateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumGuiDisplayModeKind
class stEnumGuiDisplayModeKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumGuiDisplayModeKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1344, 2)
    _Documentation = ''
stEnumGuiDisplayModeKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumGuiDisplayModeKind, enum_prefix=None)
stEnumGuiDisplayModeKind.Plan_View = stEnumGuiDisplayModeKind._CF_enumeration.addEnumeration(unicode_value='Plan_View', tag='Plan_View')
stEnumGuiDisplayModeKind.Threed_View = stEnumGuiDisplayModeKind._CF_enumeration.addEnumeration(unicode_value='Threed_View', tag='Threed_View')
stEnumGuiDisplayModeKind.Polar_View = stEnumGuiDisplayModeKind._CF_enumeration.addEnumeration(unicode_value='Polar_View', tag='Polar_View')
stEnumGuiDisplayModeKind._InitializeFacetMap(stEnumGuiDisplayModeKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumGuiDisplayModeKind', stEnumGuiDisplayModeKind)
_module_typeBindings.stEnumGuiDisplayModeKind = stEnumGuiDisplayModeKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumNavIf1553BusKind
class stEnumNavIf1553BusKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumNavIf1553BusKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1357, 2)
    _Documentation = ''
stEnumNavIf1553BusKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumNavIf1553BusKind, enum_prefix=None)
stEnumNavIf1553BusKind.Bus_A = stEnumNavIf1553BusKind._CF_enumeration.addEnumeration(unicode_value='Bus_A', tag='Bus_A')
stEnumNavIf1553BusKind.Bus_B = stEnumNavIf1553BusKind._CF_enumeration.addEnumeration(unicode_value='Bus_B', tag='Bus_B')
stEnumNavIf1553BusKind._InitializeFacetMap(stEnumNavIf1553BusKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumNavIf1553BusKind', stEnumNavIf1553BusKind)
_module_typeBindings.stEnumNavIf1553BusKind = stEnumNavIf1553BusKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumNavIfPhysicalIfKind
class stEnumNavIfPhysicalIfKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumNavIfPhysicalIfKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1369, 2)
    _Documentation = ''
stEnumNavIfPhysicalIfKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumNavIfPhysicalIfKind, enum_prefix=None)
stEnumNavIfPhysicalIfKind.Nav_1553b = stEnumNavIfPhysicalIfKind._CF_enumeration.addEnumeration(unicode_value='Nav_1553b', tag='Nav_1553b')
stEnumNavIfPhysicalIfKind.Nav_Ethernet = stEnumNavIfPhysicalIfKind._CF_enumeration.addEnumeration(unicode_value='Nav_Ethernet', tag='Nav_Ethernet')
stEnumNavIfPhysicalIfKind.Nav_Rm = stEnumNavIfPhysicalIfKind._CF_enumeration.addEnumeration(unicode_value='Nav_Rm', tag='Nav_Rm')
stEnumNavIfPhysicalIfKind._InitializeFacetMap(stEnumNavIfPhysicalIfKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumNavIfPhysicalIfKind', stEnumNavIfPhysicalIfKind)
_module_typeBindings.stEnumNavIfPhysicalIfKind = stEnumNavIfPhysicalIfKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumNavIfTransferDirection
class stEnumNavIfTransferDirection (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumNavIfTransferDirection')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1382, 2)
    _Documentation = ''
stEnumNavIfTransferDirection._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumNavIfTransferDirection, enum_prefix=None)
stEnumNavIfTransferDirection.Receive = stEnumNavIfTransferDirection._CF_enumeration.addEnumeration(unicode_value='Receive', tag='Receive')
stEnumNavIfTransferDirection.Transmit = stEnumNavIfTransferDirection._CF_enumeration.addEnumeration(unicode_value='Transmit', tag='Transmit')
stEnumNavIfTransferDirection._InitializeFacetMap(stEnumNavIfTransferDirection._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumNavIfTransferDirection', stEnumNavIfTransferDirection)
_module_typeBindings.stEnumNavIfTransferDirection = stEnumNavIfTransferDirection

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumNavIfUpdateInterval
class stEnumNavIfUpdateInterval (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumNavIfUpdateInterval')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1394, 2)
    _Documentation = ''
stEnumNavIfUpdateInterval._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumNavIfUpdateInterval, enum_prefix=None)
stEnumNavIfUpdateInterval.Nav_Interval_1_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_1_Ms', tag='Nav_Interval_1_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_2_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_2_Ms', tag='Nav_Interval_2_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_5_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_5_Ms', tag='Nav_Interval_5_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_10_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_10_Ms', tag='Nav_Interval_10_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_20_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_20_Ms', tag='Nav_Interval_20_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_30_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_30_Ms', tag='Nav_Interval_30_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_40_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_40_Ms', tag='Nav_Interval_40_Ms')
stEnumNavIfUpdateInterval.Nav_Interval_50_Ms = stEnumNavIfUpdateInterval._CF_enumeration.addEnumeration(unicode_value='Nav_Interval_50_Ms', tag='Nav_Interval_50_Ms')
stEnumNavIfUpdateInterval._InitializeFacetMap(stEnumNavIfUpdateInterval._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumNavIfUpdateInterval', stEnumNavIfUpdateInterval)
_module_typeBindings.stEnumNavIfUpdateInterval = stEnumNavIfUpdateInterval

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumNorthSouthDirectionKind
class stEnumNorthSouthDirectionKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumNorthSouthDirectionKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1412, 2)
    _Documentation = ''
stEnumNorthSouthDirectionKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumNorthSouthDirectionKind, enum_prefix=None)
stEnumNorthSouthDirectionKind.North = stEnumNorthSouthDirectionKind._CF_enumeration.addEnumeration(unicode_value='North', tag='North')
stEnumNorthSouthDirectionKind.South = stEnumNorthSouthDirectionKind._CF_enumeration.addEnumeration(unicode_value='South', tag='South')
stEnumNorthSouthDirectionKind._InitializeFacetMap(stEnumNorthSouthDirectionKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumNorthSouthDirectionKind', stEnumNorthSouthDirectionKind)
_module_typeBindings.stEnumNorthSouthDirectionKind = stEnumNorthSouthDirectionKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPdwKind
class stEnumPdwKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPdwKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1424, 2)
    _Documentation = ''
stEnumPdwKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPdwKind, enum_prefix=None)
stEnumPdwKind.Gp = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Gp', tag='Gp')
stEnumPdwKind.Ntp = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Ntp', tag='Ntp')
stEnumPdwKind.Ntp_With_Rp = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Ntp_With_Rp', tag='Ntp_With_Rp')
stEnumPdwKind.Ntp_With_Spinner = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Ntp_With_Spinner', tag='Ntp_With_Spinner')
stEnumPdwKind.Ntp_With_Esa = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Ntp_With_Esa', tag='Ntp_With_Esa')
stEnumPdwKind.Prb = stEnumPdwKind._CF_enumeration.addEnumeration(unicode_value='Prb', tag='Prb')
stEnumPdwKind._InitializeFacetMap(stEnumPdwKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPdwKind', stEnumPdwKind)
_module_typeBindings.stEnumPdwKind = stEnumPdwKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPulseContendedStateKind
class stEnumPulseContendedStateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPulseContendedStateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1440, 2)
    _Documentation = ''
stEnumPulseContendedStateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPulseContendedStateKind, enum_prefix=None)
stEnumPulseContendedStateKind.Ignore = stEnumPulseContendedStateKind._CF_enumeration.addEnumeration(unicode_value='Ignore', tag='Ignore')
stEnumPulseContendedStateKind.Store_Only_Pulses_Contended = stEnumPulseContendedStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Pulses_Contended', tag='Store_Only_Pulses_Contended')
stEnumPulseContendedStateKind.Store_Only_Pulses_Not_Contended = stEnumPulseContendedStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Pulses_Not_Contended', tag='Store_Only_Pulses_Not_Contended')
stEnumPulseContendedStateKind._InitializeFacetMap(stEnumPulseContendedStateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPulseContendedStateKind', stEnumPulseContendedStateKind)
_module_typeBindings.stEnumPulseContendedStateKind = stEnumPulseContendedStateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumPulseInhibitStateKind
class stEnumPulseInhibitStateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumPulseInhibitStateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1453, 2)
    _Documentation = ''
stEnumPulseInhibitStateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumPulseInhibitStateKind, enum_prefix=None)
stEnumPulseInhibitStateKind.Ignore = stEnumPulseInhibitStateKind._CF_enumeration.addEnumeration(unicode_value='Ignore', tag='Ignore')
stEnumPulseInhibitStateKind.Store_Only_Pulses_Inhibited = stEnumPulseInhibitStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Pulses_Inhibited', tag='Store_Only_Pulses_Inhibited')
stEnumPulseInhibitStateKind.Store_Only_Pulses_Not_Inhibited = stEnumPulseInhibitStateKind._CF_enumeration.addEnumeration(unicode_value='Store_Only_Pulses_Not_Inhibited', tag='Store_Only_Pulses_Not_Inhibited')
stEnumPulseInhibitStateKind._InitializeFacetMap(stEnumPulseInhibitStateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumPulseInhibitStateKind', stEnumPulseInhibitStateKind)
_module_typeBindings.stEnumPulseInhibitStateKind = stEnumPulseInhibitStateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumRainfallRateKind
class stEnumRainfallRateKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumRainfallRateKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1466, 2)
    _Documentation = ''
stEnumRainfallRateKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumRainfallRateKind, enum_prefix=None)
stEnumRainfallRateKind.No_Rain = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='No_Rain', tag='No_Rain')
stEnumRainfallRateKind.Drizzle = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='Drizzle', tag='Drizzle')
stEnumRainfallRateKind.Light_Rain = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='Light_Rain', tag='Light_Rain')
stEnumRainfallRateKind.Medium_Rain = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='Medium_Rain', tag='Medium_Rain')
stEnumRainfallRateKind.Heavy_Rain = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='Heavy_Rain', tag='Heavy_Rain')
stEnumRainfallRateKind.Tropical_Downpour = stEnumRainfallRateKind._CF_enumeration.addEnumeration(unicode_value='Tropical_Downpour', tag='Tropical_Downpour')
stEnumRainfallRateKind._InitializeFacetMap(stEnumRainfallRateKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumRainfallRateKind', stEnumRainfallRateKind)
_module_typeBindings.stEnumRainfallRateKind = stEnumRainfallRateKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSituationDisplayCenterKind
class stEnumSituationDisplayCenterKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSituationDisplayCenterKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1482, 2)
    _Documentation = ''
stEnumSituationDisplayCenterKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSituationDisplayCenterKind, enum_prefix=None)
stEnumSituationDisplayCenterKind.On_Sut = stEnumSituationDisplayCenterKind._CF_enumeration.addEnumeration(unicode_value='On_Sut', tag='On_Sut')
stEnumSituationDisplayCenterKind.At_Point = stEnumSituationDisplayCenterKind._CF_enumeration.addEnumeration(unicode_value='At_Point', tag='At_Point')
stEnumSituationDisplayCenterKind._InitializeFacetMap(stEnumSituationDisplayCenterKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSituationDisplayCenterKind', stEnumSituationDisplayCenterKind)
_module_typeBindings.stEnumSituationDisplayCenterKind = stEnumSituationDisplayCenterKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSituationDisplayModeKind
class stEnumSituationDisplayModeKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSituationDisplayModeKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1494, 2)
    _Documentation = ''
stEnumSituationDisplayModeKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSituationDisplayModeKind, enum_prefix=None)
stEnumSituationDisplayModeKind.Rectangular = stEnumSituationDisplayModeKind._CF_enumeration.addEnumeration(unicode_value='Rectangular', tag='Rectangular')
stEnumSituationDisplayModeKind.Polar = stEnumSituationDisplayModeKind._CF_enumeration.addEnumeration(unicode_value='Polar', tag='Polar')
stEnumSituationDisplayModeKind._InitializeFacetMap(stEnumSituationDisplayModeKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSituationDisplayModeKind', stEnumSituationDisplayModeKind)
_module_typeBindings.stEnumSituationDisplayModeKind = stEnumSituationDisplayModeKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumSurfaceKind
class stEnumSurfaceKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumSurfaceKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1506, 2)
    _Documentation = ''
stEnumSurfaceKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumSurfaceKind, enum_prefix=None)
stEnumSurfaceKind.Calm_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Calm_Sea', tag='Calm_Sea')
stEnumSurfaceKind.Smooth_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Smooth_Sea', tag='Smooth_Sea')
stEnumSurfaceKind.Slight_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Slight_Sea', tag='Slight_Sea')
stEnumSurfaceKind.Moderate_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Moderate_Sea', tag='Moderate_Sea')
stEnumSurfaceKind.Rough_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Rough_Sea', tag='Rough_Sea')
stEnumSurfaceKind.Very_Rough_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Very_Rough_Sea', tag='Very_Rough_Sea')
stEnumSurfaceKind.High_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='High_Sea', tag='High_Sea')
stEnumSurfaceKind.Very_High_Sea = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Very_High_Sea', tag='Very_High_Sea')
stEnumSurfaceKind.Smooth_Land = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Smooth_Land', tag='Smooth_Land')
stEnumSurfaceKind.Rough_Land = stEnumSurfaceKind._CF_enumeration.addEnumeration(unicode_value='Rough_Land', tag='Rough_Land')
stEnumSurfaceKind._InitializeFacetMap(stEnumSurfaceKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumSurfaceKind', stEnumSurfaceKind)
_module_typeBindings.stEnumSurfaceKind = stEnumSurfaceKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stEnumTerrainDtedKind
class stEnumTerrainDtedKind (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stEnumTerrainDtedKind')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1526, 2)
    _Documentation = ''
stEnumTerrainDtedKind._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=stEnumTerrainDtedKind, enum_prefix=None)
stEnumTerrainDtedKind.Level_0 = stEnumTerrainDtedKind._CF_enumeration.addEnumeration(unicode_value='Level_0', tag='Level_0')
stEnumTerrainDtedKind.Level_1 = stEnumTerrainDtedKind._CF_enumeration.addEnumeration(unicode_value='Level_1', tag='Level_1')
stEnumTerrainDtedKind.Ceesim_Elv = stEnumTerrainDtedKind._CF_enumeration.addEnumeration(unicode_value='Ceesim_Elv', tag='Ceesim_Elv')
stEnumTerrainDtedKind._InitializeFacetMap(stEnumTerrainDtedKind._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stEnumTerrainDtedKind', stEnumTerrainDtedKind)
_module_typeBindings.stEnumTerrainDtedKind = stEnumTerrainDtedKind

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntDisplayId
class stIntDisplayId (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntDisplayId')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1539, 2)
    _Documentation = ''
stIntDisplayId._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stIntDisplayId', stIntDisplayId)
_module_typeBindings.stIntDisplayId = stIntDisplayId

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntDisplayServer
class stIntDisplayServer (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntDisplayServer')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1548, 2)
    _Documentation = ''
stIntDisplayServer._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stIntDisplayServer', stIntDisplayServer)
_module_typeBindings.stIntDisplayServer = stIntDisplayServer

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntLowerEmitterNumber
class stIntLowerEmitterNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntLowerEmitterNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1557, 2)
    _Documentation = ''
stIntLowerEmitterNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntLowerEmitterNumber, value=pyxb.binding.datatypes.int(1))
stIntLowerEmitterNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntLowerEmitterNumber, value=pyxb.binding.datatypes.int(32767))
stIntLowerEmitterNumber._InitializeFacetMap(stIntLowerEmitterNumber._CF_minInclusive,
   stIntLowerEmitterNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntLowerEmitterNumber', stIntLowerEmitterNumber)
_module_typeBindings.stIntLowerEmitterNumber = stIntLowerEmitterNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntLowerGeneratorNumber
class stIntLowerGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntLowerGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1569, 2)
    _Documentation = ''
stIntLowerGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntLowerGeneratorNumber, value=pyxb.binding.datatypes.int(0))
stIntLowerGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntLowerGeneratorNumber, value=pyxb.binding.datatypes.int(2047))
stIntLowerGeneratorNumber._InitializeFacetMap(stIntLowerGeneratorNumber._CF_minInclusive,
   stIntLowerGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntLowerGeneratorNumber', stIntLowerGeneratorNumber)
_module_typeBindings.stIntLowerGeneratorNumber = stIntLowerGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNavIfRtAddress
class stIntNavIfRtAddress (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNavIfRtAddress')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1581, 2)
    _Documentation = ''
stIntNavIfRtAddress._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNavIfRtAddress, value=pyxb.binding.datatypes.int(0))
stIntNavIfRtAddress._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNavIfRtAddress, value=pyxb.binding.datatypes.int(31))
stIntNavIfRtAddress._InitializeFacetMap(stIntNavIfRtAddress._CF_minInclusive,
   stIntNavIfRtAddress._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNavIfRtAddress', stIntNavIfRtAddress)
_module_typeBindings.stIntNavIfRtAddress = stIntNavIfRtAddress

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntNavIfRtSubAddress
class stIntNavIfRtSubAddress (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntNavIfRtSubAddress')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1593, 2)
    _Documentation = ''
stIntNavIfRtSubAddress._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntNavIfRtSubAddress, value=pyxb.binding.datatypes.int(0))
stIntNavIfRtSubAddress._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntNavIfRtSubAddress, value=pyxb.binding.datatypes.int(31))
stIntNavIfRtSubAddress._InitializeFacetMap(stIntNavIfRtSubAddress._CF_minInclusive,
   stIntNavIfRtSubAddress._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntNavIfRtSubAddress', stIntNavIfRtSubAddress)
_module_typeBindings.stIntNavIfRtSubAddress = stIntNavIfRtSubAddress

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntScenarioRevision
class stIntScenarioRevision (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntScenarioRevision')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1605, 2)
    _Documentation = ''
stIntScenarioRevision._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stIntScenarioRevision', stIntScenarioRevision)
_module_typeBindings.stIntScenarioRevision = stIntScenarioRevision

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSoftwareReleaseOfLastHeaderEdit
class stIntSoftwareReleaseOfLastHeaderEdit (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSoftwareReleaseOfLastHeaderEdit')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1614, 2)
    _Documentation = ''
stIntSoftwareReleaseOfLastHeaderEdit._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stIntSoftwareReleaseOfLastHeaderEdit', stIntSoftwareReleaseOfLastHeaderEdit)
_module_typeBindings.stIntSoftwareReleaseOfLastHeaderEdit = stIntSoftwareReleaseOfLastHeaderEdit

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntSutPlatformNumber
class stIntSutPlatformNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntSutPlatformNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1623, 2)
    _Documentation = ''
stIntSutPlatformNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntSutPlatformNumber, value=pyxb.binding.datatypes.int(1))
stIntSutPlatformNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntSutPlatformNumber, value=pyxb.binding.datatypes.int(32767))
stIntSutPlatformNumber._InitializeFacetMap(stIntSutPlatformNumber._CF_minInclusive,
   stIntSutPlatformNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntSutPlatformNumber', stIntSutPlatformNumber)
_module_typeBindings.stIntSutPlatformNumber = stIntSutPlatformNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntUpperEmitterNumber
class stIntUpperEmitterNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntUpperEmitterNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1635, 2)
    _Documentation = ''
stIntUpperEmitterNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntUpperEmitterNumber, value=pyxb.binding.datatypes.int(1))
stIntUpperEmitterNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntUpperEmitterNumber, value=pyxb.binding.datatypes.int(32767))
stIntUpperEmitterNumber._InitializeFacetMap(stIntUpperEmitterNumber._CF_minInclusive,
   stIntUpperEmitterNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntUpperEmitterNumber', stIntUpperEmitterNumber)
_module_typeBindings.stIntUpperEmitterNumber = stIntUpperEmitterNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stIntUpperGeneratorNumber
class stIntUpperGeneratorNumber (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stIntUpperGeneratorNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1647, 2)
    _Documentation = ''
stIntUpperGeneratorNumber._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stIntUpperGeneratorNumber, value=pyxb.binding.datatypes.int(0))
stIntUpperGeneratorNumber._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stIntUpperGeneratorNumber, value=pyxb.binding.datatypes.int(2047))
stIntUpperGeneratorNumber._InitializeFacetMap(stIntUpperGeneratorNumber._CF_minInclusive,
   stIntUpperGeneratorNumber._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stIntUpperGeneratorNumber', stIntUpperGeneratorNumber)
_module_typeBindings.stIntUpperGeneratorNumber = stIntUpperGeneratorNumber

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringCommentScenarioHeader
class stStringCommentScenarioHeader (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringCommentScenarioHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1659, 2)
    _Documentation = ''
stStringCommentScenarioHeader._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringCommentScenarioHeader._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(30))
stStringCommentScenarioHeader._InitializeFacetMap(stStringCommentScenarioHeader._CF_minLength,
   stStringCommentScenarioHeader._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringCommentScenarioHeader', stStringCommentScenarioHeader)
_module_typeBindings.stStringCommentScenarioHeader = stStringCommentScenarioHeader

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringDuctingFileName
class stStringDuctingFileName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringDuctingFileName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1671, 2)
    _Documentation = ''
stStringDuctingFileName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringDuctingFileName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
stStringDuctingFileName._InitializeFacetMap(stStringDuctingFileName._CF_minLength,
   stStringDuctingFileName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringDuctingFileName', stStringDuctingFileName)
_module_typeBindings.stStringDuctingFileName = stStringDuctingFileName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringDxFileName
class stStringDxFileName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringDxFileName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1683, 2)
    _Documentation = ''
stStringDxFileName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringDxFileName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
stStringDxFileName._InitializeFacetMap(stStringDxFileName._CF_minLength,
   stStringDxFileName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringDxFileName', stStringDxFileName)
_module_typeBindings.stStringDxFileName = stStringDxFileName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stStringEmitterLibraryName
class stStringEmitterLibraryName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stStringEmitterLibraryName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1695, 2)
    _Documentation = ''
stStringEmitterLibraryName._CF_minLength = pyxb.binding.facets.CF_minLength(value=pyxb.binding.datatypes.nonNegativeInteger(0))
stStringEmitterLibraryName._CF_maxLength = pyxb.binding.facets.CF_maxLength(value=pyxb.binding.datatypes.nonNegativeInteger(255))
stStringEmitterLibraryName._InitializeFacetMap(stStringEmitterLibraryName._CF_minLength,
   stStringEmitterLibraryName._CF_maxLength)
Namespace.addCategoryObject('typeBinding', 'stStringEmitterLibraryName', stStringEmitterLibraryName)
_module_typeBindings.stStringEmitterLibraryName = stStringEmitterLibraryName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextGeotiffPath
class stTextGeotiffPath (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextGeotiffPath')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1707, 2)
    _Documentation = ''
stTextGeotiffPath._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextGeotiffPath', stTextGeotiffPath)
_module_typeBindings.stTextGeotiffPath = stTextGeotiffPath

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stTextScenarioElementLibraryName
class stTextScenarioElementLibraryName (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stTextScenarioElementLibraryName')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 1716, 2)
    _Documentation = ''
stTextScenarioElementLibraryName._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'stTextScenarioElementLibraryName', stTextScenarioElementLibraryName)
_module_typeBindings.stTextScenarioElementLibraryName = stTextScenarioElementLibraryName

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stSimEntityMajorRevision
class stSimEntityMajorRevision (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stSimEntityMajorRevision')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 45, 2)
    _Documentation = None
stSimEntityMajorRevision._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stSimEntityMajorRevision, value=pyxb.binding.datatypes.int(1))
stSimEntityMajorRevision._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stSimEntityMajorRevision, value=pyxb.binding.datatypes.int(1))
stSimEntityMajorRevision._InitializeFacetMap(stSimEntityMajorRevision._CF_minInclusive,
   stSimEntityMajorRevision._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stSimEntityMajorRevision', stSimEntityMajorRevision)
_module_typeBindings.stSimEntityMajorRevision = stSimEntityMajorRevision

# Atomic simple type: {http://www.amherst.com/CEESIM/XML}stSimEntityMinorRevision
class stSimEntityMinorRevision (pyxb.binding.datatypes.int):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'stSimEntityMinorRevision')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 53, 2)
    _Documentation = None
stSimEntityMinorRevision._CF_minInclusive = pyxb.binding.facets.CF_minInclusive(value_datatype=stSimEntityMinorRevision, value=pyxb.binding.datatypes.int(0))
stSimEntityMinorRevision._CF_maxInclusive = pyxb.binding.facets.CF_maxInclusive(value_datatype=stSimEntityMinorRevision, value=pyxb.binding.datatypes.int(2))
stSimEntityMinorRevision._InitializeFacetMap(stSimEntityMinorRevision._CF_minInclusive,
   stSimEntityMinorRevision._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'stSimEntityMinorRevision', stSimEntityMinorRevision)
_module_typeBindings.stSimEntityMinorRevision = stSimEntityMinorRevision

# Complex type {http://www.amherst.com/CEESIM/XML}ctFlatEarthPoint with content type ELEMENT_ONLY
class ctFlatEarthPoint (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFlatEarthPoint with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFlatEarthPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 41, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}X uses Python identifier X
    __X = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'X'), 'X', '__httpwww_amherst_comCEESIMXML_ctFlatEarthPoint_httpwww_amherst_comCEESIMXMLX', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 43, 6), )

    
    X = property(__X.value, __X.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Y uses Python identifier Y
    __Y = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Y'), 'Y', '__httpwww_amherst_comCEESIMXML_ctFlatEarthPoint_httpwww_amherst_comCEESIMXMLY', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 44, 6), )

    
    Y = property(__Y.value, __Y.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Z uses Python identifier Z
    __Z = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Z'), 'Z', '__httpwww_amherst_comCEESIMXML_ctFlatEarthPoint_httpwww_amherst_comCEESIMXMLZ', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 45, 6), )

    
    Z = property(__Z.value, __Z.set, None, None)

    _ElementMap.update({
        __X.name() : __X,
        __Y.name() : __Y,
        __Z.name() : __Z
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFlatEarthPoint = ctFlatEarthPoint
Namespace.addCategoryObject('typeBinding', 'ctFlatEarthPoint', ctFlatEarthPoint)


# Complex type {http://www.amherst.com/CEESIM/XML}ctModificationHeader with content type ELEMENT_ONLY
class ctModificationHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctModificationHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctModificationHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 49, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationDate'), 'CreationDate', '__httpwww_amherst_comCEESIMXML_ctModificationHeader_httpwww_amherst_comCEESIMXMLCreationDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 51, 6), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModificationDate uses Python identifier ModificationDate
    __ModificationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate'), 'ModificationDate', '__httpwww_amherst_comCEESIMXML_ctModificationHeader_httpwww_amherst_comCEESIMXMLModificationDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 52, 6), )

    
    ModificationDate = property(__ModificationDate.value, __ModificationDate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Comment uses Python identifier Comment
    __Comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Comment'), 'Comment', '__httpwww_amherst_comCEESIMXML_ctModificationHeader_httpwww_amherst_comCEESIMXMLComment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 53, 6), )

    
    Comment = property(__Comment.value, __Comment.set, None, None)

    _ElementMap.update({
        __CreationDate.name() : __CreationDate,
        __ModificationDate.name() : __ModificationDate,
        __Comment.name() : __Comment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctModificationHeader = ctModificationHeader
Namespace.addCategoryObject('typeBinding', 'ctModificationHeader', ctModificationHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPoint with content type ELEMENT_ONLY
class ctPoint (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPoint with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 57, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}FlatEarthPoint uses Python identifier FlatEarthPoint
    __FlatEarthPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FlatEarthPoint'), 'FlatEarthPoint', '__httpwww_amherst_comCEESIMXML_ctPoint_httpwww_amherst_comCEESIMXMLFlatEarthPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 59, 6), )

    
    FlatEarthPoint = property(__FlatEarthPoint.value, __FlatEarthPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RoundEarthPoint uses Python identifier RoundEarthPoint
    __RoundEarthPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoundEarthPoint'), 'RoundEarthPoint', '__httpwww_amherst_comCEESIMXML_ctPoint_httpwww_amherst_comCEESIMXMLRoundEarthPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 60, 6), )

    
    RoundEarthPoint = property(__RoundEarthPoint.value, __RoundEarthPoint.set, None, None)

    _ElementMap.update({
        __FlatEarthPoint.name() : __FlatEarthPoint,
        __RoundEarthPoint.name() : __RoundEarthPoint
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPoint = ctPoint
Namespace.addCategoryObject('typeBinding', 'ctPoint', ctPoint)


# Complex type {http://www.amherst.com/CEESIM/XML}ctRoundEarthPoint with content type ELEMENT_ONLY
class ctRoundEarthPoint (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctRoundEarthPoint with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctRoundEarthPoint')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 64, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Latitude uses Python identifier Latitude
    __Latitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Latitude'), 'Latitude', '__httpwww_amherst_comCEESIMXML_ctRoundEarthPoint_httpwww_amherst_comCEESIMXMLLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 66, 6), )

    
    Latitude = property(__Latitude.value, __Latitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Longitude uses Python identifier Longitude
    __Longitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Longitude'), 'Longitude', '__httpwww_amherst_comCEESIMXML_ctRoundEarthPoint_httpwww_amherst_comCEESIMXMLLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 67, 6), )

    
    Longitude = property(__Longitude.value, __Longitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Altitude uses Python identifier Altitude
    __Altitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Altitude'), 'Altitude', '__httpwww_amherst_comCEESIMXML_ctRoundEarthPoint_httpwww_amherst_comCEESIMXMLAltitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 68, 6), )

    
    Altitude = property(__Altitude.value, __Altitude.set, None, None)

    _ElementMap.update({
        __Latitude.name() : __Latitude,
        __Longitude.name() : __Longitude,
        __Altitude.name() : __Altitude
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctRoundEarthPoint = ctRoundEarthPoint
Namespace.addCategoryObject('typeBinding', 'ctRoundEarthPoint', ctRoundEarthPoint)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterData with content type ELEMENT_ONLY
class ctEmitterData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 41, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterHeader uses Python identifier EmitterHeader
    __EmitterHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), 'EmitterHeader', '__httpwww_amherst_comCEESIMXML_ctEmitterData_httpwww_amherst_comCEESIMXMLEmitterHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 43, 6), )

    
    EmitterHeader = property(__EmitterHeader.value, __EmitterHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterScript uses Python identifier EmitterScript
    __EmitterScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript'), 'EmitterScript', '__httpwww_amherst_comCEESIMXML_ctEmitterData_httpwww_amherst_comCEESIMXMLEmitterScript', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 44, 6), )

    
    EmitterScript = property(__EmitterScript.value, __EmitterScript.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctEmitterData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 51, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 51, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmitterHeader.name() : __EmitterHeader,
        __EmitterScript.name() : __EmitterScript
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctEmitterData = ctEmitterData
Namespace.addCategoryObject('typeBinding', 'ctEmitterData', ctEmitterData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterHeader with content type ELEMENT_ONLY
class ctEmitterHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 54, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}UserEmitterNumber uses Python identifier UserEmitterNumber
    __UserEmitterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserEmitterNumber'), 'UserEmitterNumber', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLUserEmitterNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 56, 6), )

    
    UserEmitterNumber = property(__UserEmitterNumber.value, __UserEmitterNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterId uses Python identifier EmitterId
    __EmitterId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterId'), 'EmitterId', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLEmitterId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 57, 6), )

    
    EmitterId = property(__EmitterId.value, __EmitterId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterName uses Python identifier EmitterName
    __EmitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterName'), 'EmitterName', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLEmitterName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 58, 6), )

    
    EmitterName = property(__EmitterName.value, __EmitterName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}XOffset uses Python identifier XOffset
    __XOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'XOffset'), 'XOffset', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLXOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 59, 6), )

    
    XOffset = property(__XOffset.value, __XOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}YOffset uses Python identifier YOffset
    __YOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'YOffset'), 'YOffset', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLYOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 60, 6), )

    
    YOffset = property(__YOffset.value, __YOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ZOffset uses Python identifier ZOffset
    __ZOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ZOffset'), 'ZOffset', '__httpwww_amherst_comCEESIMXML_ctEmitterHeader_httpwww_amherst_comCEESIMXMLZOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 61, 6), )

    
    ZOffset = property(__ZOffset.value, __ZOffset.set, None, None)

    _ElementMap.update({
        __UserEmitterNumber.name() : __UserEmitterNumber,
        __EmitterId.name() : __EmitterId,
        __EmitterName.name() : __EmitterName,
        __XOffset.name() : __XOffset,
        __YOffset.name() : __YOffset,
        __ZOffset.name() : __ZOffset
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterHeader = ctEmitterHeader
Namespace.addCategoryObject('typeBinding', 'ctEmitterHeader', ctEmitterHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterScriptEventList with content type ELEMENT_ONLY
class ctEmitterScriptEventList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterScriptEventList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterScriptEventList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 65, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterScriptEvent uses Python identifier EmitterScriptEvent
    __EmitterScriptEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterScriptEvent'), 'EmitterScriptEvent', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEventList_httpwww_amherst_comCEESIMXMLEmitterScriptEvent', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 67, 6), )

    
    EmitterScriptEvent = property(__EmitterScriptEvent.value, __EmitterScriptEvent.set, None, None)

    _ElementMap.update({
        __EmitterScriptEvent.name() : __EmitterScriptEvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterScriptEventList = ctEmitterScriptEventList
Namespace.addCategoryObject('typeBinding', 'ctEmitterScriptEventList', ctEmitterScriptEventList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterScriptEvent with content type ELEMENT_ONLY
class ctEmitterScriptEvent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterScriptEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterScriptEvent')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 71, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EventNumber uses Python identifier EventNumber
    __EventNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventNumber'), 'EventNumber', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLEventNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 73, 6), )

    
    EventNumber = property(__EventNumber.value, __EventNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EventTime uses Python identifier EventTime
    __EventTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventTime'), 'EventTime', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLEventTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 74, 6), )

    
    EventTime = property(__EventTime.value, __EventTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EventType uses Python identifier EventType
    __EventType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EventType'), 'EventType', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLEventType', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 75, 6), )

    
    EventType = property(__EventType.value, __EventType.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModeName uses Python identifier ModeName
    __ModeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeName'), 'ModeName', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLModeName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 76, 6), )

    
    ModeName = property(__ModeName.value, __ModeName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RadiationState uses Python identifier RadiationState
    __RadiationState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RadiationState'), 'RadiationState', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLRadiationState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 77, 6), )

    
    RadiationState = property(__RadiationState.value, __RadiationState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ResyncOnModeChangeState uses Python identifier ResyncOnModeChangeState
    __ResyncOnModeChangeState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ResyncOnModeChangeState'), 'ResyncOnModeChangeState', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLResyncOnModeChangeState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 78, 6), )

    
    ResyncOnModeChangeState = property(__ResyncOnModeChangeState.value, __ResyncOnModeChangeState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChangeTracking uses Python identifier ChangeTracking
    __ChangeTracking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChangeTracking'), 'ChangeTracking', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLChangeTracking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 79, 6), )

    
    ChangeTracking = property(__ChangeTracking.value, __ChangeTracking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellDuration uses Python identifier DwellDuration
    __DwellDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellDuration'), 'DwellDuration', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLDwellDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 80, 6), )

    
    DwellDuration = property(__DwellDuration.value, __DwellDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TrackPlatformNumbers uses Python identifier TrackPlatformNumbers
    __TrackPlatformNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumbers'), 'TrackPlatformNumbers', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLTrackPlatformNumbers', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 81, 6), )

    
    TrackPlatformNumbers = property(__TrackPlatformNumbers.value, __TrackPlatformNumbers.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorEventDefined uses Python identifier GeneratorEventDefined
    __GeneratorEventDefined = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorEventDefined'), 'GeneratorEventDefined', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLGeneratorEventDefined', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 82, 6), )

    
    GeneratorEventDefined = property(__GeneratorEventDefined.value, __GeneratorEventDefined.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeEvents uses Python identifier RangeEvents
    __RangeEvents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeEvents'), 'RangeEvents', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLRangeEvents', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 84, 6), )

    
    RangeEvents = property(__RangeEvents.value, __RangeEvents.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorScriptEvents uses Python identifier GeneratorScriptEvents
    __GeneratorScriptEvents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvents'), 'GeneratorScriptEvents', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLGeneratorScriptEvents', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 85, 6), )

    
    GeneratorScriptEvents = property(__GeneratorScriptEvents.value, __GeneratorScriptEvents.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AssociatedSubmodeName uses Python identifier AssociatedSubmodeName
    __AssociatedSubmodeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssociatedSubmodeName'), 'AssociatedSubmodeName', '__httpwww_amherst_comCEESIMXML_ctEmitterScriptEvent_httpwww_amherst_comCEESIMXMLAssociatedSubmodeName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 86, 6), )

    
    AssociatedSubmodeName = property(__AssociatedSubmodeName.value, __AssociatedSubmodeName.set, None, None)

    _ElementMap.update({
        __EventNumber.name() : __EventNumber,
        __EventTime.name() : __EventTime,
        __EventType.name() : __EventType,
        __ModeName.name() : __ModeName,
        __RadiationState.name() : __RadiationState,
        __ResyncOnModeChangeState.name() : __ResyncOnModeChangeState,
        __ChangeTracking.name() : __ChangeTracking,
        __DwellDuration.name() : __DwellDuration,
        __TrackPlatformNumbers.name() : __TrackPlatformNumbers,
        __GeneratorEventDefined.name() : __GeneratorEventDefined,
        __RangeEvents.name() : __RangeEvents,
        __GeneratorScriptEvents.name() : __GeneratorScriptEvents,
        __AssociatedSubmodeName.name() : __AssociatedSubmodeName
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterScriptEvent = ctEmitterScriptEvent
Namespace.addCategoryObject('typeBinding', 'ctEmitterScriptEvent', ctEmitterScriptEvent)


# Complex type {http://www.amherst.com/CEESIM/XML}ctTrackPlatformNumberList with content type ELEMENT_ONLY
class ctTrackPlatformNumberList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctTrackPlatformNumberList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctTrackPlatformNumberList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 91, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}TrackPlatformNumber uses Python identifier TrackPlatformNumber
    __TrackPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumber'), 'TrackPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctTrackPlatformNumberList_httpwww_amherst_comCEESIMXMLTrackPlatformNumber', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 93, 6), )

    
    TrackPlatformNumber = property(__TrackPlatformNumber.value, __TrackPlatformNumber.set, None, None)

    _ElementMap.update({
        __TrackPlatformNumber.name() : __TrackPlatformNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctTrackPlatformNumberList = ctTrackPlatformNumberList
Namespace.addCategoryObject('typeBinding', 'ctTrackPlatformNumberList', ctTrackPlatformNumberList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctRangeEventList with content type ELEMENT_ONLY
class ctRangeEventList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctRangeEventList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctRangeEventList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 97, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}RangeEvent uses Python identifier RangeEvent
    __RangeEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeEvent'), 'RangeEvent', '__httpwww_amherst_comCEESIMXML_ctRangeEventList_httpwww_amherst_comCEESIMXMLRangeEvent', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 99, 6), )

    
    RangeEvent = property(__RangeEvent.value, __RangeEvent.set, None, None)

    _ElementMap.update({
        __RangeEvent.name() : __RangeEvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctRangeEventList = ctRangeEventList
Namespace.addCategoryObject('typeBinding', 'ctRangeEventList', ctRangeEventList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorScriptEventList with content type ELEMENT_ONLY
class ctGeneratorScriptEventList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorScriptEventList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGeneratorScriptEventList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 103, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorScriptEvent uses Python identifier GeneratorScriptEvent
    __GeneratorScriptEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvent'), 'GeneratorScriptEvent', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEventList_httpwww_amherst_comCEESIMXMLGeneratorScriptEvent', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 105, 6), )

    
    GeneratorScriptEvent = property(__GeneratorScriptEvent.value, __GeneratorScriptEvent.set, None, None)

    _ElementMap.update({
        __GeneratorScriptEvent.name() : __GeneratorScriptEvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGeneratorScriptEventList = ctGeneratorScriptEventList
Namespace.addCategoryObject('typeBinding', 'ctGeneratorScriptEventList', ctGeneratorScriptEventList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctRangeEvent with content type ELEMENT_ONLY
class ctRangeEvent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctRangeEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctRangeEvent')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 109, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}HighRange uses Python identifier HighRange
    __HighRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HighRange'), 'HighRange', '__httpwww_amherst_comCEESIMXML_ctRangeEvent_httpwww_amherst_comCEESIMXMLHighRange', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 111, 6), )

    
    HighRange = property(__HighRange.value, __HighRange.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeModeName uses Python identifier RangeModeName
    __RangeModeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeModeName'), 'RangeModeName', '__httpwww_amherst_comCEESIMXML_ctRangeEvent_httpwww_amherst_comCEESIMXMLRangeModeName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 112, 6), )

    
    RangeModeName = property(__RangeModeName.value, __RangeModeName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeRadiationState uses Python identifier RangeRadiationState
    __RangeRadiationState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeRadiationState'), 'RangeRadiationState', '__httpwww_amherst_comCEESIMXML_ctRangeEvent_httpwww_amherst_comCEESIMXMLRangeRadiationState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 113, 6), )

    
    RangeRadiationState = property(__RangeRadiationState.value, __RangeRadiationState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeResyncOnModeChangeState uses Python identifier RangeResyncOnModeChangeState
    __RangeResyncOnModeChangeState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeResyncOnModeChangeState'), 'RangeResyncOnModeChangeState', '__httpwww_amherst_comCEESIMXML_ctRangeEvent_httpwww_amherst_comCEESIMXMLRangeResyncOnModeChangeState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 114, 6), )

    
    RangeResyncOnModeChangeState = property(__RangeResyncOnModeChangeState.value, __RangeResyncOnModeChangeState.set, None, None)

    _ElementMap.update({
        __HighRange.name() : __HighRange,
        __RangeModeName.name() : __RangeModeName,
        __RangeRadiationState.name() : __RangeRadiationState,
        __RangeResyncOnModeChangeState.name() : __RangeResyncOnModeChangeState
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctRangeEvent = ctRangeEvent
Namespace.addCategoryObject('typeBinding', 'ctRangeEvent', ctRangeEvent)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorScriptEvent with content type ELEMENT_ONLY
class ctGeneratorScriptEvent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorScriptEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGeneratorScriptEvent')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 118, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorNumber uses Python identifier GeneratorNumber
    __GeneratorNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), 'GeneratorNumber', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLGeneratorNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 120, 6), )

    
    GeneratorNumber = property(__GeneratorNumber.value, __GeneratorNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorActive uses Python identifier GeneratorActive
    __GeneratorActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorActive'), 'GeneratorActive', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLGeneratorActive', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 121, 6), )

    
    GeneratorActive = property(__GeneratorActive.value, __GeneratorActive.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RadiationEnable uses Python identifier RadiationEnable
    __RadiationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RadiationEnable'), 'RadiationEnable', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLRadiationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 122, 6), )

    
    RadiationEnable = property(__RadiationEnable.value, __RadiationEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OverrideTrack uses Python identifier OverrideTrack
    __OverrideTrack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), 'OverrideTrack', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLOverrideTrack', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 123, 6), )

    
    OverrideTrack = property(__OverrideTrack.value, __OverrideTrack.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TrackEvents uses Python identifier TrackEvents
    __TrackEvents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents'), 'TrackEvents', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLTrackEvents', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 124, 6), )

    
    TrackEvents = property(__TrackEvents.value, __TrackEvents.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OverrideScanInterrupts uses Python identifier OverrideScanInterrupts
    __OverrideScanInterrupts = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideScanInterrupts'), 'OverrideScanInterrupts', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLOverrideScanInterrupts', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 125, 6), )

    
    OverrideScanInterrupts = property(__OverrideScanInterrupts.value, __OverrideScanInterrupts.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptRecords uses Python identifier InterruptRecords
    __InterruptRecords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecords'), 'InterruptRecords', '__httpwww_amherst_comCEESIMXML_ctGeneratorScriptEvent_httpwww_amherst_comCEESIMXMLInterruptRecords', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 126, 6), )

    
    InterruptRecords = property(__InterruptRecords.value, __InterruptRecords.set, None, None)

    _ElementMap.update({
        __GeneratorNumber.name() : __GeneratorNumber,
        __GeneratorActive.name() : __GeneratorActive,
        __RadiationEnable.name() : __RadiationEnable,
        __OverrideTrack.name() : __OverrideTrack,
        __TrackEvents.name() : __TrackEvents,
        __OverrideScanInterrupts.name() : __OverrideScanInterrupts,
        __InterruptRecords.name() : __InterruptRecords
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGeneratorScriptEvent = ctGeneratorScriptEvent
Namespace.addCategoryObject('typeBinding', 'ctGeneratorScriptEvent', ctGeneratorScriptEvent)


# Complex type {http://www.amherst.com/CEESIM/XML}ctTrackEventList with content type ELEMENT_ONLY
class ctTrackEventList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctTrackEventList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctTrackEventList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 130, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}TrackEvent uses Python identifier TrackEvent
    __TrackEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackEvent'), 'TrackEvent', '__httpwww_amherst_comCEESIMXML_ctTrackEventList_httpwww_amherst_comCEESIMXMLTrackEvent', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 132, 6), )

    
    TrackEvent = property(__TrackEvent.value, __TrackEvent.set, None, None)

    _ElementMap.update({
        __TrackEvent.name() : __TrackEvent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctTrackEventList = ctTrackEventList
Namespace.addCategoryObject('typeBinding', 'ctTrackEventList', ctTrackEventList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctTrackEvent with content type ELEMENT_ONLY
class ctTrackEvent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctTrackEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctTrackEvent')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 136, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}OverrideTrack uses Python identifier OverrideTrack
    __OverrideTrack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), 'OverrideTrack', '__httpwww_amherst_comCEESIMXML_ctTrackEvent_httpwww_amherst_comCEESIMXMLOverrideTrack', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 138, 6), )

    
    OverrideTrack = property(__OverrideTrack.value, __OverrideTrack.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NewTrackPlatform uses Python identifier NewTrackPlatform
    __NewTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NewTrackPlatform'), 'NewTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctTrackEvent_httpwww_amherst_comCEESIMXMLNewTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 139, 6), )

    
    NewTrackPlatform = property(__NewTrackPlatform.value, __NewTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OldTrackDataValid uses Python identifier OldTrackDataValid
    __OldTrackDataValid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OldTrackDataValid'), 'OldTrackDataValid', '__httpwww_amherst_comCEESIMXML_ctTrackEvent_httpwww_amherst_comCEESIMXMLOldTrackDataValid', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 140, 6), )

    
    OldTrackDataValid = property(__OldTrackDataValid.value, __OldTrackDataValid.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OldTrackIsSut uses Python identifier OldTrackIsSut
    __OldTrackIsSut = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OldTrackIsSut'), 'OldTrackIsSut', '__httpwww_amherst_comCEESIMXML_ctTrackEvent_httpwww_amherst_comCEESIMXMLOldTrackIsSut', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 141, 6), )

    
    OldTrackIsSut = property(__OldTrackIsSut.value, __OldTrackIsSut.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OldTrackPlatform uses Python identifier OldTrackPlatform
    __OldTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OldTrackPlatform'), 'OldTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctTrackEvent_httpwww_amherst_comCEESIMXMLOldTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 142, 6), )

    
    OldTrackPlatform = property(__OldTrackPlatform.value, __OldTrackPlatform.set, None, None)

    _ElementMap.update({
        __OverrideTrack.name() : __OverrideTrack,
        __NewTrackPlatform.name() : __NewTrackPlatform,
        __OldTrackDataValid.name() : __OldTrackDataValid,
        __OldTrackIsSut.name() : __OldTrackIsSut,
        __OldTrackPlatform.name() : __OldTrackPlatform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctTrackEvent = ctTrackEvent
Namespace.addCategoryObject('typeBinding', 'ctTrackEvent', ctTrackEvent)


# Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptRecordList with content type ELEMENT_ONLY
class ctInterruptRecordList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptRecordList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctInterruptRecordList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 146, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptRecord uses Python identifier InterruptRecord
    __InterruptRecord = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecord'), 'InterruptRecord', '__httpwww_amherst_comCEESIMXML_ctInterruptRecordList_httpwww_amherst_comCEESIMXMLInterruptRecord', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 148, 6), )

    
    InterruptRecord = property(__InterruptRecord.value, __InterruptRecord.set, None, None)

    _ElementMap.update({
        __InterruptRecord.name() : __InterruptRecord
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctInterruptRecordList = ctInterruptRecordList
Namespace.addCategoryObject('typeBinding', 'ctInterruptRecordList', ctInterruptRecordList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptRecord with content type ELEMENT_ONLY
class ctInterruptRecord (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptRecord with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctInterruptRecord')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 152, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}OverrideInterruptGenerators uses Python identifier OverrideInterruptGenerators
    __OverrideInterruptGenerators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideInterruptGenerators'), 'OverrideInterruptGenerators', '__httpwww_amherst_comCEESIMXML_ctInterruptRecord_httpwww_amherst_comCEESIMXMLOverrideInterruptGenerators', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 154, 6), )

    
    OverrideInterruptGenerators = property(__OverrideInterruptGenerators.value, __OverrideInterruptGenerators.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptActive uses Python identifier InterruptActive
    __InterruptActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptActive'), 'InterruptActive', '__httpwww_amherst_comCEESIMXML_ctInterruptRecord_httpwww_amherst_comCEESIMXMLInterruptActive', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 155, 6), )

    
    InterruptActive = property(__InterruptActive.value, __InterruptActive.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorNumber uses Python identifier InterruptGeneratorNumber
    __InterruptGeneratorNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorNumber'), 'InterruptGeneratorNumber', '__httpwww_amherst_comCEESIMXML_ctInterruptRecord_httpwww_amherst_comCEESIMXMLInterruptGeneratorNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 156, 6), )

    
    InterruptGeneratorNumber = property(__InterruptGeneratorNumber.value, __InterruptGeneratorNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}OverrideTrack uses Python identifier OverrideTrack
    __OverrideTrack = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), 'OverrideTrack', '__httpwww_amherst_comCEESIMXML_ctInterruptRecord_httpwww_amherst_comCEESIMXMLOverrideTrack', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 157, 6), )

    
    OverrideTrack = property(__OverrideTrack.value, __OverrideTrack.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TrackEvents uses Python identifier TrackEvents
    __TrackEvents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents'), 'TrackEvents', '__httpwww_amherst_comCEESIMXML_ctInterruptRecord_httpwww_amherst_comCEESIMXMLTrackEvents', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 158, 6), )

    
    TrackEvents = property(__TrackEvents.value, __TrackEvents.set, None, None)

    _ElementMap.update({
        __OverrideInterruptGenerators.name() : __OverrideInterruptGenerators,
        __InterruptActive.name() : __InterruptActive,
        __InterruptGeneratorNumber.name() : __InterruptGeneratorNumber,
        __OverrideTrack.name() : __OverrideTrack,
        __TrackEvents.name() : __TrackEvents
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctInterruptRecord = ctInterruptRecord
Namespace.addCategoryObject('typeBinding', 'ctInterruptRecord', ctInterruptRecord)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterMode with content type ELEMENT_ONLY
class ctEmitterMode (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterMode with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterMode')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 55, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterModeHeader uses Python identifier EmitterModeHeader
    __EmitterModeHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterModeHeader'), 'EmitterModeHeader', '__httpwww_amherst_comCEESIMXML_ctEmitterMode_httpwww_amherst_comCEESIMXMLEmitterModeHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 57, 6), )

    
    EmitterModeHeader = property(__EmitterModeHeader.value, __EmitterModeHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Generators uses Python identifier Generators
    __Generators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Generators'), 'Generators', '__httpwww_amherst_comCEESIMXML_ctEmitterMode_httpwww_amherst_comCEESIMXMLGenerators', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 58, 6), )

    
    Generators = property(__Generators.value, __Generators.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterSubmodes uses Python identifier EmitterSubmodes
    __EmitterSubmodes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodes'), 'EmitterSubmodes', '__httpwww_amherst_comCEESIMXML_ctEmitterMode_httpwww_amherst_comCEESIMXMLEmitterSubmodes', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 64, 6), )

    
    EmitterSubmodes = property(__EmitterSubmodes.value, __EmitterSubmodes.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctEmitterMode_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 75, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 75, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmitterModeHeader.name() : __EmitterModeHeader,
        __Generators.name() : __Generators,
        __EmitterSubmodes.name() : __EmitterSubmodes
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctEmitterMode = ctEmitterMode
Namespace.addCategoryObject('typeBinding', 'ctEmitterMode', ctEmitterMode)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterModeHeader with content type ELEMENT_ONLY
class ctEmitterModeHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterModeHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterModeHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 78, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ModeName uses Python identifier ModeName
    __ModeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeName'), 'ModeName', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLModeName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 80, 6), )

    
    ModeName = property(__ModeName.value, __ModeName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LastUpdateDate uses Python identifier LastUpdateDate
    __LastUpdateDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate'), 'LastUpdateDate', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLLastUpdateDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 81, 6), )

    
    LastUpdateDate = property(__LastUpdateDate.value, __LastUpdateDate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModeComment uses Python identifier ModeComment
    __ModeComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeComment'), 'ModeComment', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLModeComment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 82, 6), )

    
    ModeComment = property(__ModeComment.value, __ModeComment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModeProtectionSwitch uses Python identifier ModeProtectionSwitch
    __ModeProtectionSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeProtectionSwitch'), 'ModeProtectionSwitch', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLModeProtectionSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 83, 6), )

    
    ModeProtectionSwitch = property(__ModeProtectionSwitch.value, __ModeProtectionSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SensitivityOverride uses Python identifier SensitivityOverride
    __SensitivityOverride = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SensitivityOverride'), 'SensitivityOverride', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLSensitivityOverride', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 84, 6), )

    
    SensitivityOverride = property(__SensitivityOverride.value, __SensitivityOverride.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriorityKind uses Python identifier PriorityKind
    __PriorityKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind'), 'PriorityKind', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPriorityKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 85, 6), )

    
    PriorityKind = property(__PriorityKind.value, __PriorityKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GpAssigned uses Python identifier GpAssigned
    __GpAssigned = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GpAssigned'), 'GpAssigned', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLGpAssigned', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 86, 6), )

    
    GpAssigned = property(__GpAssigned.value, __GpAssigned.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GpPooled uses Python identifier GpPooled
    __GpPooled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GpPooled'), 'GpPooled', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLGpPooled', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 87, 6), )

    
    GpPooled = property(__GpPooled.value, __GpPooled.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GpOrPoolNumber uses Python identifier GpOrPoolNumber
    __GpOrPoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GpOrPoolNumber'), 'GpOrPoolNumber', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLGpOrPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 88, 6), )

    
    GpOrPoolNumber = property(__GpOrPoolNumber.value, __GpOrPoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JammerStatus uses Python identifier JammerStatus
    __JammerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JammerStatus'), 'JammerStatus', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLJammerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 89, 6), )

    
    JammerStatus = property(__JammerStatus.value, __JammerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 90, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 91, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 92, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 93, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 94, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 95, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DigitalVideoTestPoint uses Python identifier DigitalVideoTestPoint
    __DigitalVideoTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint'), 'DigitalVideoTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLDigitalVideoTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 96, 6), )

    
    DigitalVideoTestPoint = property(__DigitalVideoTestPoint.value, __DigitalVideoTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelVideoTestPoint uses Python identifier ChannelVideoTestPoint
    __ChannelVideoTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint'), 'ChannelVideoTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLChannelVideoTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 97, 6), )

    
    ChannelVideoTestPoint = property(__ChannelVideoTestPoint.value, __ChannelVideoTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelAudioTestPoint uses Python identifier ChannelAudioTestPoint
    __ChannelAudioTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint'), 'ChannelAudioTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLChannelAudioTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 98, 6), )

    
    ChannelAudioTestPoint = property(__ChannelAudioTestPoint.value, __ChannelAudioTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RfBlankingVideoTestPoint uses Python identifier RfBlankingVideoTestPoint
    __RfBlankingVideoTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RfBlankingVideoTestPoint'), 'RfBlankingVideoTestPoint', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLRfBlankingVideoTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 99, 6), )

    
    RfBlankingVideoTestPoint = property(__RfBlankingVideoTestPoint.value, __RfBlankingVideoTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SiteId uses Python identifier SiteId
    __SiteId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SiteId'), 'SiteId', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLSiteId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 100, 6), )

    
    SiteId = property(__SiteId.value, __SiteId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 101, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalModeId uses Python identifier ExternalModeId
    __ExternalModeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalModeId'), 'ExternalModeId', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLExternalModeId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 102, 6), )

    
    ExternalModeId = property(__ExternalModeId.value, __ExternalModeId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PgpDefaultMode uses Python identifier PgpDefaultMode
    __PgpDefaultMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode'), 'PgpDefaultMode', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPgpDefaultMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 103, 6), )

    
    PgpDefaultMode = property(__PgpDefaultMode.value, __PgpDefaultMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PgpDropTrackMode uses Python identifier PgpDropTrackMode
    __PgpDropTrackMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode'), 'PgpDropTrackMode', '__httpwww_amherst_comCEESIMXML_ctEmitterModeHeader_httpwww_amherst_comCEESIMXMLPgpDropTrackMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 104, 6), )

    
    PgpDropTrackMode = property(__PgpDropTrackMode.value, __PgpDropTrackMode.set, None, None)

    _ElementMap.update({
        __ModeName.name() : __ModeName,
        __LastUpdateDate.name() : __LastUpdateDate,
        __ModeComment.name() : __ModeComment,
        __ModeProtectionSwitch.name() : __ModeProtectionSwitch,
        __SensitivityOverride.name() : __SensitivityOverride,
        __PriorityKind.name() : __PriorityKind,
        __GpAssigned.name() : __GpAssigned,
        __GpPooled.name() : __GpPooled,
        __GpOrPoolNumber.name() : __GpOrPoolNumber,
        __JammerStatus.name() : __JammerStatus,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __DigitalVideoTestPoint.name() : __DigitalVideoTestPoint,
        __ChannelVideoTestPoint.name() : __ChannelVideoTestPoint,
        __ChannelAudioTestPoint.name() : __ChannelAudioTestPoint,
        __RfBlankingVideoTestPoint.name() : __RfBlankingVideoTestPoint,
        __SiteId.name() : __SiteId,
        __VirtualNumber.name() : __VirtualNumber,
        __ExternalModeId.name() : __ExternalModeId,
        __PgpDefaultMode.name() : __PgpDefaultMode,
        __PgpDropTrackMode.name() : __PgpDropTrackMode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterModeHeader = ctEmitterModeHeader
Namespace.addCategoryObject('typeBinding', 'ctEmitterModeHeader', ctEmitterModeHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorList with content type ELEMENT_ONLY
class ctGeneratorList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGeneratorList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Generator uses Python identifier Generator
    __Generator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Generator'), 'Generator', '__httpwww_amherst_comCEESIMXML_ctGeneratorList_httpwww_amherst_comCEESIMXMLGenerator', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 110, 6), )

    
    Generator = property(__Generator.value, __Generator.set, None, None)

    _ElementMap.update({
        __Generator.name() : __Generator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGeneratorList = ctGeneratorList
Namespace.addCategoryObject('typeBinding', 'ctGeneratorList', ctGeneratorList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmodeList with content type ELEMENT_ONLY
class ctEmitterSubmodeList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmodeList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterSubmodeList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 131, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterSubmode uses Python identifier EmitterSubmode
    __EmitterSubmode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmode'), 'EmitterSubmode', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmodeList_httpwww_amherst_comCEESIMXMLEmitterSubmode', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 133, 6), )

    
    EmitterSubmode = property(__EmitterSubmode.value, __EmitterSubmode.set, None, None)

    _ElementMap.update({
        __EmitterSubmode.name() : __EmitterSubmode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterSubmodeList = ctEmitterSubmodeList
Namespace.addCategoryObject('typeBinding', 'ctEmitterSubmodeList', ctEmitterSubmodeList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGenerator with content type ELEMENT_ONLY
class ctGenerator (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGenerator with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGenerator')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 137, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorNumber uses Python identifier GeneratorNumber
    __GeneratorNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), 'GeneratorNumber', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLGeneratorNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 139, 6), )

    
    GeneratorNumber = property(__GeneratorNumber.value, __GeneratorNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorName uses Python identifier GeneratorName
    __GeneratorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorName'), 'GeneratorName', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLGeneratorName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 140, 6), )

    
    GeneratorName = property(__GeneratorName.value, __GeneratorName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorKind uses Python identifier GeneratorKind
    __GeneratorKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorKind'), 'GeneratorKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLGeneratorKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 141, 6), )

    
    GeneratorKind = property(__GeneratorKind.value, __GeneratorKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorComment uses Python identifier GeneratorComment
    __GeneratorComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorComment'), 'GeneratorComment', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLGeneratorComment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 142, 6), )

    
    GeneratorComment = property(__GeneratorComment.value, __GeneratorComment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriorityKind uses Python identifier PriorityKind
    __PriorityKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind'), 'PriorityKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriorityKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 143, 6), )

    
    PriorityKind = property(__PriorityKind.value, __PriorityKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriCrystalValue uses Python identifier PriCrystalValue
    __PriCrystalValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriCrystalValue'), 'PriCrystalValue', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriCrystalValue', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 144, 6), )

    
    PriCrystalValue = property(__PriCrystalValue.value, __PriCrystalValue.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FreqChannelization uses Python identifier FreqChannelization
    __FreqChannelization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FreqChannelization'), 'FreqChannelization', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLFreqChannelization', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 145, 6), )

    
    FreqChannelization = property(__FreqChannelization.value, __FreqChannelization.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModeTransitionPeriodActive uses Python identifier ModeTransitionPeriodActive
    __ModeTransitionPeriodActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriodActive'), 'ModeTransitionPeriodActive', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLModeTransitionPeriodActive', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 146, 6), )

    
    ModeTransitionPeriodActive = property(__ModeTransitionPeriodActive.value, __ModeTransitionPeriodActive.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModeTransitionPeriod uses Python identifier ModeTransitionPeriod
    __ModeTransitionPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriod'), 'ModeTransitionPeriod', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLModeTransitionPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 147, 6), )

    
    ModeTransitionPeriod = property(__ModeTransitionPeriod.value, __ModeTransitionPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntDurOverrideActive uses Python identifier IntDurOverrideActive
    __IntDurOverrideActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideActive'), 'IntDurOverrideActive', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLIntDurOverrideActive', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 148, 6), )

    
    IntDurOverrideActive = property(__IntDurOverrideActive.value, __IntDurOverrideActive.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntDurOverrideKind uses Python identifier IntDurOverrideKind
    __IntDurOverrideKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideKind'), 'IntDurOverrideKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLIntDurOverrideKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 149, 6), )

    
    IntDurOverrideKind = property(__IntDurOverrideKind.value, __IntDurOverrideKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntDurOverrideTime uses Python identifier IntDurOverrideTime
    __IntDurOverrideTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideTime'), 'IntDurOverrideTime', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLIntDurOverrideTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 150, 6), )

    
    IntDurOverrideTime = property(__IntDurOverrideTime.value, __IntDurOverrideTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntDurOverridePulses uses Python identifier IntDurOverridePulses
    __IntDurOverridePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverridePulses'), 'IntDurOverridePulses', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLIntDurOverridePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 151, 6), )

    
    IntDurOverridePulses = property(__IntDurOverridePulses.value, __IntDurOverridePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTime uses Python identifier DelayTime
    __DelayTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTime'), 'DelayTime', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 152, 6), )

    
    DelayTime = property(__DelayTime.value, __DelayTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeJitterStatus uses Python identifier DelayTimeJitterStatus
    __DelayTimeJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterStatus'), 'DelayTimeJitterStatus', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 153, 6), )

    
    DelayTimeJitterStatus = property(__DelayTimeJitterStatus.value, __DelayTimeJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeJitterLimit uses Python identifier DelayTimeJitterLimit
    __DelayTimeJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterLimit'), 'DelayTimeJitterLimit', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 154, 6), )

    
    DelayTimeJitterLimit = property(__DelayTimeJitterLimit.value, __DelayTimeJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeJitterDstrbKind uses Python identifier DelayTimeJitterDstrbKind
    __DelayTimeJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterDstrbKind'), 'DelayTimeJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 155, 6), )

    
    DelayTimeJitterDstrbKind = property(__DelayTimeJitterDstrbKind.value, __DelayTimeJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeJitterResSwitch uses Python identifier DelayTimeJitterResSwitch
    __DelayTimeJitterResSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterResSwitch'), 'DelayTimeJitterResSwitch', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeJitterResSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 156, 6), )

    
    DelayTimeJitterResSwitch = property(__DelayTimeJitterResSwitch.value, __DelayTimeJitterResSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModStatus uses Python identifier DelayTimeModStatus
    __DelayTimeModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModStatus'), 'DelayTimeModStatus', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 157, 6), )

    
    DelayTimeModStatus = property(__DelayTimeModStatus.value, __DelayTimeModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModPatternKind uses Python identifier DelayTimeModPatternKind
    __DelayTimeModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPatternKind'), 'DelayTimeModPatternKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 158, 6), )

    
    DelayTimeModPatternKind = property(__DelayTimeModPatternKind.value, __DelayTimeModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModAmp uses Python identifier DelayTimeModAmp
    __DelayTimeModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModAmp'), 'DelayTimeModAmp', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 159, 6), )

    
    DelayTimeModAmp = property(__DelayTimeModAmp.value, __DelayTimeModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModPeriodKind uses Python identifier DelayTimeModPeriodKind
    __DelayTimeModPeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodKind'), 'DelayTimeModPeriodKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModPeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 160, 6), )

    
    DelayTimeModPeriodKind = property(__DelayTimeModPeriodKind.value, __DelayTimeModPeriodKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModPeriodPulses uses Python identifier DelayTimeModPeriodPulses
    __DelayTimeModPeriodPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodPulses'), 'DelayTimeModPeriodPulses', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModPeriodPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 161, 6), )

    
    DelayTimeModPeriodPulses = property(__DelayTimeModPeriodPulses.value, __DelayTimeModPeriodPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModPeriod uses Python identifier DelayTimeModPeriod
    __DelayTimeModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriod'), 'DelayTimeModPeriod', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 162, 6), )

    
    DelayTimeModPeriod = property(__DelayTimeModPeriod.value, __DelayTimeModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DelayTimeModPeriodSync uses Python identifier DelayTimeModPeriodSync
    __DelayTimeModPeriodSync = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodSync'), 'DelayTimeModPeriodSync', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDelayTimeModPeriodSync', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 163, 6), )

    
    DelayTimeModPeriodSync = property(__DelayTimeModPeriodSync.value, __DelayTimeModPeriodSync.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtJitterStatus uses Python identifier SecDtJitterStatus
    __SecDtJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterStatus'), 'SecDtJitterStatus', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 164, 6), )

    
    SecDtJitterStatus = property(__SecDtJitterStatus.value, __SecDtJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtJitterLimit uses Python identifier SecDtJitterLimit
    __SecDtJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterLimit'), 'SecDtJitterLimit', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 165, 6), )

    
    SecDtJitterLimit = property(__SecDtJitterLimit.value, __SecDtJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtJitterDstrbKind uses Python identifier SecDtJitterDstrbKind
    __SecDtJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterDstrbKind'), 'SecDtJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 166, 6), )

    
    SecDtJitterDstrbKind = property(__SecDtJitterDstrbKind.value, __SecDtJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtModStatus uses Python identifier SecDtModStatus
    __SecDtModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtModStatus'), 'SecDtModStatus', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 167, 6), )

    
    SecDtModStatus = property(__SecDtModStatus.value, __SecDtModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtModPatternKind uses Python identifier SecDtModPatternKind
    __SecDtModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPatternKind'), 'SecDtModPatternKind', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 168, 6), )

    
    SecDtModPatternKind = property(__SecDtModPatternKind.value, __SecDtModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtModAmp uses Python identifier SecDtModAmp
    __SecDtModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtModAmp'), 'SecDtModAmp', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 169, 6), )

    
    SecDtModAmp = property(__SecDtModAmp.value, __SecDtModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecDtModPeriod uses Python identifier SecDtModPeriod
    __SecDtModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPeriod'), 'SecDtModPeriod', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLSecDtModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 170, 6), )

    
    SecDtModPeriod = property(__SecDtModPeriod.value, __SecDtModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RfBlanking uses Python identifier RfBlanking
    __RfBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RfBlanking'), 'RfBlanking', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLRfBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 171, 6), )

    
    RfBlanking = property(__RfBlanking.value, __RfBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TestPointChannelNumber uses Python identifier TestPointChannelNumber
    __TestPointChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TestPointChannelNumber'), 'TestPointChannelNumber', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLTestPointChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 172, 6), )

    
    TestPointChannelNumber = property(__TestPointChannelNumber.value, __TestPointChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 173, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 174, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 175, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 176, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 177, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 178, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DigitalVideoTestPoint uses Python identifier DigitalVideoTestPoint
    __DigitalVideoTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint'), 'DigitalVideoTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLDigitalVideoTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 179, 6), )

    
    DigitalVideoTestPoint = property(__DigitalVideoTestPoint.value, __DigitalVideoTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelVideoTestPoint uses Python identifier ChannelVideoTestPoint
    __ChannelVideoTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint'), 'ChannelVideoTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLChannelVideoTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 180, 6), )

    
    ChannelVideoTestPoint = property(__ChannelVideoTestPoint.value, __ChannelVideoTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelAudioTestPoint uses Python identifier ChannelAudioTestPoint
    __ChannelAudioTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint'), 'ChannelAudioTestPoint', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLChannelAudioTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 181, 6), )

    
    ChannelAudioTestPoint = property(__ChannelAudioTestPoint.value, __ChannelAudioTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSequence uses Python identifier PriSequence
    __PriSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSequence'), 'PriSequence', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPriSequence', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 183, 6), )

    
    PriSequence = property(__PriSequence.value, __PriSequence.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySequence uses Python identifier FrequencySequence
    __FrequencySequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySequence'), 'FrequencySequence', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLFrequencySequence', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 184, 6), )

    
    FrequencySequence = property(__FrequencySequence.value, __FrequencySequence.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSequence uses Python identifier ScanSequence
    __ScanSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSequence'), 'ScanSequence', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLScanSequence', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 185, 6), )

    
    ScanSequence = property(__ScanSequence.value, __ScanSequence.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseSequence uses Python identifier PulseSequence
    __PulseSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseSequence'), 'PulseSequence', '__httpwww_amherst_comCEESIMXML_ctGenerator_httpwww_amherst_comCEESIMXMLPulseSequence', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 186, 6), )

    
    PulseSequence = property(__PulseSequence.value, __PulseSequence.set, None, None)

    _ElementMap.update({
        __GeneratorNumber.name() : __GeneratorNumber,
        __GeneratorName.name() : __GeneratorName,
        __GeneratorKind.name() : __GeneratorKind,
        __GeneratorComment.name() : __GeneratorComment,
        __PriorityKind.name() : __PriorityKind,
        __PriCrystalValue.name() : __PriCrystalValue,
        __FreqChannelization.name() : __FreqChannelization,
        __ModeTransitionPeriodActive.name() : __ModeTransitionPeriodActive,
        __ModeTransitionPeriod.name() : __ModeTransitionPeriod,
        __IntDurOverrideActive.name() : __IntDurOverrideActive,
        __IntDurOverrideKind.name() : __IntDurOverrideKind,
        __IntDurOverrideTime.name() : __IntDurOverrideTime,
        __IntDurOverridePulses.name() : __IntDurOverridePulses,
        __DelayTime.name() : __DelayTime,
        __DelayTimeJitterStatus.name() : __DelayTimeJitterStatus,
        __DelayTimeJitterLimit.name() : __DelayTimeJitterLimit,
        __DelayTimeJitterDstrbKind.name() : __DelayTimeJitterDstrbKind,
        __DelayTimeJitterResSwitch.name() : __DelayTimeJitterResSwitch,
        __DelayTimeModStatus.name() : __DelayTimeModStatus,
        __DelayTimeModPatternKind.name() : __DelayTimeModPatternKind,
        __DelayTimeModAmp.name() : __DelayTimeModAmp,
        __DelayTimeModPeriodKind.name() : __DelayTimeModPeriodKind,
        __DelayTimeModPeriodPulses.name() : __DelayTimeModPeriodPulses,
        __DelayTimeModPeriod.name() : __DelayTimeModPeriod,
        __DelayTimeModPeriodSync.name() : __DelayTimeModPeriodSync,
        __SecDtJitterStatus.name() : __SecDtJitterStatus,
        __SecDtJitterLimit.name() : __SecDtJitterLimit,
        __SecDtJitterDstrbKind.name() : __SecDtJitterDstrbKind,
        __SecDtModStatus.name() : __SecDtModStatus,
        __SecDtModPatternKind.name() : __SecDtModPatternKind,
        __SecDtModAmp.name() : __SecDtModAmp,
        __SecDtModPeriod.name() : __SecDtModPeriod,
        __RfBlanking.name() : __RfBlanking,
        __TestPointChannelNumber.name() : __TestPointChannelNumber,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __DigitalVideoTestPoint.name() : __DigitalVideoTestPoint,
        __ChannelVideoTestPoint.name() : __ChannelVideoTestPoint,
        __ChannelAudioTestPoint.name() : __ChannelAudioTestPoint,
        __PriSequence.name() : __PriSequence,
        __FrequencySequence.name() : __FrequencySequence,
        __ScanSequence.name() : __ScanSequence,
        __PulseSequence.name() : __PulseSequence
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGenerator = ctGenerator
Namespace.addCategoryObject('typeBinding', 'ctGenerator', ctGenerator)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSequence with content type ELEMENT_ONLY
class ctPriSequence (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSequence with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSequence')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 190, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentSingle uses Python identifier PriSegmentSingle
    __PriSegmentSingle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentSingle'), 'PriSegmentSingle', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentSingle', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 193, 6), )

    
    PriSegmentSingle = property(__PriSegmentSingle.value, __PriSegmentSingle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentDwell uses Python identifier PriSegmentDwell
    __PriSegmentDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDwell'), 'PriSegmentDwell', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentDwell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 194, 6), )

    
    PriSegmentDwell = property(__PriSegmentDwell.value, __PriSegmentDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentPeriodic uses Python identifier PriSegmentPeriodic
    __PriSegmentPeriodic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentPeriodic'), 'PriSegmentPeriodic', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentPeriodic', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 195, 6), )

    
    PriSegmentPeriodic = property(__PriSegmentPeriodic.value, __PriSegmentPeriodic.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentStaggered uses Python identifier PriSegmentStaggered
    __PriSegmentStaggered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentStaggered'), 'PriSegmentStaggered', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentStaggered', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 196, 6), )

    
    PriSegmentStaggered = property(__PriSegmentStaggered.value, __PriSegmentStaggered.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentDiscreteJitter uses Python identifier PriSegmentDiscreteJitter
    __PriSegmentDiscreteJitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDiscreteJitter'), 'PriSegmentDiscreteJitter', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentDiscreteJitter', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 197, 6), )

    
    PriSegmentDiscreteJitter = property(__PriSegmentDiscreteJitter.value, __PriSegmentDiscreteJitter.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriSegmentCw uses Python identifier PriSegmentCw
    __PriSegmentCw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentCw'), 'PriSegmentCw', '__httpwww_amherst_comCEESIMXML_ctPriSequence_httpwww_amherst_comCEESIMXMLPriSegmentCw', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 198, 6), )

    
    PriSegmentCw = property(__PriSegmentCw.value, __PriSegmentCw.set, None, None)

    _ElementMap.update({
        __PriSegmentSingle.name() : __PriSegmentSingle,
        __PriSegmentDwell.name() : __PriSegmentDwell,
        __PriSegmentPeriodic.name() : __PriSegmentPeriodic,
        __PriSegmentStaggered.name() : __PriSegmentStaggered,
        __PriSegmentDiscreteJitter.name() : __PriSegmentDiscreteJitter,
        __PriSegmentCw.name() : __PriSegmentCw
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSequence = ctPriSequence
Namespace.addCategoryObject('typeBinding', 'ctPriSequence', ctPriSequence)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentSingle with content type ELEMENT_ONLY
class ctPriSegmentSingle (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentSingle with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentSingle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 202, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 204, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 205, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ComplexPriState uses Python identifier ComplexPriState
    __ComplexPriState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriState'), 'ComplexPriState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLComplexPriState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 206, 6), )

    
    ComplexPriState = property(__ComplexPriState.value, __ComplexPriState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ComplexPriEntryId uses Python identifier ComplexPriEntryId
    __ComplexPriEntryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriEntryId'), 'ComplexPriEntryId', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLComplexPriEntryId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 207, 6), )

    
    ComplexPriEntryId = property(__ComplexPriEntryId.value, __ComplexPriEntryId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Pri uses Python identifier Pri
    __Pri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pri'), 'Pri', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 208, 6), )

    
    Pri = property(__Pri.value, __Pri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterStatus uses Python identifier JitterStatus
    __JitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), 'JitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 209, 6), )

    
    JitterStatus = property(__JitterStatus.value, __JitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 210, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbKind uses Python identifier JitterDstrbKind
    __JitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), 'JitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 211, 6), )

    
    JitterDstrbKind = property(__JitterDstrbKind.value, __JitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterResSwitch uses Python identifier JitterResSwitch
    __JitterResSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), 'JitterResSwitch', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLJitterResSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 212, 6), )

    
    JitterResSwitch = property(__JitterResSwitch.value, __JitterResSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterState uses Python identifier ClockedPriJitterState
    __ClockedPriJitterState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState'), 'ClockedPriJitterState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLClockedPriJitterState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 213, 6), )

    
    ClockedPriJitterState = property(__ClockedPriJitterState.value, __ClockedPriJitterState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterExcursion uses Python identifier ClockedPriJitterExcursion
    __ClockedPriJitterExcursion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion'), 'ClockedPriJitterExcursion', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLClockedPriJitterExcursion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 214, 6), )

    
    ClockedPriJitterExcursion = property(__ClockedPriJitterExcursion.value, __ClockedPriJitterExcursion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterVariance uses Python identifier ClockedPriJitterVariance
    __ClockedPriJitterVariance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance'), 'ClockedPriJitterVariance', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLClockedPriJitterVariance', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 215, 6), )

    
    ClockedPriJitterVariance = property(__ClockedPriJitterVariance.value, __ClockedPriJitterVariance.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 216, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MissingPulseFactor uses Python identifier MissingPulseFactor
    __MissingPulseFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), 'MissingPulseFactor', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLMissingPulseFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 217, 6), )

    
    MissingPulseFactor = property(__MissingPulseFactor.value, __MissingPulseFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 218, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 219, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 220, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 221, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 222, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 223, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 224, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarSequenceTriggerState uses Python identifier EarSequenceTriggerState
    __EarSequenceTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), 'EarSequenceTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLEarSequenceTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 225, 6), )

    
    EarSequenceTriggerState = property(__EarSequenceTriggerState.value, __EarSequenceTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorTriggerState uses Python identifier GeneratorTriggerState
    __GeneratorTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), 'GeneratorTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLGeneratorTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 226, 6), )

    
    GeneratorTriggerState = property(__GeneratorTriggerState.value, __GeneratorTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SynchronizedGenerator uses Python identifier SynchronizedGenerator
    __SynchronizedGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), 'SynchronizedGenerator', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSynchronizedGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 227, 6), )

    
    SynchronizedGenerator = property(__SynchronizedGenerator.value, __SynchronizedGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerminalSegment uses Python identifier TerminalSegment
    __TerminalSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), 'TerminalSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLTerminalSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 228, 6), )

    
    TerminalSegment = property(__TerminalSegment.value, __TerminalSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterStatus uses Python identifier SecJitterStatus
    __SecJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), 'SecJitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 229, 6), )

    
    SecJitterStatus = property(__SecJitterStatus.value, __SecJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterLimit uses Python identifier SecJitterLimit
    __SecJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), 'SecJitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 230, 6), )

    
    SecJitterLimit = property(__SecJitterLimit.value, __SecJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterDstrbKind uses Python identifier SecJitterDstrbKind
    __SecJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), 'SecJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 231, 6), )

    
    SecJitterDstrbKind = property(__SecJitterDstrbKind.value, __SecJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModStatus uses Python identifier SecModStatus
    __SecModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), 'SecModStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 232, 6), )

    
    SecModStatus = property(__SecModStatus.value, __SecModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPatternKind uses Python identifier SecModPatternKind
    __SecModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), 'SecModPatternKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 233, 6), )

    
    SecModPatternKind = property(__SecModPatternKind.value, __SecModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModAmp uses Python identifier SecModAmp
    __SecModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), 'SecModAmp', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 234, 6), )

    
    SecModAmp = property(__SecModAmp.value, __SecModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPeriod uses Python identifier SecModPeriod
    __SecModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), 'SecModPeriod', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLSecModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 235, 6), )

    
    SecModPeriod = property(__SecModPeriod.value, __SecModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 236, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentSingle_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 237, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __ComplexPriState.name() : __ComplexPriState,
        __ComplexPriEntryId.name() : __ComplexPriEntryId,
        __Pri.name() : __Pri,
        __JitterStatus.name() : __JitterStatus,
        __JitterLimit.name() : __JitterLimit,
        __JitterDstrbKind.name() : __JitterDstrbKind,
        __JitterResSwitch.name() : __JitterResSwitch,
        __ClockedPriJitterState.name() : __ClockedPriJitterState,
        __ClockedPriJitterExcursion.name() : __ClockedPriJitterExcursion,
        __ClockedPriJitterVariance.name() : __ClockedPriJitterVariance,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __MissingPulseFactor.name() : __MissingPulseFactor,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __EarSequenceTriggerState.name() : __EarSequenceTriggerState,
        __GeneratorTriggerState.name() : __GeneratorTriggerState,
        __SynchronizedGenerator.name() : __SynchronizedGenerator,
        __TerminalSegment.name() : __TerminalSegment,
        __SecJitterStatus.name() : __SecJitterStatus,
        __SecJitterLimit.name() : __SecJitterLimit,
        __SecJitterDstrbKind.name() : __SecJitterDstrbKind,
        __SecModStatus.name() : __SecModStatus,
        __SecModPatternKind.name() : __SecModPatternKind,
        __SecModAmp.name() : __SecModAmp,
        __SecModPeriod.name() : __SecModPeriod,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentSingle = ctPriSegmentSingle
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentSingle', ctPriSegmentSingle)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentDwell with content type ELEMENT_ONLY
class ctPriSegmentDwell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentDwell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentDwell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 241, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 243, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 244, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Pri uses Python identifier Pri
    __Pri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pri'), 'Pri', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 245, 6), )

    
    Pri = property(__Pri.value, __Pri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 246, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 247, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 248, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellVariation uses Python identifier DwellVariation
    __DwellVariation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation'), 'DwellVariation', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellVariation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 249, 6), )

    
    DwellVariation = property(__DwellVariation.value, __DwellVariation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 250, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellVariationPulses uses Python identifier DwellVariationPulses
    __DwellVariationPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses'), 'DwellVariationPulses', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLDwellVariationPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 251, 6), )

    
    DwellVariationPulses = property(__DwellVariationPulses.value, __DwellVariationPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterStatus uses Python identifier JitterStatus
    __JitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), 'JitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 252, 6), )

    
    JitterStatus = property(__JitterStatus.value, __JitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 253, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbKind uses Python identifier JitterDstrbKind
    __JitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), 'JitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 254, 6), )

    
    JitterDstrbKind = property(__JitterDstrbKind.value, __JitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterResSwitch uses Python identifier JitterResSwitch
    __JitterResSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), 'JitterResSwitch', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLJitterResSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 255, 6), )

    
    JitterResSwitch = property(__JitterResSwitch.value, __JitterResSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 256, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MissingPulseFactor uses Python identifier MissingPulseFactor
    __MissingPulseFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), 'MissingPulseFactor', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLMissingPulseFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 257, 6), )

    
    MissingPulseFactor = property(__MissingPulseFactor.value, __MissingPulseFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 258, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 259, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 260, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 261, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 262, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 263, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 264, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarSequenceTriggerState uses Python identifier EarSequenceTriggerState
    __EarSequenceTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), 'EarSequenceTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLEarSequenceTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 265, 6), )

    
    EarSequenceTriggerState = property(__EarSequenceTriggerState.value, __EarSequenceTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorTriggerState uses Python identifier GeneratorTriggerState
    __GeneratorTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), 'GeneratorTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLGeneratorTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 266, 6), )

    
    GeneratorTriggerState = property(__GeneratorTriggerState.value, __GeneratorTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SynchronizedGenerator uses Python identifier SynchronizedGenerator
    __SynchronizedGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), 'SynchronizedGenerator', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSynchronizedGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 267, 6), )

    
    SynchronizedGenerator = property(__SynchronizedGenerator.value, __SynchronizedGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerminalSegment uses Python identifier TerminalSegment
    __TerminalSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), 'TerminalSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLTerminalSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 268, 6), )

    
    TerminalSegment = property(__TerminalSegment.value, __TerminalSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterStatus uses Python identifier SecJitterStatus
    __SecJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), 'SecJitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 269, 6), )

    
    SecJitterStatus = property(__SecJitterStatus.value, __SecJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterLimit uses Python identifier SecJitterLimit
    __SecJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), 'SecJitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 270, 6), )

    
    SecJitterLimit = property(__SecJitterLimit.value, __SecJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterDstrbKind uses Python identifier SecJitterDstrbKind
    __SecJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), 'SecJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 271, 6), )

    
    SecJitterDstrbKind = property(__SecJitterDstrbKind.value, __SecJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModStatus uses Python identifier SecModStatus
    __SecModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), 'SecModStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 272, 6), )

    
    SecModStatus = property(__SecModStatus.value, __SecModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPatternKind uses Python identifier SecModPatternKind
    __SecModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), 'SecModPatternKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 273, 6), )

    
    SecModPatternKind = property(__SecModPatternKind.value, __SecModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModAmp uses Python identifier SecModAmp
    __SecModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), 'SecModAmp', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 274, 6), )

    
    SecModAmp = property(__SecModAmp.value, __SecModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPeriod uses Python identifier SecModPeriod
    __SecModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), 'SecModPeriod', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLSecModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 275, 6), )

    
    SecModPeriod = property(__SecModPeriod.value, __SecModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 276, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDwell_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 277, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Pri.name() : __Pri,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellVariation.name() : __DwellVariation,
        __DwellTimePulses.name() : __DwellTimePulses,
        __DwellVariationPulses.name() : __DwellVariationPulses,
        __JitterStatus.name() : __JitterStatus,
        __JitterLimit.name() : __JitterLimit,
        __JitterDstrbKind.name() : __JitterDstrbKind,
        __JitterResSwitch.name() : __JitterResSwitch,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __MissingPulseFactor.name() : __MissingPulseFactor,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __EarSequenceTriggerState.name() : __EarSequenceTriggerState,
        __GeneratorTriggerState.name() : __GeneratorTriggerState,
        __SynchronizedGenerator.name() : __SynchronizedGenerator,
        __TerminalSegment.name() : __TerminalSegment,
        __SecJitterStatus.name() : __SecJitterStatus,
        __SecJitterLimit.name() : __SecJitterLimit,
        __SecJitterDstrbKind.name() : __SecJitterDstrbKind,
        __SecModStatus.name() : __SecModStatus,
        __SecModPatternKind.name() : __SecModPatternKind,
        __SecModAmp.name() : __SecModAmp,
        __SecModPeriod.name() : __SecModPeriod,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentDwell = ctPriSegmentDwell
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentDwell', ctPriSegmentDwell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentPeriodic with content type ELEMENT_ONLY
class ctPriSegmentPeriodic (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentPeriodic with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentPeriodic')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 281, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 283, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 284, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Pri uses Python identifier Pri
    __Pri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pri'), 'Pri', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 285, 6), )

    
    Pri = property(__Pri.value, __Pri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModStatus uses Python identifier ModStatus
    __ModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), 'ModStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 286, 6), )

    
    ModStatus = property(__ModStatus.value, __ModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPatternKind uses Python identifier ModPatternKind
    __ModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPatternKind'), 'ModPatternKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 287, 6), )

    
    ModPatternKind = property(__ModPatternKind.value, __ModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModAmp uses Python identifier ModAmp
    __ModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModAmp'), 'ModAmp', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 288, 6), )

    
    ModAmp = property(__ModAmp.value, __ModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodKind uses Python identifier ModPeriodKind
    __ModPeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind'), 'ModPeriodKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 289, 6), )

    
    ModPeriodKind = property(__ModPeriodKind.value, __ModPeriodKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodPulses uses Python identifier ModPeriodPulses
    __ModPeriodPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses'), 'ModPeriodPulses', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 290, 6), )

    
    ModPeriodPulses = property(__ModPeriodPulses.value, __ModPeriodPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriod uses Python identifier ModPeriod
    __ModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod'), 'ModPeriod', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 291, 6), )

    
    ModPeriod = property(__ModPeriod.value, __ModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodSync uses Python identifier ModPeriodSync
    __ModPeriodSync = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync'), 'ModPeriodSync', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodSync', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 292, 6), )

    
    ModPeriodSync = property(__ModPeriodSync.value, __ModPeriodSync.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterStatus uses Python identifier JitterStatus
    __JitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), 'JitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 293, 6), )

    
    JitterStatus = property(__JitterStatus.value, __JitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 294, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbKind uses Python identifier JitterDstrbKind
    __JitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), 'JitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 295, 6), )

    
    JitterDstrbKind = property(__JitterDstrbKind.value, __JitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterResSwitch uses Python identifier JitterResSwitch
    __JitterResSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), 'JitterResSwitch', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLJitterResSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 296, 6), )

    
    JitterResSwitch = property(__JitterResSwitch.value, __JitterResSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterState uses Python identifier ClockedPriJitterState
    __ClockedPriJitterState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState'), 'ClockedPriJitterState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLClockedPriJitterState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 297, 6), )

    
    ClockedPriJitterState = property(__ClockedPriJitterState.value, __ClockedPriJitterState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterExcursion uses Python identifier ClockedPriJitterExcursion
    __ClockedPriJitterExcursion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion'), 'ClockedPriJitterExcursion', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLClockedPriJitterExcursion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 298, 6), )

    
    ClockedPriJitterExcursion = property(__ClockedPriJitterExcursion.value, __ClockedPriJitterExcursion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClockedPriJitterVariance uses Python identifier ClockedPriJitterVariance
    __ClockedPriJitterVariance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance'), 'ClockedPriJitterVariance', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLClockedPriJitterVariance', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 299, 6), )

    
    ClockedPriJitterVariance = property(__ClockedPriJitterVariance.value, __ClockedPriJitterVariance.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 300, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MissingPulseFactor uses Python identifier MissingPulseFactor
    __MissingPulseFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), 'MissingPulseFactor', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLMissingPulseFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 301, 6), )

    
    MissingPulseFactor = property(__MissingPulseFactor.value, __MissingPulseFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 302, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 303, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 304, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 305, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 306, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 307, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 308, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarSequenceTriggerState uses Python identifier EarSequenceTriggerState
    __EarSequenceTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), 'EarSequenceTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLEarSequenceTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 309, 6), )

    
    EarSequenceTriggerState = property(__EarSequenceTriggerState.value, __EarSequenceTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorTriggerState uses Python identifier GeneratorTriggerState
    __GeneratorTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), 'GeneratorTriggerState', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLGeneratorTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 310, 6), )

    
    GeneratorTriggerState = property(__GeneratorTriggerState.value, __GeneratorTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SynchronizedGenerator uses Python identifier SynchronizedGenerator
    __SynchronizedGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), 'SynchronizedGenerator', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSynchronizedGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 311, 6), )

    
    SynchronizedGenerator = property(__SynchronizedGenerator.value, __SynchronizedGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerminalSegment uses Python identifier TerminalSegment
    __TerminalSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), 'TerminalSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLTerminalSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 312, 6), )

    
    TerminalSegment = property(__TerminalSegment.value, __TerminalSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterStatus uses Python identifier SecJitterStatus
    __SecJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), 'SecJitterStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 313, 6), )

    
    SecJitterStatus = property(__SecJitterStatus.value, __SecJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterLimit uses Python identifier SecJitterLimit
    __SecJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), 'SecJitterLimit', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 314, 6), )

    
    SecJitterLimit = property(__SecJitterLimit.value, __SecJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterDstrbKind uses Python identifier SecJitterDstrbKind
    __SecJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), 'SecJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 315, 6), )

    
    SecJitterDstrbKind = property(__SecJitterDstrbKind.value, __SecJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModStatus uses Python identifier SecModStatus
    __SecModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), 'SecModStatus', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 316, 6), )

    
    SecModStatus = property(__SecModStatus.value, __SecModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPatternKind uses Python identifier SecModPatternKind
    __SecModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), 'SecModPatternKind', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 317, 6), )

    
    SecModPatternKind = property(__SecModPatternKind.value, __SecModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModAmp uses Python identifier SecModAmp
    __SecModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), 'SecModAmp', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 318, 6), )

    
    SecModAmp = property(__SecModAmp.value, __SecModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPeriod uses Python identifier SecModPeriod
    __SecModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), 'SecModPeriod', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLSecModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 319, 6), )

    
    SecModPeriod = property(__SecModPeriod.value, __SecModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 320, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentPeriodic_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 321, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Pri.name() : __Pri,
        __ModStatus.name() : __ModStatus,
        __ModPatternKind.name() : __ModPatternKind,
        __ModAmp.name() : __ModAmp,
        __ModPeriodKind.name() : __ModPeriodKind,
        __ModPeriodPulses.name() : __ModPeriodPulses,
        __ModPeriod.name() : __ModPeriod,
        __ModPeriodSync.name() : __ModPeriodSync,
        __JitterStatus.name() : __JitterStatus,
        __JitterLimit.name() : __JitterLimit,
        __JitterDstrbKind.name() : __JitterDstrbKind,
        __JitterResSwitch.name() : __JitterResSwitch,
        __ClockedPriJitterState.name() : __ClockedPriJitterState,
        __ClockedPriJitterExcursion.name() : __ClockedPriJitterExcursion,
        __ClockedPriJitterVariance.name() : __ClockedPriJitterVariance,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __MissingPulseFactor.name() : __MissingPulseFactor,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __EarSequenceTriggerState.name() : __EarSequenceTriggerState,
        __GeneratorTriggerState.name() : __GeneratorTriggerState,
        __SynchronizedGenerator.name() : __SynchronizedGenerator,
        __TerminalSegment.name() : __TerminalSegment,
        __SecJitterStatus.name() : __SecJitterStatus,
        __SecJitterLimit.name() : __SecJitterLimit,
        __SecJitterDstrbKind.name() : __SecJitterDstrbKind,
        __SecModStatus.name() : __SecModStatus,
        __SecModPatternKind.name() : __SecModPatternKind,
        __SecModAmp.name() : __SecModAmp,
        __SecModPeriod.name() : __SecModPeriod,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentPeriodic = ctPriSegmentPeriodic
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentPeriodic', ctPriSegmentPeriodic)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentStaggered with content type ELEMENT_ONLY
class ctPriSegmentStaggered (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentStaggered with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentStaggered')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 325, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 327, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 328, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerminalSegment uses Python identifier TerminalSegment
    __TerminalSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), 'TerminalSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLTerminalSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 329, 6), )

    
    TerminalSegment = property(__TerminalSegment.value, __TerminalSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AssociatedFrequencySegment uses Python identifier AssociatedFrequencySegment
    __AssociatedFrequencySegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment'), 'AssociatedFrequencySegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLAssociatedFrequencySegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 330, 6), )

    
    AssociatedFrequencySegment = property(__AssociatedFrequencySegment.value, __AssociatedFrequencySegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AssociatedPulseSegment uses Python identifier AssociatedPulseSegment
    __AssociatedPulseSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment'), 'AssociatedPulseSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLAssociatedPulseSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 331, 6), )

    
    AssociatedPulseSegment = property(__AssociatedPulseSegment.value, __AssociatedPulseSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 332, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 333, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Subsegments uses Python identifier Subsegments
    __Subsegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), 'Subsegments', '__httpwww_amherst_comCEESIMXML_ctPriSegmentStaggered_httpwww_amherst_comCEESIMXMLSubsegments', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 334, 6), )

    
    Subsegments = property(__Subsegments.value, __Subsegments.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __TerminalSegment.name() : __TerminalSegment,
        __AssociatedFrequencySegment.name() : __AssociatedFrequencySegment,
        __AssociatedPulseSegment.name() : __AssociatedPulseSegment,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink,
        __Subsegments.name() : __Subsegments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentStaggered = ctPriSegmentStaggered
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentStaggered', ctPriSegmentStaggered)


# Complex type {http://www.amherst.com/CEESIM/XML}ctStaggeredSeriesPriSegmentList with content type ELEMENT_ONLY
class ctStaggeredSeriesPriSegmentList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctStaggeredSeriesPriSegmentList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctStaggeredSeriesPriSegmentList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 338, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}StaggeredSeriesPriSegment uses Python identifier StaggeredSeriesPriSegment
    __StaggeredSeriesPriSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StaggeredSeriesPriSegment'), 'StaggeredSeriesPriSegment', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegmentList_httpwww_amherst_comCEESIMXMLStaggeredSeriesPriSegment', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 340, 6), )

    
    StaggeredSeriesPriSegment = property(__StaggeredSeriesPriSegment.value, __StaggeredSeriesPriSegment.set, None, None)

    _ElementMap.update({
        __StaggeredSeriesPriSegment.name() : __StaggeredSeriesPriSegment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctStaggeredSeriesPriSegmentList = ctStaggeredSeriesPriSegmentList
Namespace.addCategoryObject('typeBinding', 'ctStaggeredSeriesPriSegmentList', ctStaggeredSeriesPriSegmentList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctStaggeredSeriesPriSegment with content type ELEMENT_ONLY
class ctStaggeredSeriesPriSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctStaggeredSeriesPriSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctStaggeredSeriesPriSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 344, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Pri uses Python identifier Pri
    __Pri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pri'), 'Pri', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 346, 6), )

    
    Pri = property(__Pri.value, __Pri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterStatus uses Python identifier JitterStatus
    __JitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), 'JitterStatus', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 347, 6), )

    
    JitterStatus = property(__JitterStatus.value, __JitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 348, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbKind uses Python identifier JitterDstrbKind
    __JitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), 'JitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 349, 6), )

    
    JitterDstrbKind = property(__JitterDstrbKind.value, __JitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterResSwitch uses Python identifier JitterResSwitch
    __JitterResSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), 'JitterResSwitch', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLJitterResSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 350, 6), )

    
    JitterResSwitch = property(__JitterResSwitch.value, __JitterResSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 351, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 352, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 353, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 354, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MissingPulseFactor uses Python identifier MissingPulseFactor
    __MissingPulseFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), 'MissingPulseFactor', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLMissingPulseFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 355, 6), )

    
    MissingPulseFactor = property(__MissingPulseFactor.value, __MissingPulseFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 356, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 357, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 358, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 359, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 360, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 361, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 362, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarSequenceTriggerState uses Python identifier EarSequenceTriggerState
    __EarSequenceTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), 'EarSequenceTriggerState', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLEarSequenceTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 363, 6), )

    
    EarSequenceTriggerState = property(__EarSequenceTriggerState.value, __EarSequenceTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorTriggerState uses Python identifier GeneratorTriggerState
    __GeneratorTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), 'GeneratorTriggerState', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLGeneratorTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 364, 6), )

    
    GeneratorTriggerState = property(__GeneratorTriggerState.value, __GeneratorTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SynchronizedGenerator uses Python identifier SynchronizedGenerator
    __SynchronizedGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), 'SynchronizedGenerator', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSynchronizedGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 365, 6), )

    
    SynchronizedGenerator = property(__SynchronizedGenerator.value, __SynchronizedGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterStatus uses Python identifier SecJitterStatus
    __SecJitterStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), 'SecJitterStatus', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecJitterStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 366, 6), )

    
    SecJitterStatus = property(__SecJitterStatus.value, __SecJitterStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterLimit uses Python identifier SecJitterLimit
    __SecJitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), 'SecJitterLimit', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 367, 6), )

    
    SecJitterLimit = property(__SecJitterLimit.value, __SecJitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecJitterDstrbKind uses Python identifier SecJitterDstrbKind
    __SecJitterDstrbKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), 'SecJitterDstrbKind', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecJitterDstrbKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 368, 6), )

    
    SecJitterDstrbKind = property(__SecJitterDstrbKind.value, __SecJitterDstrbKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModStatus uses Python identifier SecModStatus
    __SecModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), 'SecModStatus', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 369, 6), )

    
    SecModStatus = property(__SecModStatus.value, __SecModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPatternKind uses Python identifier SecModPatternKind
    __SecModPatternKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), 'SecModPatternKind', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecModPatternKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 370, 6), )

    
    SecModPatternKind = property(__SecModPatternKind.value, __SecModPatternKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModAmp uses Python identifier SecModAmp
    __SecModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), 'SecModAmp', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 371, 6), )

    
    SecModAmp = property(__SecModAmp.value, __SecModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SecModPeriod uses Python identifier SecModPeriod
    __SecModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), 'SecModPeriod', '__httpwww_amherst_comCEESIMXML_ctStaggeredSeriesPriSegment_httpwww_amherst_comCEESIMXMLSecModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 372, 6), )

    
    SecModPeriod = property(__SecModPeriod.value, __SecModPeriod.set, None, None)

    _ElementMap.update({
        __Pri.name() : __Pri,
        __JitterStatus.name() : __JitterStatus,
        __JitterLimit.name() : __JitterLimit,
        __JitterDstrbKind.name() : __JitterDstrbKind,
        __JitterResSwitch.name() : __JitterResSwitch,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __MissingPulseFactor.name() : __MissingPulseFactor,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __EarSequenceTriggerState.name() : __EarSequenceTriggerState,
        __GeneratorTriggerState.name() : __GeneratorTriggerState,
        __SynchronizedGenerator.name() : __SynchronizedGenerator,
        __SecJitterStatus.name() : __SecJitterStatus,
        __SecJitterLimit.name() : __SecJitterLimit,
        __SecJitterDstrbKind.name() : __SecJitterDstrbKind,
        __SecModStatus.name() : __SecModStatus,
        __SecModPatternKind.name() : __SecModPatternKind,
        __SecModAmp.name() : __SecModAmp,
        __SecModPeriod.name() : __SecModPeriod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctStaggeredSeriesPriSegment = ctStaggeredSeriesPriSegment
Namespace.addCategoryObject('typeBinding', 'ctStaggeredSeriesPriSegment', ctStaggeredSeriesPriSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentDiscreteJitter with content type ELEMENT_ONLY
class ctPriSegmentDiscreteJitter (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentDiscreteJitter with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentDiscreteJitter')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 376, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 378, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 379, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AssociatedFrequencySegment uses Python identifier AssociatedFrequencySegment
    __AssociatedFrequencySegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment'), 'AssociatedFrequencySegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLAssociatedFrequencySegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 380, 6), )

    
    AssociatedFrequencySegment = property(__AssociatedFrequencySegment.value, __AssociatedFrequencySegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AssociatedPulseSegment uses Python identifier AssociatedPulseSegment
    __AssociatedPulseSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment'), 'AssociatedPulseSegment', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLAssociatedPulseSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 381, 6), )

    
    AssociatedPulseSegment = property(__AssociatedPulseSegment.value, __AssociatedPulseSegment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 382, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 383, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Subsegments uses Python identifier Subsegments
    __Subsegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), 'Subsegments', '__httpwww_amherst_comCEESIMXML_ctPriSegmentDiscreteJitter_httpwww_amherst_comCEESIMXMLSubsegments', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 384, 6), )

    
    Subsegments = property(__Subsegments.value, __Subsegments.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __AssociatedFrequencySegment.name() : __AssociatedFrequencySegment,
        __AssociatedPulseSegment.name() : __AssociatedPulseSegment,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink,
        __Subsegments.name() : __Subsegments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentDiscreteJitter = ctPriSegmentDiscreteJitter
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentDiscreteJitter', ctPriSegmentDiscreteJitter)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteJitterSeriesPriSegmentList with content type ELEMENT_ONLY
class ctDiscreteJitterSeriesPriSegmentList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteJitterSeriesPriSegmentList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDiscreteJitterSeriesPriSegmentList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 388, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteJitterSeriesPriSegment uses Python identifier DiscreteJitterSeriesPriSegment
    __DiscreteJitterSeriesPriSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteJitterSeriesPriSegment'), 'DiscreteJitterSeriesPriSegment', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegmentList_httpwww_amherst_comCEESIMXMLDiscreteJitterSeriesPriSegment', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 390, 6), )

    
    DiscreteJitterSeriesPriSegment = property(__DiscreteJitterSeriesPriSegment.value, __DiscreteJitterSeriesPriSegment.set, None, None)

    _ElementMap.update({
        __DiscreteJitterSeriesPriSegment.name() : __DiscreteJitterSeriesPriSegment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDiscreteJitterSeriesPriSegmentList = ctDiscreteJitterSeriesPriSegmentList
Namespace.addCategoryObject('typeBinding', 'ctDiscreteJitterSeriesPriSegmentList', ctDiscreteJitterSeriesPriSegmentList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteJitterSeriesPriSegment with content type ELEMENT_ONLY
class ctDiscreteJitterSeriesPriSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteJitterSeriesPriSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDiscreteJitterSeriesPriSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 394, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Pri uses Python identifier Pri
    __Pri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Pri'), 'Pri', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 396, 6), )

    
    Pri = property(__Pri.value, __Pri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 397, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 398, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 399, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 400, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MissingPulseFactor uses Python identifier MissingPulseFactor
    __MissingPulseFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), 'MissingPulseFactor', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLMissingPulseFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 401, 6), )

    
    MissingPulseFactor = property(__MissingPulseFactor.value, __MissingPulseFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint uses Python identifier PriTestPoint
    __PriTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), 'PriTestPoint', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 402, 6), )

    
    PriTestPoint = property(__PriTestPoint.value, __PriTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint2 uses Python identifier PriTestPoint2
    __PriTestPoint2 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), 'PriTestPoint2', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint2', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 403, 6), )

    
    PriTestPoint2 = property(__PriTestPoint2.value, __PriTestPoint2.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint3 uses Python identifier PriTestPoint3
    __PriTestPoint3 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), 'PriTestPoint3', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint3', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 404, 6), )

    
    PriTestPoint3 = property(__PriTestPoint3.value, __PriTestPoint3.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTestPoint4 uses Python identifier PriTestPoint4
    __PriTestPoint4 = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), 'PriTestPoint4', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPriTestPoint4', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 405, 6), )

    
    PriTestPoint4 = property(__PriTestPoint4.value, __PriTestPoint4.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 406, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 407, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 408, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarSequenceTriggerState uses Python identifier EarSequenceTriggerState
    __EarSequenceTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), 'EarSequenceTriggerState', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLEarSequenceTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 409, 6), )

    
    EarSequenceTriggerState = property(__EarSequenceTriggerState.value, __EarSequenceTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorTriggerState uses Python identifier GeneratorTriggerState
    __GeneratorTriggerState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), 'GeneratorTriggerState', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLGeneratorTriggerState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 410, 6), )

    
    GeneratorTriggerState = property(__GeneratorTriggerState.value, __GeneratorTriggerState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SynchronizedGenerator uses Python identifier SynchronizedGenerator
    __SynchronizedGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), 'SynchronizedGenerator', '__httpwww_amherst_comCEESIMXML_ctDiscreteJitterSeriesPriSegment_httpwww_amherst_comCEESIMXMLSynchronizedGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 411, 6), )

    
    SynchronizedGenerator = property(__SynchronizedGenerator.value, __SynchronizedGenerator.set, None, None)

    _ElementMap.update({
        __Pri.name() : __Pri,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __MissingPulseFactor.name() : __MissingPulseFactor,
        __PriTestPoint.name() : __PriTestPoint,
        __PriTestPoint2.name() : __PriTestPoint2,
        __PriTestPoint3.name() : __PriTestPoint3,
        __PriTestPoint4.name() : __PriTestPoint4,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __EarSequenceTriggerState.name() : __EarSequenceTriggerState,
        __GeneratorTriggerState.name() : __GeneratorTriggerState,
        __SynchronizedGenerator.name() : __SynchronizedGenerator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDiscreteJitterSeriesPriSegment = ctDiscreteJitterSeriesPriSegment
Namespace.addCategoryObject('typeBinding', 'ctDiscreteJitterSeriesPriSegment', ctDiscreteJitterSeriesPriSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentCw with content type ELEMENT_ONLY
class ctPriSegmentCw (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPriSegmentCw with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPriSegmentCw')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 415, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPriSegmentCw_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 417, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPriSegmentCw_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 418, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentCw_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 419, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPriSegmentCw_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 420, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPriSegmentCw = ctPriSegmentCw
Namespace.addCategoryObject('typeBinding', 'ctPriSegmentCw', ctPriSegmentCw)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySequence with content type ELEMENT_ONLY
class ctFrequencySequence (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySequence with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySequence')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 424, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentAssociated uses Python identifier FrequencySegmentAssociated
    __FrequencySegmentAssociated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentAssociated'), 'FrequencySegmentAssociated', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentAssociated', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 426, 6), )

    
    FrequencySegmentAssociated = property(__FrequencySegmentAssociated.value, __FrequencySegmentAssociated.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentSingle uses Python identifier FrequencySegmentSingle
    __FrequencySegmentSingle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSingle'), 'FrequencySegmentSingle', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentSingle', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 427, 6), )

    
    FrequencySegmentSingle = property(__FrequencySegmentSingle.value, __FrequencySegmentSingle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentDwell uses Python identifier FrequencySegmentDwell
    __FrequencySegmentDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDwell'), 'FrequencySegmentDwell', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentDwell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 428, 6), )

    
    FrequencySegmentDwell = property(__FrequencySegmentDwell.value, __FrequencySegmentDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentPeriodic uses Python identifier FrequencySegmentPeriodic
    __FrequencySegmentPeriodic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentPeriodic'), 'FrequencySegmentPeriodic', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentPeriodic', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 429, 6), )

    
    FrequencySegmentPeriodic = property(__FrequencySegmentPeriodic.value, __FrequencySegmentPeriodic.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentSeries uses Python identifier FrequencySegmentSeries
    __FrequencySegmentSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSeries'), 'FrequencySegmentSeries', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentSeries', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 430, 6), )

    
    FrequencySegmentSeries = property(__FrequencySegmentSeries.value, __FrequencySegmentSeries.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySegmentDiscreteAgility uses Python identifier FrequencySegmentDiscreteAgility
    __FrequencySegmentDiscreteAgility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDiscreteAgility'), 'FrequencySegmentDiscreteAgility', '__httpwww_amherst_comCEESIMXML_ctFrequencySequence_httpwww_amherst_comCEESIMXMLFrequencySegmentDiscreteAgility', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 431, 6), )

    
    FrequencySegmentDiscreteAgility = property(__FrequencySegmentDiscreteAgility.value, __FrequencySegmentDiscreteAgility.set, None, None)

    _ElementMap.update({
        __FrequencySegmentAssociated.name() : __FrequencySegmentAssociated,
        __FrequencySegmentSingle.name() : __FrequencySegmentSingle,
        __FrequencySegmentDwell.name() : __FrequencySegmentDwell,
        __FrequencySegmentPeriodic.name() : __FrequencySegmentPeriodic,
        __FrequencySegmentSeries.name() : __FrequencySegmentSeries,
        __FrequencySegmentDiscreteAgility.name() : __FrequencySegmentDiscreteAgility
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySequence = ctFrequencySequence
Namespace.addCategoryObject('typeBinding', 'ctFrequencySequence', ctFrequencySequence)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentAssociated with content type ELEMENT_ONLY
class ctFrequencySegmentAssociated (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentAssociated with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentAssociated')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 435, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 437, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 438, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MasterGenerator uses Python identifier MasterGenerator
    __MasterGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MasterGenerator'), 'MasterGenerator', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLMasterGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 439, 6), )

    
    MasterGenerator = property(__MasterGenerator.value, __MasterGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyOffset uses Python identifier FrequencyOffset
    __FrequencyOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOffset'), 'FrequencyOffset', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLFrequencyOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 440, 6), )

    
    FrequencyOffset = property(__FrequencyOffset.value, __FrequencyOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 441, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 442, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 443, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 444, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 445, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 446, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 447, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 448, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 449, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 450, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 451, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentAssociated_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 452, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __MasterGenerator.name() : __MasterGenerator,
        __FrequencyOffset.name() : __FrequencyOffset,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentAssociated = ctFrequencySegmentAssociated
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentAssociated', ctFrequencySegmentAssociated)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentSingle with content type ELEMENT_ONLY
class ctFrequencySegmentSingle (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentSingle with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentSingle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 456, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 458, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 459, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 460, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 461, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 462, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 463, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 464, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 465, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 466, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 467, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityStatus uses Python identifier AgilityStatus
    __AgilityStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), 'AgilityStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLAgilityStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 468, 6), )

    
    AgilityStatus = property(__AgilityStatus.value, __AgilityStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityLimit uses Python identifier AgilityLimit
    __AgilityLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), 'AgilityLimit', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLAgilityLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 469, 6), )

    
    AgilityLimit = property(__AgilityLimit.value, __AgilityLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityPatternName uses Python identifier AgilityPatternName
    __AgilityPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), 'AgilityPatternName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLAgilityPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 470, 6), )

    
    AgilityPatternName = property(__AgilityPatternName.value, __AgilityPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityResolutionSwitch uses Python identifier AgilityResolutionSwitch
    __AgilityResolutionSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), 'AgilityResolutionSwitch', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLAgilityResolutionSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 471, 6), )

    
    AgilityResolutionSwitch = property(__AgilityResolutionSwitch.value, __AgilityResolutionSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 472, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 473, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 474, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 475, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSingle_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 476, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Frequency.name() : __Frequency,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __AgilityStatus.name() : __AgilityStatus,
        __AgilityLimit.name() : __AgilityLimit,
        __AgilityPatternName.name() : __AgilityPatternName,
        __AgilityResolutionSwitch.name() : __AgilityResolutionSwitch,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentSingle = ctFrequencySegmentSingle
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentSingle', ctFrequencySegmentSingle)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentDwell with content type ELEMENT_ONLY
class ctFrequencySegmentDwell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentDwell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentDwell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 480, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 482, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 483, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 484, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 485, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 486, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 487, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 488, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 489, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 490, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 491, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 492, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 493, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 494, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellVariation uses Python identifier DwellVariation
    __DwellVariation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation'), 'DwellVariation', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellVariation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 495, 6), )

    
    DwellVariation = property(__DwellVariation.value, __DwellVariation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 496, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellVariationPulses uses Python identifier DwellVariationPulses
    __DwellVariationPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses'), 'DwellVariationPulses', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLDwellVariationPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 497, 6), )

    
    DwellVariationPulses = property(__DwellVariationPulses.value, __DwellVariationPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityStatus uses Python identifier AgilityStatus
    __AgilityStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), 'AgilityStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLAgilityStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 498, 6), )

    
    AgilityStatus = property(__AgilityStatus.value, __AgilityStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityLimit uses Python identifier AgilityLimit
    __AgilityLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), 'AgilityLimit', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLAgilityLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 499, 6), )

    
    AgilityLimit = property(__AgilityLimit.value, __AgilityLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityPatternName uses Python identifier AgilityPatternName
    __AgilityPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), 'AgilityPatternName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLAgilityPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 500, 6), )

    
    AgilityPatternName = property(__AgilityPatternName.value, __AgilityPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityResolutionSwitch uses Python identifier AgilityResolutionSwitch
    __AgilityResolutionSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), 'AgilityResolutionSwitch', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLAgilityResolutionSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 501, 6), )

    
    AgilityResolutionSwitch = property(__AgilityResolutionSwitch.value, __AgilityResolutionSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 502, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 503, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 504, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 505, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDwell_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 506, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Frequency.name() : __Frequency,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellVariation.name() : __DwellVariation,
        __DwellTimePulses.name() : __DwellTimePulses,
        __DwellVariationPulses.name() : __DwellVariationPulses,
        __AgilityStatus.name() : __AgilityStatus,
        __AgilityLimit.name() : __AgilityLimit,
        __AgilityPatternName.name() : __AgilityPatternName,
        __AgilityResolutionSwitch.name() : __AgilityResolutionSwitch,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentDwell = ctFrequencySegmentDwell
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentDwell', ctFrequencySegmentDwell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentPeriodic with content type ELEMENT_ONLY
class ctFrequencySegmentPeriodic (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentPeriodic with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentPeriodic')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 510, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 512, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 513, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 514, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 515, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 516, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 517, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 518, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 519, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 520, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 521, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityStatus uses Python identifier AgilityStatus
    __AgilityStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), 'AgilityStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLAgilityStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 522, 6), )

    
    AgilityStatus = property(__AgilityStatus.value, __AgilityStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityLimit uses Python identifier AgilityLimit
    __AgilityLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), 'AgilityLimit', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLAgilityLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 523, 6), )

    
    AgilityLimit = property(__AgilityLimit.value, __AgilityLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityPatternName uses Python identifier AgilityPatternName
    __AgilityPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), 'AgilityPatternName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLAgilityPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 524, 6), )

    
    AgilityPatternName = property(__AgilityPatternName.value, __AgilityPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityResolutionSwitch uses Python identifier AgilityResolutionSwitch
    __AgilityResolutionSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), 'AgilityResolutionSwitch', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLAgilityResolutionSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 525, 6), )

    
    AgilityResolutionSwitch = property(__AgilityResolutionSwitch.value, __AgilityResolutionSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModStatus uses Python identifier ModStatus
    __ModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), 'ModStatus', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 526, 6), )

    
    ModStatus = property(__ModStatus.value, __ModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModAmp uses Python identifier ModAmp
    __ModAmp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModAmp'), 'ModAmp', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModAmp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 527, 6), )

    
    ModAmp = property(__ModAmp.value, __ModAmp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPatternName uses Python identifier ModPatternName
    __ModPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPatternName'), 'ModPatternName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 528, 6), )

    
    ModPatternName = property(__ModPatternName.value, __ModPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodKind uses Python identifier ModPeriodKind
    __ModPeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind'), 'ModPeriodKind', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 529, 6), )

    
    ModPeriodKind = property(__ModPeriodKind.value, __ModPeriodKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodPulses uses Python identifier ModPeriodPulses
    __ModPeriodPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses'), 'ModPeriodPulses', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 530, 6), )

    
    ModPeriodPulses = property(__ModPeriodPulses.value, __ModPeriodPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriod uses Python identifier ModPeriod
    __ModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod'), 'ModPeriod', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 531, 6), )

    
    ModPeriod = property(__ModPeriod.value, __ModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModPeriodSync uses Python identifier ModPeriodSync
    __ModPeriodSync = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync'), 'ModPeriodSync', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLModPeriodSync', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 532, 6), )

    
    ModPeriodSync = property(__ModPeriodSync.value, __ModPeriodSync.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 533, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 534, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 535, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 536, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentPeriodic_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 537, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Frequency.name() : __Frequency,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __AgilityStatus.name() : __AgilityStatus,
        __AgilityLimit.name() : __AgilityLimit,
        __AgilityPatternName.name() : __AgilityPatternName,
        __AgilityResolutionSwitch.name() : __AgilityResolutionSwitch,
        __ModStatus.name() : __ModStatus,
        __ModAmp.name() : __ModAmp,
        __ModPatternName.name() : __ModPatternName,
        __ModPeriodKind.name() : __ModPeriodKind,
        __ModPeriodPulses.name() : __ModPeriodPulses,
        __ModPeriod.name() : __ModPeriod,
        __ModPeriodSync.name() : __ModPeriodSync,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentPeriodic = ctFrequencySegmentPeriodic
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentPeriodic', ctFrequencySegmentPeriodic)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentSeries with content type ELEMENT_ONLY
class ctFrequencySegmentSeries (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentSeries with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentSeries')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 541, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSeries_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 543, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSeries_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 544, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSeries_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 545, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSeries_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 546, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Subsegments uses Python identifier Subsegments
    __Subsegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), 'Subsegments', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentSeries_httpwww_amherst_comCEESIMXMLSubsegments', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 547, 6), )

    
    Subsegments = property(__Subsegments.value, __Subsegments.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink,
        __Subsegments.name() : __Subsegments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentSeries = ctFrequencySegmentSeries
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentSeries', ctFrequencySegmentSeries)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesFrequencySegmentList with content type ELEMENT_ONLY
class ctSeriesFrequencySegmentList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesFrequencySegmentList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSeriesFrequencySegmentList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 551, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SeriesFrequencySegment uses Python identifier SeriesFrequencySegment
    __SeriesFrequencySegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SeriesFrequencySegment'), 'SeriesFrequencySegment', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegmentList_httpwww_amherst_comCEESIMXMLSeriesFrequencySegment', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 553, 6), )

    
    SeriesFrequencySegment = property(__SeriesFrequencySegment.value, __SeriesFrequencySegment.set, None, None)

    _ElementMap.update({
        __SeriesFrequencySegment.name() : __SeriesFrequencySegment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSeriesFrequencySegmentList = ctSeriesFrequencySegmentList
Namespace.addCategoryObject('typeBinding', 'ctSeriesFrequencySegmentList', ctSeriesFrequencySegmentList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesFrequencySegment with content type ELEMENT_ONLY
class ctSeriesFrequencySegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesFrequencySegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSeriesFrequencySegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 557, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 559, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 560, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 561, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 562, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 563, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 564, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 565, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 566, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 567, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 568, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 569, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityStatus uses Python identifier AgilityStatus
    __AgilityStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), 'AgilityStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLAgilityStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 570, 6), )

    
    AgilityStatus = property(__AgilityStatus.value, __AgilityStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityLimit uses Python identifier AgilityLimit
    __AgilityLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), 'AgilityLimit', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLAgilityLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 571, 6), )

    
    AgilityLimit = property(__AgilityLimit.value, __AgilityLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityPatternName uses Python identifier AgilityPatternName
    __AgilityPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), 'AgilityPatternName', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLAgilityPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 572, 6), )

    
    AgilityPatternName = property(__AgilityPatternName.value, __AgilityPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AgilityResolutionSwitch uses Python identifier AgilityResolutionSwitch
    __AgilityResolutionSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), 'AgilityResolutionSwitch', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLAgilityResolutionSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 573, 6), )

    
    AgilityResolutionSwitch = property(__AgilityResolutionSwitch.value, __AgilityResolutionSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 574, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 575, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesFrequencySegment_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 576, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    _ElementMap.update({
        __Frequency.name() : __Frequency,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __AgilityStatus.name() : __AgilityStatus,
        __AgilityLimit.name() : __AgilityLimit,
        __AgilityPatternName.name() : __AgilityPatternName,
        __AgilityResolutionSwitch.name() : __AgilityResolutionSwitch,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSeriesFrequencySegment = ctSeriesFrequencySegment
Namespace.addCategoryObject('typeBinding', 'ctSeriesFrequencySegment', ctSeriesFrequencySegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentDiscreteAgility with content type ELEMENT_ONLY
class ctFrequencySegmentDiscreteAgility (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencySegmentDiscreteAgility with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencySegmentDiscreteAgility')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 580, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDiscreteAgility_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 582, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDiscreteAgility_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 583, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDiscreteAgility_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 584, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDiscreteAgility_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 585, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Subsegments uses Python identifier Subsegments
    __Subsegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), 'Subsegments', '__httpwww_amherst_comCEESIMXML_ctFrequencySegmentDiscreteAgility_httpwww_amherst_comCEESIMXMLSubsegments', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 586, 6), )

    
    Subsegments = property(__Subsegments.value, __Subsegments.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink,
        __Subsegments.name() : __Subsegments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencySegmentDiscreteAgility = ctFrequencySegmentDiscreteAgility
Namespace.addCategoryObject('typeBinding', 'ctFrequencySegmentDiscreteAgility', ctFrequencySegmentDiscreteAgility)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteAgilityFrequencySegmentList with content type ELEMENT_ONLY
class ctDiscreteAgilityFrequencySegmentList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteAgilityFrequencySegmentList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDiscreteAgilityFrequencySegmentList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 590, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteAgilityFrequencySegment uses Python identifier DiscreteAgilityFrequencySegment
    __DiscreteAgilityFrequencySegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAgilityFrequencySegment'), 'DiscreteAgilityFrequencySegment', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegmentList_httpwww_amherst_comCEESIMXMLDiscreteAgilityFrequencySegment', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 592, 6), )

    
    DiscreteAgilityFrequencySegment = property(__DiscreteAgilityFrequencySegment.value, __DiscreteAgilityFrequencySegment.set, None, None)

    _ElementMap.update({
        __DiscreteAgilityFrequencySegment.name() : __DiscreteAgilityFrequencySegment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDiscreteAgilityFrequencySegmentList = ctDiscreteAgilityFrequencySegmentList
Namespace.addCategoryObject('typeBinding', 'ctDiscreteAgilityFrequencySegmentList', ctDiscreteAgilityFrequencySegmentList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteAgilityFrequencySegment with content type ELEMENT_ONLY
class ctDiscreteAgilityFrequencySegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDiscreteAgilityFrequencySegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDiscreteAgilityFrequencySegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 596, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 598, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 599, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 600, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 601, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencySource uses Python identifier FrequencySource
    __FrequencySource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), 'FrequencySource', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLFrequencySource', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 602, 6), )

    
    FrequencySource = property(__FrequencySource.value, __FrequencySource.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PowerLevelKind uses Python identifier PowerLevelKind
    __PowerLevelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), 'PowerLevelKind', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLPowerLevelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 603, 6), )

    
    PowerLevelKind = property(__PowerLevelKind.value, __PowerLevelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PooledStatus uses Python identifier PooledStatus
    __PooledStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), 'PooledStatus', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLPooledStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 604, 6), )

    
    PooledStatus = property(__PooledStatus.value, __PooledStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PoolNumber uses Python identifier PoolNumber
    __PoolNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), 'PoolNumber', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLPoolNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 605, 6), )

    
    PoolNumber = property(__PoolNumber.value, __PoolNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ChannelNumber uses Python identifier ChannelNumber
    __ChannelNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), 'ChannelNumber', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLChannelNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 606, 6), )

    
    ChannelNumber = property(__ChannelNumber.value, __ChannelNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DedicatedChannelStatus uses Python identifier DedicatedChannelStatus
    __DedicatedChannelStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), 'DedicatedChannelStatus', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLDedicatedChannelStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 607, 6), )

    
    DedicatedChannelStatus = property(__DedicatedChannelStatus.value, __DedicatedChannelStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VirtualNumber uses Python identifier VirtualNumber
    __VirtualNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), 'VirtualNumber', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLVirtualNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 608, 6), )

    
    VirtualNumber = property(__VirtualNumber.value, __VirtualNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 609, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 610, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctDiscreteAgilityFrequencySegment_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 611, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    _ElementMap.update({
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __Frequency.name() : __Frequency,
        __FrequencySource.name() : __FrequencySource,
        __PowerLevelKind.name() : __PowerLevelKind,
        __PooledStatus.name() : __PooledStatus,
        __PoolNumber.name() : __PoolNumber,
        __ChannelNumber.name() : __ChannelNumber,
        __DedicatedChannelStatus.name() : __DedicatedChannelStatus,
        __VirtualNumber.name() : __VirtualNumber,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ScanTrigger.name() : __ScanTrigger
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDiscreteAgilityFrequencySegment = ctDiscreteAgilityFrequencySegment
Namespace.addCategoryObject('typeBinding', 'ctDiscreteAgilityFrequencySegment', ctDiscreteAgilityFrequencySegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSequence with content type ELEMENT_ONLY
class ctScanSequence (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSequence with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSequence')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 615, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentAzEl uses Python identifier ScanSegmentAzEl
    __ScanSegmentAzEl = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentAzEl'), 'ScanSegmentAzEl', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentAzEl', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 618, 6), )

    
    ScanSegmentAzEl = property(__ScanSegmentAzEl.value, __ScanSegmentAzEl.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentConical uses Python identifier ScanSegmentConical
    __ScanSegmentConical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentConical'), 'ScanSegmentConical', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentConical', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 619, 6), )

    
    ScanSegmentConical = property(__ScanSegmentConical.value, __ScanSegmentConical.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentElectronic uses Python identifier ScanSegmentElectronic
    __ScanSegmentElectronic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentElectronic'), 'ScanSegmentElectronic', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentElectronic', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 620, 6), )

    
    ScanSegmentElectronic = property(__ScanSegmentElectronic.value, __ScanSegmentElectronic.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentHelical uses Python identifier ScanSegmentHelical
    __ScanSegmentHelical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentHelical'), 'ScanSegmentHelical', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentHelical', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 621, 6), )

    
    ScanSegmentHelical = property(__ScanSegmentHelical.value, __ScanSegmentHelical.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentSpiral uses Python identifier ScanSegmentSpiral
    __ScanSegmentSpiral = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentSpiral'), 'ScanSegmentSpiral', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentSpiral', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 622, 6), )

    
    ScanSegmentSpiral = property(__ScanSegmentSpiral.value, __ScanSegmentSpiral.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentInterleavedRaster uses Python identifier ScanSegmentInterleavedRaster
    __ScanSegmentInterleavedRaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentInterleavedRaster'), 'ScanSegmentInterleavedRaster', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentInterleavedRaster', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 623, 6), )

    
    ScanSegmentInterleavedRaster = property(__ScanSegmentInterleavedRaster.value, __ScanSegmentInterleavedRaster.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanSegmentNonInterleavedRaster uses Python identifier ScanSegmentNonInterleavedRaster
    __ScanSegmentNonInterleavedRaster = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentNonInterleavedRaster'), 'ScanSegmentNonInterleavedRaster', '__httpwww_amherst_comCEESIMXML_ctScanSequence_httpwww_amherst_comCEESIMXMLScanSegmentNonInterleavedRaster', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 624, 6), )

    
    ScanSegmentNonInterleavedRaster = property(__ScanSegmentNonInterleavedRaster.value, __ScanSegmentNonInterleavedRaster.set, None, None)

    _ElementMap.update({
        __ScanSegmentAzEl.name() : __ScanSegmentAzEl,
        __ScanSegmentConical.name() : __ScanSegmentConical,
        __ScanSegmentElectronic.name() : __ScanSegmentElectronic,
        __ScanSegmentHelical.name() : __ScanSegmentHelical,
        __ScanSegmentSpiral.name() : __ScanSegmentSpiral,
        __ScanSegmentInterleavedRaster.name() : __ScanSegmentInterleavedRaster,
        __ScanSegmentNonInterleavedRaster.name() : __ScanSegmentNonInterleavedRaster
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSequence = ctScanSequence
Namespace.addCategoryObject('typeBinding', 'ctScanSequence', ctScanSequence)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentAzEl with content type ELEMENT_ONLY
class ctScanSegmentAzEl (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentAzEl with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentAzEl')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 628, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 630, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 631, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanKind uses Python identifier AzScanKind
    __AzScanKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanKind'), 'AzScanKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzScanKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 632, 6), )

    
    AzScanKind = property(__AzScanKind.value, __AzScanKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSutTrackingSwitch uses Python identifier AzSutTrackingSwitch
    __AzSutTrackingSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackingSwitch'), 'AzSutTrackingSwitch', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzSutTrackingSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 633, 6), )

    
    AzSutTrackingSwitch = property(__AzSutTrackingSwitch.value, __AzSutTrackingSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzTrackingSwitch uses Python identifier AzTrackingSwitch
    __AzTrackingSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzTrackingSwitch'), 'AzTrackingSwitch', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzTrackingSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 634, 6), )

    
    AzTrackingSwitch = property(__AzTrackingSwitch.value, __AzTrackingSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzTrackOffset uses Python identifier AzTrackOffset
    __AzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), 'AzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 635, 6), )

    
    AzTrackOffset = property(__AzTrackOffset.value, __AzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzTrackPlatform uses Python identifier AzTrackPlatform
    __AzTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzTrackPlatform'), 'AzTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 636, 6), )

    
    AzTrackPlatform = property(__AzTrackPlatform.value, __AzTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzPointAngle uses Python identifier AzPointAngle
    __AzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), 'AzPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 637, 6), )

    
    AzPointAngle = property(__AzPointAngle.value, __AzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSectorWidth uses Python identifier AzSectorWidth
    __AzSectorWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSectorWidth'), 'AzSectorWidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzSectorWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 638, 6), )

    
    AzSectorWidth = property(__AzSectorWidth.value, __AzSectorWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzInitialBeamOffset uses Python identifier AzInitialBeamOffset
    __AzInitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset'), 'AzInitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 639, 6), )

    
    AzInitialBeamOffset = property(__AzInitialBeamOffset.value, __AzInitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanPeriod uses Python identifier AzScanPeriod
    __AzScanPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanPeriod'), 'AzScanPeriod', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzScanPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 640, 6), )

    
    AzScanPeriod = property(__AzScanPeriod.value, __AzScanPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzPeriodSynchronization uses Python identifier AzPeriodSynchronization
    __AzPeriodSynchronization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzPeriodSynchronization'), 'AzPeriodSynchronization', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzPeriodSynchronization', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 641, 6), )

    
    AzPeriodSynchronization = property(__AzPeriodSynchronization.value, __AzPeriodSynchronization.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzDirection uses Python identifier AzDirection
    __AzDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzDirection'), 'AzDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 642, 6), )

    
    AzDirection = property(__AzDirection.value, __AzDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanMotion uses Python identifier AzScanMotion
    __AzScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanMotion'), 'AzScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 643, 6), )

    
    AzScanMotion = property(__AzScanMotion.value, __AzScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzFlybackTime uses Python identifier AzFlybackTime
    __AzFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzFlybackTime'), 'AzFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 644, 6), )

    
    AzFlybackTime = property(__AzFlybackTime.value, __AzFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanReset uses Python identifier AzScanReset
    __AzScanReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanReset'), 'AzScanReset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzScanReset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 645, 6), )

    
    AzScanReset = property(__AzScanReset.value, __AzScanReset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzMasterGenerator uses Python identifier AzMasterGenerator
    __AzMasterGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzMasterGenerator'), 'AzMasterGenerator', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzMasterGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 646, 6), )

    
    AzMasterGenerator = property(__AzMasterGenerator.value, __AzMasterGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzMasterOffset uses Python identifier AzMasterOffset
    __AzMasterOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzMasterOffset'), 'AzMasterOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzMasterOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 647, 6), )

    
    AzMasterOffset = property(__AzMasterOffset.value, __AzMasterOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzExitCondition uses Python identifier AzExitCondition
    __AzExitCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzExitCondition'), 'AzExitCondition', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzExitCondition', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 648, 6), )

    
    AzExitCondition = property(__AzExitCondition.value, __AzExitCondition.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanKind uses Python identifier ElScanKind
    __ElScanKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanKind'), 'ElScanKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElScanKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 649, 6), )

    
    ElScanKind = property(__ElScanKind.value, __ElScanKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSutTrackingSwitch uses Python identifier ElSutTrackingSwitch
    __ElSutTrackingSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackingSwitch'), 'ElSutTrackingSwitch', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElSutTrackingSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 650, 6), )

    
    ElSutTrackingSwitch = property(__ElSutTrackingSwitch.value, __ElSutTrackingSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElTrackingSwitch uses Python identifier ElTrackingSwitch
    __ElTrackingSwitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElTrackingSwitch'), 'ElTrackingSwitch', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElTrackingSwitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 651, 6), )

    
    ElTrackingSwitch = property(__ElTrackingSwitch.value, __ElTrackingSwitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElTrackOffset uses Python identifier ElTrackOffset
    __ElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), 'ElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 652, 6), )

    
    ElTrackOffset = property(__ElTrackOffset.value, __ElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElTrackPlatform uses Python identifier ElTrackPlatform
    __ElTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElTrackPlatform'), 'ElTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 653, 6), )

    
    ElTrackPlatform = property(__ElTrackPlatform.value, __ElTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElPointAngle uses Python identifier ElPointAngle
    __ElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), 'ElPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 654, 6), )

    
    ElPointAngle = property(__ElPointAngle.value, __ElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSectorWidth uses Python identifier ElSectorWidth
    __ElSectorWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSectorWidth'), 'ElSectorWidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElSectorWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 655, 6), )

    
    ElSectorWidth = property(__ElSectorWidth.value, __ElSectorWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElInitialBeamOffset uses Python identifier ElInitialBeamOffset
    __ElInitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElInitialBeamOffset'), 'ElInitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 656, 6), )

    
    ElInitialBeamOffset = property(__ElInitialBeamOffset.value, __ElInitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanPeriod uses Python identifier ElScanPeriod
    __ElScanPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanPeriod'), 'ElScanPeriod', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElScanPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 657, 6), )

    
    ElScanPeriod = property(__ElScanPeriod.value, __ElScanPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElPeriodSynchronization uses Python identifier ElPeriodSynchronization
    __ElPeriodSynchronization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElPeriodSynchronization'), 'ElPeriodSynchronization', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElPeriodSynchronization', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 658, 6), )

    
    ElPeriodSynchronization = property(__ElPeriodSynchronization.value, __ElPeriodSynchronization.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElDirection uses Python identifier ElDirection
    __ElDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElDirection'), 'ElDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 659, 6), )

    
    ElDirection = property(__ElDirection.value, __ElDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanMotion uses Python identifier ElScanMotion
    __ElScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanMotion'), 'ElScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 660, 6), )

    
    ElScanMotion = property(__ElScanMotion.value, __ElScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElFlybackTime uses Python identifier ElFlybackTime
    __ElFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElFlybackTime'), 'ElFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 661, 6), )

    
    ElFlybackTime = property(__ElFlybackTime.value, __ElFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanReset uses Python identifier ElScanReset
    __ElScanReset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanReset'), 'ElScanReset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElScanReset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 662, 6), )

    
    ElScanReset = property(__ElScanReset.value, __ElScanReset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElMasterGenerator uses Python identifier ElMasterGenerator
    __ElMasterGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElMasterGenerator'), 'ElMasterGenerator', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElMasterGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 663, 6), )

    
    ElMasterGenerator = property(__ElMasterGenerator.value, __ElMasterGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElMasterOffset uses Python identifier ElMasterOffset
    __ElMasterOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElMasterOffset'), 'ElMasterOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElMasterOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 664, 6), )

    
    ElMasterOffset = property(__ElMasterOffset.value, __ElMasterOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElExitCondition uses Python identifier ElExitCondition
    __ElExitCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElExitCondition'), 'ElExitCondition', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElExitCondition', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 665, 6), )

    
    ElExitCondition = property(__ElExitCondition.value, __ElExitCondition.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 666, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 667, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerStatus uses Python identifier PalmerStatus
    __PalmerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), 'PalmerStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 668, 6), )

    
    PalmerStatus = property(__PalmerStatus.value, __PalmerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerInitialOffset uses Python identifier PalmerInitialOffset
    __PalmerInitialOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), 'PalmerInitialOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerInitialOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 669, 6), )

    
    PalmerInitialOffset = property(__PalmerInitialOffset.value, __PalmerInitialOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerSquintAngle uses Python identifier PalmerSquintAngle
    __PalmerSquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), 'PalmerSquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 670, 6), )

    
    PalmerSquintAngle = property(__PalmerSquintAngle.value, __PalmerSquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerRate uses Python identifier PalmerRate
    __PalmerRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), 'PalmerRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 671, 6), )

    
    PalmerRate = property(__PalmerRate.value, __PalmerRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 672, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 673, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerExitCondition uses Python identifier PalmerExitCondition
    __PalmerExitCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerExitCondition'), 'PalmerExitCondition', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerExitCondition', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 674, 6), )

    
    PalmerExitCondition = property(__PalmerExitCondition.value, __PalmerExitCondition.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 675, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 676, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 677, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 678, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 679, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 680, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 681, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 682, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 683, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 684, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 685, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 686, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 687, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 688, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 689, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 690, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 691, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthFrequencyTrigger uses Python identifier AzimuthFrequencyTrigger
    __AzimuthFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthFrequencyTrigger'), 'AzimuthFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzimuthFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 692, 6), )

    
    AzimuthFrequencyTrigger = property(__AzimuthFrequencyTrigger.value, __AzimuthFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthPriTrigger uses Python identifier AzimuthPriTrigger
    __AzimuthPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPriTrigger'), 'AzimuthPriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzimuthPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 693, 6), )

    
    AzimuthPriTrigger = property(__AzimuthPriTrigger.value, __AzimuthPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthPulseTrigger uses Python identifier AzimuthPulseTrigger
    __AzimuthPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPulseTrigger'), 'AzimuthPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzimuthPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 694, 6), )

    
    AzimuthPulseTrigger = property(__AzimuthPulseTrigger.value, __AzimuthPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationFrequencyTrigger uses Python identifier ElevationFrequencyTrigger
    __ElevationFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationFrequencyTrigger'), 'ElevationFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElevationFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 695, 6), )

    
    ElevationFrequencyTrigger = property(__ElevationFrequencyTrigger.value, __ElevationFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationPriTrigger uses Python identifier ElevationPriTrigger
    __ElevationPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationPriTrigger'), 'ElevationPriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElevationPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 696, 6), )

    
    ElevationPriTrigger = property(__ElevationPriTrigger.value, __ElevationPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationPulseTrigger uses Python identifier ElevationPulseTrigger
    __ElevationPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationPulseTrigger'), 'ElevationPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElevationPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 697, 6), )

    
    ElevationPulseTrigger = property(__ElevationPulseTrigger.value, __ElevationPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellFrequencyTrigger uses Python identifier DwellFrequencyTrigger
    __DwellFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellFrequencyTrigger'), 'DwellFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 698, 6), )

    
    DwellFrequencyTrigger = property(__DwellFrequencyTrigger.value, __DwellFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellPriTrigger uses Python identifier DwellPriTrigger
    __DwellPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellPriTrigger'), 'DwellPriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 699, 6), )

    
    DwellPriTrigger = property(__DwellPriTrigger.value, __DwellPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellPulseTrigger uses Python identifier DwellPulseTrigger
    __DwellPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellPulseTrigger'), 'DwellPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLDwellPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 700, 6), )

    
    DwellPulseTrigger = property(__DwellPulseTrigger.value, __DwellPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerFrequencyTrigger uses Python identifier PalmerFrequencyTrigger
    __PalmerFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerFrequencyTrigger'), 'PalmerFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 701, 6), )

    
    PalmerFrequencyTrigger = property(__PalmerFrequencyTrigger.value, __PalmerFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerPriTrigger uses Python identifier PalmerPriTrigger
    __PalmerPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerPriTrigger'), 'PalmerPriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 702, 6), )

    
    PalmerPriTrigger = property(__PalmerPriTrigger.value, __PalmerPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerPulseTrigger uses Python identifier PalmerPulseTrigger
    __PalmerPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerPulseTrigger'), 'PalmerPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLPalmerPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 703, 6), )

    
    PalmerPulseTrigger = property(__PalmerPulseTrigger.value, __PalmerPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 704, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 705, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 706, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentAzEl_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 707, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __AzScanKind.name() : __AzScanKind,
        __AzSutTrackingSwitch.name() : __AzSutTrackingSwitch,
        __AzTrackingSwitch.name() : __AzTrackingSwitch,
        __AzTrackOffset.name() : __AzTrackOffset,
        __AzTrackPlatform.name() : __AzTrackPlatform,
        __AzPointAngle.name() : __AzPointAngle,
        __AzSectorWidth.name() : __AzSectorWidth,
        __AzInitialBeamOffset.name() : __AzInitialBeamOffset,
        __AzScanPeriod.name() : __AzScanPeriod,
        __AzPeriodSynchronization.name() : __AzPeriodSynchronization,
        __AzDirection.name() : __AzDirection,
        __AzScanMotion.name() : __AzScanMotion,
        __AzFlybackTime.name() : __AzFlybackTime,
        __AzScanReset.name() : __AzScanReset,
        __AzMasterGenerator.name() : __AzMasterGenerator,
        __AzMasterOffset.name() : __AzMasterOffset,
        __AzExitCondition.name() : __AzExitCondition,
        __ElScanKind.name() : __ElScanKind,
        __ElSutTrackingSwitch.name() : __ElSutTrackingSwitch,
        __ElTrackingSwitch.name() : __ElTrackingSwitch,
        __ElTrackOffset.name() : __ElTrackOffset,
        __ElTrackPlatform.name() : __ElTrackPlatform,
        __ElPointAngle.name() : __ElPointAngle,
        __ElSectorWidth.name() : __ElSectorWidth,
        __ElInitialBeamOffset.name() : __ElInitialBeamOffset,
        __ElScanPeriod.name() : __ElScanPeriod,
        __ElPeriodSynchronization.name() : __ElPeriodSynchronization,
        __ElDirection.name() : __ElDirection,
        __ElScanMotion.name() : __ElScanMotion,
        __ElFlybackTime.name() : __ElFlybackTime,
        __ElScanReset.name() : __ElScanReset,
        __ElMasterGenerator.name() : __ElMasterGenerator,
        __ElMasterOffset.name() : __ElMasterOffset,
        __ElExitCondition.name() : __ElExitCondition,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __PalmerStatus.name() : __PalmerStatus,
        __PalmerInitialOffset.name() : __PalmerInitialOffset,
        __PalmerSquintAngle.name() : __PalmerSquintAngle,
        __PalmerRate.name() : __PalmerRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __AntennaRotation.name() : __AntennaRotation,
        __PalmerExitCondition.name() : __PalmerExitCondition,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __AzimuthFrequencyTrigger.name() : __AzimuthFrequencyTrigger,
        __AzimuthPriTrigger.name() : __AzimuthPriTrigger,
        __AzimuthPulseTrigger.name() : __AzimuthPulseTrigger,
        __ElevationFrequencyTrigger.name() : __ElevationFrequencyTrigger,
        __ElevationPriTrigger.name() : __ElevationPriTrigger,
        __ElevationPulseTrigger.name() : __ElevationPulseTrigger,
        __DwellFrequencyTrigger.name() : __DwellFrequencyTrigger,
        __DwellPriTrigger.name() : __DwellPriTrigger,
        __DwellPulseTrigger.name() : __DwellPulseTrigger,
        __PalmerFrequencyTrigger.name() : __PalmerFrequencyTrigger,
        __PalmerPriTrigger.name() : __PalmerPriTrigger,
        __PalmerPulseTrigger.name() : __PalmerPulseTrigger,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentAzEl = ctScanSegmentAzEl
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentAzEl', ctScanSegmentAzEl)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentConical with content type ELEMENT_ONLY
class ctScanSegmentConical (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentConical with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentConical')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 711, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 713, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 714, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBeamOffset uses Python identifier InitialBeamOffset
    __InitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), 'InitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 715, 6), )

    
    InitialBeamOffset = property(__InitialBeamOffset.value, __InitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SquintAngle uses Python identifier SquintAngle
    __SquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle'), 'SquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 716, 6), )

    
    SquintAngle = property(__SquintAngle.value, __SquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ConicalModRate uses Python identifier ConicalModRate
    __ConicalModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConicalModRate'), 'ConicalModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLConicalModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 717, 6), )

    
    ConicalModRate = property(__ConicalModRate.value, __ConicalModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 718, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DirectionKind uses Python identifier DirectionKind
    __DirectionKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind'), 'DirectionKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLDirectionKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 719, 6), )

    
    DirectionKind = property(__DirectionKind.value, __DirectionKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzPointAngle uses Python identifier AzPointAngle
    __AzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), 'AzPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 720, 6), )

    
    AzPointAngle = property(__AzPointAngle.value, __AzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElPointAngle uses Python identifier ElPointAngle
    __ElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), 'ElPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 721, 6), )

    
    ElPointAngle = property(__ElPointAngle.value, __ElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TrackPlatform uses Python identifier TrackPlatform
    __TrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform'), 'TrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 722, 6), )

    
    TrackPlatform = property(__TrackPlatform.value, __TrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzTrackOffset uses Python identifier AzTrackOffset
    __AzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), 'AzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 723, 6), )

    
    AzTrackOffset = property(__AzTrackOffset.value, __AzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElTrackOffset uses Python identifier ElTrackOffset
    __ElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), 'ElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 724, 6), )

    
    ElTrackOffset = property(__ElTrackOffset.value, __ElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 725, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 726, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 727, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 728, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 729, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 730, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 731, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 732, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 733, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 734, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 735, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 736, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 737, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 738, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 739, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 740, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 741, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 742, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 743, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 744, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 745, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 746, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 747, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 748, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentConical_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 749, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __InitialBeamOffset.name() : __InitialBeamOffset,
        __SquintAngle.name() : __SquintAngle,
        __ConicalModRate.name() : __ConicalModRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __DirectionKind.name() : __DirectionKind,
        __AzPointAngle.name() : __AzPointAngle,
        __ElPointAngle.name() : __ElPointAngle,
        __TrackPlatform.name() : __TrackPlatform,
        __AzTrackOffset.name() : __AzTrackOffset,
        __ElTrackOffset.name() : __ElTrackOffset,
        __AntennaRotation.name() : __AntennaRotation,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentConical = ctScanSegmentConical
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentConical', ctScanSegmentConical)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentElectronic with content type ELEMENT_ONLY
class ctScanSegmentElectronic (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentElectronic with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentElectronic')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 753, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 755, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 756, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Beams uses Python identifier Beams
    __Beams = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Beams'), 'Beams', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLBeams', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 757, 6), )

    
    Beams = property(__Beams.value, __Beams.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorKind uses Python identifier InterruptGeneratorKind
    __InterruptGeneratorKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorKind'), 'InterruptGeneratorKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLInterruptGeneratorKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 758, 6), )

    
    InterruptGeneratorKind = property(__InterruptGeneratorKind.value, __InterruptGeneratorKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGenerators uses Python identifier InterruptGenerators
    __InterruptGenerators = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerators'), 'InterruptGenerators', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLInterruptGenerators', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 759, 6), )

    
    InterruptGenerators = property(__InterruptGenerators.value, __InterruptGenerators.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 760, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 761, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SwitchDelayState uses Python identifier SwitchDelayState
    __SwitchDelayState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayState'), 'SwitchDelayState', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSwitchDelayState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 762, 6), )

    
    SwitchDelayState = property(__SwitchDelayState.value, __SwitchDelayState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SwitchDelayKind uses Python identifier SwitchDelayKind
    __SwitchDelayKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayKind'), 'SwitchDelayKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSwitchDelayKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 763, 6), )

    
    SwitchDelayKind = property(__SwitchDelayKind.value, __SwitchDelayKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SwitchDelayTime uses Python identifier SwitchDelayTime
    __SwitchDelayTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTime'), 'SwitchDelayTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSwitchDelayTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 764, 6), )

    
    SwitchDelayTime = property(__SwitchDelayTime.value, __SwitchDelayTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SwitchDelayTimePulses uses Python identifier SwitchDelayTimePulses
    __SwitchDelayTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTimePulses'), 'SwitchDelayTimePulses', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLSwitchDelayTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 765, 6), )

    
    SwitchDelayTimePulses = property(__SwitchDelayTimePulses.value, __SwitchDelayTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamListOrder uses Python identifier BeamListOrder
    __BeamListOrder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamListOrder'), 'BeamListOrder', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLBeamListOrder', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 766, 6), )

    
    BeamListOrder = property(__BeamListOrder.value, __BeamListOrder.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzReferencePoint uses Python identifier AzReferencePoint
    __AzReferencePoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzReferencePoint'), 'AzReferencePoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzReferencePoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 767, 6), )

    
    AzReferencePoint = property(__AzReferencePoint.value, __AzReferencePoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElReferencePoint uses Python identifier ElReferencePoint
    __ElReferencePoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElReferencePoint'), 'ElReferencePoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElReferencePoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 768, 6), )

    
    ElReferencePoint = property(__ElReferencePoint.value, __ElReferencePoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzPlatformTrackRefOffset uses Python identifier AzPlatformTrackRefOffset
    __AzPlatformTrackRefOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzPlatformTrackRefOffset'), 'AzPlatformTrackRefOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzPlatformTrackRefOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 769, 6), )

    
    AzPlatformTrackRefOffset = property(__AzPlatformTrackRefOffset.value, __AzPlatformTrackRefOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElPlatformTrackRefOffset uses Python identifier ElPlatformTrackRefOffset
    __ElPlatformTrackRefOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElPlatformTrackRefOffset'), 'ElPlatformTrackRefOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElPlatformTrackRefOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 770, 6), )

    
    ElPlatformTrackRefOffset = property(__ElPlatformTrackRefOffset.value, __ElPlatformTrackRefOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSutTrackRefOffset uses Python identifier AzSutTrackRefOffset
    __AzSutTrackRefOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackRefOffset'), 'AzSutTrackRefOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzSutTrackRefOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 771, 6), )

    
    AzSutTrackRefOffset = property(__AzSutTrackRefOffset.value, __AzSutTrackRefOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSutTrackRefOffset uses Python identifier ElSutTrackRefOffset
    __ElSutTrackRefOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackRefOffset'), 'ElSutTrackRefOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElSutTrackRefOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 772, 6), )

    
    ElSutTrackRefOffset = property(__ElSutTrackRefOffset.value, __ElSutTrackRefOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 773, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 774, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 775, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 776, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 777, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 778, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 779, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 780, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 781, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 782, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 783, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 784, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 785, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 786, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentElectronic_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 787, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Beams.name() : __Beams,
        __InterruptGeneratorKind.name() : __InterruptGeneratorKind,
        __InterruptGenerators.name() : __InterruptGenerators,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __SwitchDelayState.name() : __SwitchDelayState,
        __SwitchDelayKind.name() : __SwitchDelayKind,
        __SwitchDelayTime.name() : __SwitchDelayTime,
        __SwitchDelayTimePulses.name() : __SwitchDelayTimePulses,
        __BeamListOrder.name() : __BeamListOrder,
        __AzReferencePoint.name() : __AzReferencePoint,
        __ElReferencePoint.name() : __ElReferencePoint,
        __AzPlatformTrackRefOffset.name() : __AzPlatformTrackRefOffset,
        __ElPlatformTrackRefOffset.name() : __ElPlatformTrackRefOffset,
        __AzSutTrackRefOffset.name() : __AzSutTrackRefOffset,
        __ElSutTrackRefOffset.name() : __ElSutTrackRefOffset,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentElectronic = ctScanSegmentElectronic
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentElectronic', ctScanSegmentElectronic)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBeamList with content type ELEMENT_ONLY
class ctBeamList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBeamList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBeamList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 791, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Beam uses Python identifier Beam
    __Beam = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Beam'), 'Beam', '__httpwww_amherst_comCEESIMXML_ctBeamList_httpwww_amherst_comCEESIMXMLBeam', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 793, 6), )

    
    Beam = property(__Beam.value, __Beam.set, None, None)

    _ElementMap.update({
        __Beam.name() : __Beam
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBeamList = ctBeamList
Namespace.addCategoryObject('typeBinding', 'ctBeamList', ctBeamList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBeam with content type ELEMENT_ONLY
class ctBeam (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBeam with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBeam')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 797, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDirectionKind uses Python identifier BeamDirectionKind
    __BeamDirectionKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDirectionKind'), 'BeamDirectionKind', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDirectionKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 799, 6), )

    
    BeamDirectionKind = property(__BeamDirectionKind.value, __BeamDirectionKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamAzPointAngle uses Python identifier BeamAzPointAngle
    __BeamAzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamAzPointAngle'), 'BeamAzPointAngle', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 800, 6), )

    
    BeamAzPointAngle = property(__BeamAzPointAngle.value, __BeamAzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamElPointAngle uses Python identifier BeamElPointAngle
    __BeamElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamElPointAngle'), 'BeamElPointAngle', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 801, 6), )

    
    BeamElPointAngle = property(__BeamElPointAngle.value, __BeamElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamTrackPlatform uses Python identifier BeamTrackPlatform
    __BeamTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamTrackPlatform'), 'BeamTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 802, 6), )

    
    BeamTrackPlatform = property(__BeamTrackPlatform.value, __BeamTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamAzTrackOffset uses Python identifier BeamAzTrackOffset
    __BeamAzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamAzTrackOffset'), 'BeamAzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 803, 6), )

    
    BeamAzTrackOffset = property(__BeamAzTrackOffset.value, __BeamAzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamElTrackOffset uses Python identifier BeamElTrackOffset
    __BeamElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamElTrackOffset'), 'BeamElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 804, 6), )

    
    BeamElTrackOffset = property(__BeamElTrackOffset.value, __BeamElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellStatus uses Python identifier BeamDwellStatus
    __BeamDwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellStatus'), 'BeamDwellStatus', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 805, 6), )

    
    BeamDwellStatus = property(__BeamDwellStatus.value, __BeamDwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellKind uses Python identifier BeamDwellKind
    __BeamDwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellKind'), 'BeamDwellKind', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 806, 6), )

    
    BeamDwellKind = property(__BeamDwellKind.value, __BeamDwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellTime uses Python identifier BeamDwellTime
    __BeamDwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTime'), 'BeamDwellTime', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 807, 6), )

    
    BeamDwellTime = property(__BeamDwellTime.value, __BeamDwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellVariation uses Python identifier BeamDwellVariation
    __BeamDwellVariation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariation'), 'BeamDwellVariation', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellVariation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 808, 6), )

    
    BeamDwellVariation = property(__BeamDwellVariation.value, __BeamDwellVariation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellTimePulses uses Python identifier BeamDwellTimePulses
    __BeamDwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTimePulses'), 'BeamDwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 809, 6), )

    
    BeamDwellTimePulses = property(__BeamDwellTimePulses.value, __BeamDwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamDwellVariationPulses uses Python identifier BeamDwellVariationPulses
    __BeamDwellVariationPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariationPulses'), 'BeamDwellVariationPulses', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamDwellVariationPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 810, 6), )

    
    BeamDwellVariationPulses = property(__BeamDwellVariationPulses.value, __BeamDwellVariationPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamAzimuthTestPoint uses Python identifier BeamAzimuthTestPoint
    __BeamAzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamAzimuthTestPoint'), 'BeamAzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 811, 6), )

    
    BeamAzimuthTestPoint = property(__BeamAzimuthTestPoint.value, __BeamAzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamElevationTestPoint uses Python identifier BeamElevationTestPoint
    __BeamElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamElevationTestPoint'), 'BeamElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 812, 6), )

    
    BeamElevationTestPoint = property(__BeamElevationTestPoint.value, __BeamElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamFrequencyTrigger uses Python identifier BeamFrequencyTrigger
    __BeamFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamFrequencyTrigger'), 'BeamFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 813, 6), )

    
    BeamFrequencyTrigger = property(__BeamFrequencyTrigger.value, __BeamFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamPriTrigger uses Python identifier BeamPriTrigger
    __BeamPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamPriTrigger'), 'BeamPriTrigger', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 814, 6), )

    
    BeamPriTrigger = property(__BeamPriTrigger.value, __BeamPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamPulseTrigger uses Python identifier BeamPulseTrigger
    __BeamPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamPulseTrigger'), 'BeamPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 815, 6), )

    
    BeamPulseTrigger = property(__BeamPulseTrigger.value, __BeamPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BeamBlankingList uses Python identifier BeamBlankingList
    __BeamBlankingList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BeamBlankingList'), 'BeamBlankingList', '__httpwww_amherst_comCEESIMXML_ctBeam_httpwww_amherst_comCEESIMXMLBeamBlankingList', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 816, 6), )

    
    BeamBlankingList = property(__BeamBlankingList.value, __BeamBlankingList.set, None, None)

    _ElementMap.update({
        __BeamDirectionKind.name() : __BeamDirectionKind,
        __BeamAzPointAngle.name() : __BeamAzPointAngle,
        __BeamElPointAngle.name() : __BeamElPointAngle,
        __BeamTrackPlatform.name() : __BeamTrackPlatform,
        __BeamAzTrackOffset.name() : __BeamAzTrackOffset,
        __BeamElTrackOffset.name() : __BeamElTrackOffset,
        __BeamDwellStatus.name() : __BeamDwellStatus,
        __BeamDwellKind.name() : __BeamDwellKind,
        __BeamDwellTime.name() : __BeamDwellTime,
        __BeamDwellVariation.name() : __BeamDwellVariation,
        __BeamDwellTimePulses.name() : __BeamDwellTimePulses,
        __BeamDwellVariationPulses.name() : __BeamDwellVariationPulses,
        __BeamAzimuthTestPoint.name() : __BeamAzimuthTestPoint,
        __BeamElevationTestPoint.name() : __BeamElevationTestPoint,
        __BeamFrequencyTrigger.name() : __BeamFrequencyTrigger,
        __BeamPriTrigger.name() : __BeamPriTrigger,
        __BeamPulseTrigger.name() : __BeamPulseTrigger,
        __BeamBlankingList.name() : __BeamBlankingList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBeam = ctBeam
Namespace.addCategoryObject('typeBinding', 'ctBeam', ctBeam)


# Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptGeneratorList with content type ELEMENT_ONLY
class ctInterruptGeneratorList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptGeneratorList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctInterruptGeneratorList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 820, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGenerator uses Python identifier InterruptGenerator
    __InterruptGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerator'), 'InterruptGenerator', '__httpwww_amherst_comCEESIMXML_ctInterruptGeneratorList_httpwww_amherst_comCEESIMXMLInterruptGenerator', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 822, 6), )

    
    InterruptGenerator = property(__InterruptGenerator.value, __InterruptGenerator.set, None, None)

    _ElementMap.update({
        __InterruptGenerator.name() : __InterruptGenerator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctInterruptGeneratorList = ctInterruptGeneratorList
Namespace.addCategoryObject('typeBinding', 'ctInterruptGeneratorList', ctInterruptGeneratorList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptGenerator with content type ELEMENT_ONLY
class ctInterruptGenerator (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctInterruptGenerator with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctInterruptGenerator')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 826, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorGenNumber uses Python identifier InterruptGeneratorGenNumber
    __InterruptGeneratorGenNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorGenNumber'), 'InterruptGeneratorGenNumber', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorGenNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 828, 6), )

    
    InterruptGeneratorGenNumber = property(__InterruptGeneratorGenNumber.value, __InterruptGeneratorGenNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorInterruptActive uses Python identifier InterruptGeneratorInterruptActive
    __InterruptGeneratorInterruptActive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorInterruptActive'), 'InterruptGeneratorInterruptActive', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorInterruptActive', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 829, 6), )

    
    InterruptGeneratorInterruptActive = property(__InterruptGeneratorInterruptActive.value, __InterruptGeneratorInterruptActive.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorDuration uses Python identifier InterruptGeneratorDuration
    __InterruptGeneratorDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDuration'), 'InterruptGeneratorDuration', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 830, 6), )

    
    InterruptGeneratorDuration = property(__InterruptGeneratorDuration.value, __InterruptGeneratorDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorRevisit uses Python identifier InterruptGeneratorRevisit
    __InterruptGeneratorRevisit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisit'), 'InterruptGeneratorRevisit', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorRevisit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 831, 6), )

    
    InterruptGeneratorRevisit = property(__InterruptGeneratorRevisit.value, __InterruptGeneratorRevisit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorStartTime uses Python identifier InterruptGeneratorStartTime
    __InterruptGeneratorStartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTime'), 'InterruptGeneratorStartTime', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorStartTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 832, 6), )

    
    InterruptGeneratorStartTime = property(__InterruptGeneratorStartTime.value, __InterruptGeneratorStartTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorDurationPulses uses Python identifier InterruptGeneratorDurationPulses
    __InterruptGeneratorDurationPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDurationPulses'), 'InterruptGeneratorDurationPulses', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorDurationPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 833, 6), )

    
    InterruptGeneratorDurationPulses = property(__InterruptGeneratorDurationPulses.value, __InterruptGeneratorDurationPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorRevisitPulses uses Python identifier InterruptGeneratorRevisitPulses
    __InterruptGeneratorRevisitPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisitPulses'), 'InterruptGeneratorRevisitPulses', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorRevisitPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 834, 6), )

    
    InterruptGeneratorRevisitPulses = property(__InterruptGeneratorRevisitPulses.value, __InterruptGeneratorRevisitPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterruptGeneratorStartTimePulses uses Python identifier InterruptGeneratorStartTimePulses
    __InterruptGeneratorStartTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTimePulses'), 'InterruptGeneratorStartTimePulses', '__httpwww_amherst_comCEESIMXML_ctInterruptGenerator_httpwww_amherst_comCEESIMXMLInterruptGeneratorStartTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 835, 6), )

    
    InterruptGeneratorStartTimePulses = property(__InterruptGeneratorStartTimePulses.value, __InterruptGeneratorStartTimePulses.set, None, None)

    _ElementMap.update({
        __InterruptGeneratorGenNumber.name() : __InterruptGeneratorGenNumber,
        __InterruptGeneratorInterruptActive.name() : __InterruptGeneratorInterruptActive,
        __InterruptGeneratorDuration.name() : __InterruptGeneratorDuration,
        __InterruptGeneratorRevisit.name() : __InterruptGeneratorRevisit,
        __InterruptGeneratorStartTime.name() : __InterruptGeneratorStartTime,
        __InterruptGeneratorDurationPulses.name() : __InterruptGeneratorDurationPulses,
        __InterruptGeneratorRevisitPulses.name() : __InterruptGeneratorRevisitPulses,
        __InterruptGeneratorStartTimePulses.name() : __InterruptGeneratorStartTimePulses
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctInterruptGenerator = ctInterruptGenerator
Namespace.addCategoryObject('typeBinding', 'ctInterruptGenerator', ctInterruptGenerator)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentHelical with content type ELEMENT_ONLY
class ctScanSegmentHelical (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentHelical with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentHelical')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 839, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 841, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 842, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzStartAngle uses Python identifier AzStartAngle
    __AzStartAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzStartAngle'), 'AzStartAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzStartAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 843, 6), )

    
    AzStartAngle = property(__AzStartAngle.value, __AzStartAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElStartAngle uses Python identifier ElStartAngle
    __ElStartAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElStartAngle'), 'ElStartAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElStartAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 844, 6), )

    
    ElStartAngle = property(__ElStartAngle.value, __ElStartAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanDirection uses Python identifier AzScanDirection
    __AzScanDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanDirection'), 'AzScanDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzScanDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 845, 6), )

    
    AzScanDirection = property(__AzScanDirection.value, __AzScanDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanDirection uses Python identifier ElScanDirection
    __ElScanDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanDirection'), 'ElScanDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElScanDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 846, 6), )

    
    ElScanDirection = property(__ElScanDirection.value, __ElScanDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NumberOfElevationLevels uses Python identifier NumberOfElevationLevels
    __NumberOfElevationLevels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfElevationLevels'), 'NumberOfElevationLevels', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLNumberOfElevationLevels', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 847, 6), )

    
    NumberOfElevationLevels = property(__NumberOfElevationLevels.value, __NumberOfElevationLevels.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SectorWidth uses Python identifier SectorWidth
    __SectorWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SectorWidth'), 'SectorWidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLSectorWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 848, 6), )

    
    SectorWidth = property(__SectorWidth.value, __SectorWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzInitialBeamOffset uses Python identifier AzInitialBeamOffset
    __AzInitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset'), 'AzInitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 849, 6), )

    
    AzInitialBeamOffset = property(__AzInitialBeamOffset.value, __AzInitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanPeriod uses Python identifier ScanPeriod
    __ScanPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanPeriod'), 'ScanPeriod', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLScanPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 850, 6), )

    
    ScanPeriod = property(__ScanPeriod.value, __ScanPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanMotion uses Python identifier ScanMotion
    __ScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), 'ScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 851, 6), )

    
    ScanMotion = property(__ScanMotion.value, __ScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FlybackTime uses Python identifier FlybackTime
    __FlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime'), 'FlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 852, 6), )

    
    FlybackTime = property(__FlybackTime.value, __FlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 853, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 854, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerStatus uses Python identifier PalmerStatus
    __PalmerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), 'PalmerStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPalmerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 855, 6), )

    
    PalmerStatus = property(__PalmerStatus.value, __PalmerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerInitialOffset uses Python identifier PalmerInitialOffset
    __PalmerInitialOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), 'PalmerInitialOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPalmerInitialOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 856, 6), )

    
    PalmerInitialOffset = property(__PalmerInitialOffset.value, __PalmerInitialOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerSquintAngle uses Python identifier PalmerSquintAngle
    __PalmerSquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), 'PalmerSquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPalmerSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 857, 6), )

    
    PalmerSquintAngle = property(__PalmerSquintAngle.value, __PalmerSquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerRate uses Python identifier PalmerRate
    __PalmerRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), 'PalmerRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPalmerRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 858, 6), )

    
    PalmerRate = property(__PalmerRate.value, __PalmerRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 859, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 860, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 861, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 862, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 863, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 864, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 865, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 866, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 867, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 868, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 869, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 870, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 871, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 872, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 873, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 874, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 875, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 876, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 877, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 878, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 879, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentHelical_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 880, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __AzStartAngle.name() : __AzStartAngle,
        __ElStartAngle.name() : __ElStartAngle,
        __AzScanDirection.name() : __AzScanDirection,
        __ElScanDirection.name() : __ElScanDirection,
        __NumberOfElevationLevels.name() : __NumberOfElevationLevels,
        __SectorWidth.name() : __SectorWidth,
        __AzInitialBeamOffset.name() : __AzInitialBeamOffset,
        __ScanPeriod.name() : __ScanPeriod,
        __ScanMotion.name() : __ScanMotion,
        __FlybackTime.name() : __FlybackTime,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __PalmerStatus.name() : __PalmerStatus,
        __PalmerInitialOffset.name() : __PalmerInitialOffset,
        __PalmerSquintAngle.name() : __PalmerSquintAngle,
        __PalmerRate.name() : __PalmerRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __AntennaRotation.name() : __AntennaRotation,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentHelical = ctScanSegmentHelical
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentHelical', ctScanSegmentHelical)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentSpiral with content type ELEMENT_ONLY
class ctScanSegmentSpiral (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentSpiral with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentSpiral')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 884, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 886, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 887, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBeamOffset uses Python identifier InitialBeamOffset
    __InitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), 'InitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 888, 6), )

    
    InitialBeamOffset = property(__InitialBeamOffset.value, __InitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SquintAngle uses Python identifier SquintAngle
    __SquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle'), 'SquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 889, 6), )

    
    SquintAngle = property(__SquintAngle.value, __SquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SpiralModulationRate uses Python identifier SpiralModulationRate
    __SpiralModulationRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpiralModulationRate'), 'SpiralModulationRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLSpiralModulationRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 890, 6), )

    
    SpiralModulationRate = property(__SpiralModulationRate.value, __SpiralModulationRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 891, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NumberOfRevolutions uses Python identifier NumberOfRevolutions
    __NumberOfRevolutions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRevolutions'), 'NumberOfRevolutions', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLNumberOfRevolutions', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 892, 6), )

    
    NumberOfRevolutions = property(__NumberOfRevolutions.value, __NumberOfRevolutions.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanMotion uses Python identifier ScanMotion
    __ScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), 'ScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 893, 6), )

    
    ScanMotion = property(__ScanMotion.value, __ScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FlybackTime uses Python identifier FlybackTime
    __FlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime'), 'FlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 894, 6), )

    
    FlybackTime = property(__FlybackTime.value, __FlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SpiralDirection uses Python identifier SpiralDirection
    __SpiralDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpiralDirection'), 'SpiralDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLSpiralDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 895, 6), )

    
    SpiralDirection = property(__SpiralDirection.value, __SpiralDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DirectionKind uses Python identifier DirectionKind
    __DirectionKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind'), 'DirectionKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLDirectionKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 896, 6), )

    
    DirectionKind = property(__DirectionKind.value, __DirectionKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzPointAngle uses Python identifier AzPointAngle
    __AzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), 'AzPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 897, 6), )

    
    AzPointAngle = property(__AzPointAngle.value, __AzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElPointAngle uses Python identifier ElPointAngle
    __ElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), 'ElPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 898, 6), )

    
    ElPointAngle = property(__ElPointAngle.value, __ElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TrackPlatform uses Python identifier TrackPlatform
    __TrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform'), 'TrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 899, 6), )

    
    TrackPlatform = property(__TrackPlatform.value, __TrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzTrackOffset uses Python identifier AzTrackOffset
    __AzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), 'AzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 900, 6), )

    
    AzTrackOffset = property(__AzTrackOffset.value, __AzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElTrackOffset uses Python identifier ElTrackOffset
    __ElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), 'ElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 901, 6), )

    
    ElTrackOffset = property(__ElTrackOffset.value, __ElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 902, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 903, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 904, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 905, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 906, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 907, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 908, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 909, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 910, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 911, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 912, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 913, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 914, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 915, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 916, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 917, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 918, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 919, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 920, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 921, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentSpiral_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 922, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __InitialBeamOffset.name() : __InitialBeamOffset,
        __SquintAngle.name() : __SquintAngle,
        __SpiralModulationRate.name() : __SpiralModulationRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __NumberOfRevolutions.name() : __NumberOfRevolutions,
        __ScanMotion.name() : __ScanMotion,
        __FlybackTime.name() : __FlybackTime,
        __SpiralDirection.name() : __SpiralDirection,
        __DirectionKind.name() : __DirectionKind,
        __AzPointAngle.name() : __AzPointAngle,
        __ElPointAngle.name() : __ElPointAngle,
        __TrackPlatform.name() : __TrackPlatform,
        __AzTrackOffset.name() : __AzTrackOffset,
        __ElTrackOffset.name() : __ElTrackOffset,
        __AntennaRotation.name() : __AntennaRotation,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentSpiral = ctScanSegmentSpiral
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentSpiral', ctScanSegmentSpiral)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentInterleavedRaster with content type ELEMENT_ONLY
class ctScanSegmentInterleavedRaster (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentInterleavedRaster with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentInterleavedRaster')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 926, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 928, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 929, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterOrientation uses Python identifier RasterOrientation
    __RasterOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation'), 'RasterOrientation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterOrientation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 930, 6), )

    
    RasterOrientation = property(__RasterOrientation.value, __RasterOrientation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBarDirection uses Python identifier InitialBarDirection
    __InitialBarDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection'), 'InitialBarDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLInitialBarDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 931, 6), )

    
    InitialBarDirection = property(__InitialBarDirection.value, __InitialBarDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBeamOffset uses Python identifier InitialBeamOffset
    __InitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), 'InitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 932, 6), )

    
    InitialBeamOffset = property(__InitialBeamOffset.value, __InitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarScanRate uses Python identifier BarScanRate
    __BarScanRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate'), 'BarScanRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarScanRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 933, 6), )

    
    BarScanRate = property(__BarScanRate.value, __BarScanRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarTransitRate uses Python identifier BarTransitRate
    __BarTransitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate'), 'BarTransitRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarTransitRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 934, 6), )

    
    BarTransitRate = property(__BarTransitRate.value, __BarTransitRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterFlybackStatus uses Python identifier RasterFlybackStatus
    __RasterFlybackStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus'), 'RasterFlybackStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterFlybackStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 935, 6), )

    
    RasterFlybackStatus = property(__RasterFlybackStatus.value, __RasterFlybackStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterFlybackTime uses Python identifier RasterFlybackTime
    __RasterFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime'), 'RasterFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 936, 6), )

    
    RasterFlybackTime = property(__RasterFlybackTime.value, __RasterFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanMotion uses Python identifier ScanMotion
    __ScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), 'ScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 937, 6), )

    
    ScanMotion = property(__ScanMotion.value, __ScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarFlybackTime uses Python identifier BarFlybackTime
    __BarFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime'), 'BarFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 938, 6), )

    
    BarFlybackTime = property(__BarFlybackTime.value, __BarFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarDirectionKind uses Python identifier BarDirectionKind
    __BarDirectionKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind'), 'BarDirectionKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarDirectionKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 939, 6), )

    
    BarDirectionKind = property(__BarDirectionKind.value, __BarDirectionKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarAzPointAngle uses Python identifier BarAzPointAngle
    __BarAzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle'), 'BarAzPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 940, 6), )

    
    BarAzPointAngle = property(__BarAzPointAngle.value, __BarAzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarElPointAngle uses Python identifier BarElPointAngle
    __BarElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle'), 'BarElPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 941, 6), )

    
    BarElPointAngle = property(__BarElPointAngle.value, __BarElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarTrackPlatform uses Python identifier BarTrackPlatform
    __BarTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform'), 'BarTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 942, 6), )

    
    BarTrackPlatform = property(__BarTrackPlatform.value, __BarTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarAzTrackOffset uses Python identifier BarAzTrackOffset
    __BarAzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset'), 'BarAzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 943, 6), )

    
    BarAzTrackOffset = property(__BarAzTrackOffset.value, __BarAzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarElTrackOffset uses Python identifier BarElTrackOffset
    __BarElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset'), 'BarElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBarElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 944, 6), )

    
    BarElTrackOffset = property(__BarElTrackOffset.value, __BarElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Bars uses Python identifier Bars
    __Bars = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Bars'), 'Bars', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLBars', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 945, 6), )

    
    Bars = property(__Bars.value, __Bars.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarBlankingStatus uses Python identifier InterbarBlankingStatus
    __InterbarBlankingStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus'), 'InterbarBlankingStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLInterbarBlankingStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 946, 6), )

    
    InterbarBlankingStatus = property(__InterbarBlankingStatus.value, __InterbarBlankingStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 947, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 948, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerStatus uses Python identifier PalmerStatus
    __PalmerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), 'PalmerStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 949, 6), )

    
    PalmerStatus = property(__PalmerStatus.value, __PalmerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerInitialOffset uses Python identifier PalmerInitialOffset
    __PalmerInitialOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), 'PalmerInitialOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerInitialOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 950, 6), )

    
    PalmerInitialOffset = property(__PalmerInitialOffset.value, __PalmerInitialOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerSquintAngle uses Python identifier PalmerSquintAngle
    __PalmerSquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), 'PalmerSquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 951, 6), )

    
    PalmerSquintAngle = property(__PalmerSquintAngle.value, __PalmerSquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerRate uses Python identifier PalmerRate
    __PalmerRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), 'PalmerRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 952, 6), )

    
    PalmerRate = property(__PalmerRate.value, __PalmerRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 953, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 954, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 955, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 956, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 957, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 958, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 959, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 960, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 961, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 962, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 963, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 964, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 965, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 966, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 967, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 968, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 969, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 970, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentInterleavedRaster_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 971, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __RasterOrientation.name() : __RasterOrientation,
        __InitialBarDirection.name() : __InitialBarDirection,
        __InitialBeamOffset.name() : __InitialBeamOffset,
        __BarScanRate.name() : __BarScanRate,
        __BarTransitRate.name() : __BarTransitRate,
        __RasterFlybackStatus.name() : __RasterFlybackStatus,
        __RasterFlybackTime.name() : __RasterFlybackTime,
        __ScanMotion.name() : __ScanMotion,
        __BarFlybackTime.name() : __BarFlybackTime,
        __BarDirectionKind.name() : __BarDirectionKind,
        __BarAzPointAngle.name() : __BarAzPointAngle,
        __BarElPointAngle.name() : __BarElPointAngle,
        __BarTrackPlatform.name() : __BarTrackPlatform,
        __BarAzTrackOffset.name() : __BarAzTrackOffset,
        __BarElTrackOffset.name() : __BarElTrackOffset,
        __Bars.name() : __Bars,
        __InterbarBlankingStatus.name() : __InterbarBlankingStatus,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __PalmerStatus.name() : __PalmerStatus,
        __PalmerInitialOffset.name() : __PalmerInitialOffset,
        __PalmerSquintAngle.name() : __PalmerSquintAngle,
        __PalmerRate.name() : __PalmerRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __AntennaRotation.name() : __AntennaRotation,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentInterleavedRaster = ctScanSegmentInterleavedRaster
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentInterleavedRaster', ctScanSegmentInterleavedRaster)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBarList with content type ELEMENT_ONLY
class ctBarList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBarList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBarList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 975, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Bar uses Python identifier Bar
    __Bar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Bar'), 'Bar', '__httpwww_amherst_comCEESIMXML_ctBarList_httpwww_amherst_comCEESIMXMLBar', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 977, 6), )

    
    Bar = property(__Bar.value, __Bar.set, None, None)

    _ElementMap.update({
        __Bar.name() : __Bar
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBarList = ctBarList
Namespace.addCategoryObject('typeBinding', 'ctBarList', ctBarList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBar with content type ELEMENT_ONLY
class ctBar (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBar with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBar')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 981, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}BarWidth uses Python identifier BarWidth
    __BarWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarWidth'), 'BarWidth', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 983, 6), )

    
    BarWidth = property(__BarWidth.value, __BarWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarOffset uses Python identifier BarOffset
    __BarOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarOffset'), 'BarOffset', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 984, 6), )

    
    BarOffset = property(__BarOffset.value, __BarOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarFrequencyTrigger uses Python identifier BarFrequencyTrigger
    __BarFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarFrequencyTrigger'), 'BarFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 985, 6), )

    
    BarFrequencyTrigger = property(__BarFrequencyTrigger.value, __BarFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarPriTrigger uses Python identifier BarPriTrigger
    __BarPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarPriTrigger'), 'BarPriTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 986, 6), )

    
    BarPriTrigger = property(__BarPriTrigger.value, __BarPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarPulseTrigger uses Python identifier BarPulseTrigger
    __BarPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarPulseTrigger'), 'BarPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 987, 6), )

    
    BarPulseTrigger = property(__BarPulseTrigger.value, __BarPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarScanTrigger uses Python identifier BarScanTrigger
    __BarScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarScanTrigger'), 'BarScanTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLBarScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 988, 6), )

    
    BarScanTrigger = property(__BarScanTrigger.value, __BarScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarFrequencyTrigger uses Python identifier InterbarFrequencyTrigger
    __InterbarFrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarFrequencyTrigger'), 'InterbarFrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLInterbarFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 989, 6), )

    
    InterbarFrequencyTrigger = property(__InterbarFrequencyTrigger.value, __InterbarFrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarPriTrigger uses Python identifier InterbarPriTrigger
    __InterbarPriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarPriTrigger'), 'InterbarPriTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLInterbarPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 990, 6), )

    
    InterbarPriTrigger = property(__InterbarPriTrigger.value, __InterbarPriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarPulseTrigger uses Python identifier InterbarPulseTrigger
    __InterbarPulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarPulseTrigger'), 'InterbarPulseTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLInterbarPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 991, 6), )

    
    InterbarPulseTrigger = property(__InterbarPulseTrigger.value, __InterbarPulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarScanTrigger uses Python identifier InterbarScanTrigger
    __InterbarScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarScanTrigger'), 'InterbarScanTrigger', '__httpwww_amherst_comCEESIMXML_ctBar_httpwww_amherst_comCEESIMXMLInterbarScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 992, 6), )

    
    InterbarScanTrigger = property(__InterbarScanTrigger.value, __InterbarScanTrigger.set, None, None)

    _ElementMap.update({
        __BarWidth.name() : __BarWidth,
        __BarOffset.name() : __BarOffset,
        __BarFrequencyTrigger.name() : __BarFrequencyTrigger,
        __BarPriTrigger.name() : __BarPriTrigger,
        __BarPulseTrigger.name() : __BarPulseTrigger,
        __BarScanTrigger.name() : __BarScanTrigger,
        __InterbarFrequencyTrigger.name() : __InterbarFrequencyTrigger,
        __InterbarPriTrigger.name() : __InterbarPriTrigger,
        __InterbarPulseTrigger.name() : __InterbarPulseTrigger,
        __InterbarScanTrigger.name() : __InterbarScanTrigger
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBar = ctBar
Namespace.addCategoryObject('typeBinding', 'ctBar', ctBar)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentNonInterleavedRaster with content type ELEMENT_ONLY
class ctScanSegmentNonInterleavedRaster (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScanSegmentNonInterleavedRaster with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScanSegmentNonInterleavedRaster')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 996, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 998, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 999, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterOrientation uses Python identifier RasterOrientation
    __RasterOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation'), 'RasterOrientation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterOrientation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1000, 6), )

    
    RasterOrientation = property(__RasterOrientation.value, __RasterOrientation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBarDirection uses Python identifier InitialBarDirection
    __InitialBarDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection'), 'InitialBarDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLInitialBarDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1001, 6), )

    
    InitialBarDirection = property(__InitialBarDirection.value, __InitialBarDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarDirection uses Python identifier InterbarDirection
    __InterbarDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarDirection'), 'InterbarDirection', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLInterbarDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1002, 6), )

    
    InterbarDirection = property(__InterbarDirection.value, __InterbarDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NumberOfBars uses Python identifier NumberOfBars
    __NumberOfBars = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NumberOfBars'), 'NumberOfBars', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLNumberOfBars', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1003, 6), )

    
    NumberOfBars = property(__NumberOfBars.value, __NumberOfBars.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarWidth uses Python identifier BarWidth
    __BarWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarWidth'), 'BarWidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1004, 6), )

    
    BarWidth = property(__BarWidth.value, __BarWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InitialBeamOffset uses Python identifier InitialBeamOffset
    __InitialBeamOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), 'InitialBeamOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLInitialBeamOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1005, 6), )

    
    InitialBeamOffset = property(__InitialBeamOffset.value, __InitialBeamOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoverageAngle uses Python identifier CoverageAngle
    __CoverageAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoverageAngle'), 'CoverageAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLCoverageAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1006, 6), )

    
    CoverageAngle = property(__CoverageAngle.value, __CoverageAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarScanRate uses Python identifier BarScanRate
    __BarScanRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate'), 'BarScanRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarScanRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1007, 6), )

    
    BarScanRate = property(__BarScanRate.value, __BarScanRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarTransitRate uses Python identifier BarTransitRate
    __BarTransitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate'), 'BarTransitRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarTransitRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1008, 6), )

    
    BarTransitRate = property(__BarTransitRate.value, __BarTransitRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterFlybackStatus uses Python identifier RasterFlybackStatus
    __RasterFlybackStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus'), 'RasterFlybackStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterFlybackStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1009, 6), )

    
    RasterFlybackStatus = property(__RasterFlybackStatus.value, __RasterFlybackStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RasterFlybackTime uses Python identifier RasterFlybackTime
    __RasterFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime'), 'RasterFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLRasterFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1010, 6), )

    
    RasterFlybackTime = property(__RasterFlybackTime.value, __RasterFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarScanMotion uses Python identifier BarScanMotion
    __BarScanMotion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarScanMotion'), 'BarScanMotion', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarScanMotion', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1011, 6), )

    
    BarScanMotion = property(__BarScanMotion.value, __BarScanMotion.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarFlybackTime uses Python identifier BarFlybackTime
    __BarFlybackTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime'), 'BarFlybackTime', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarFlybackTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1012, 6), )

    
    BarFlybackTime = property(__BarFlybackTime.value, __BarFlybackTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BidirectionReturnOnSameBar uses Python identifier BidirectionReturnOnSameBar
    __BidirectionReturnOnSameBar = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BidirectionReturnOnSameBar'), 'BidirectionReturnOnSameBar', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBidirectionReturnOnSameBar', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1013, 6), )

    
    BidirectionReturnOnSameBar = property(__BidirectionReturnOnSameBar.value, __BidirectionReturnOnSameBar.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterbarBlankingStatus uses Python identifier InterbarBlankingStatus
    __InterbarBlankingStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus'), 'InterbarBlankingStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLInterbarBlankingStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1014, 6), )

    
    InterbarBlankingStatus = property(__InterbarBlankingStatus.value, __InterbarBlankingStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarDirectionKind uses Python identifier BarDirectionKind
    __BarDirectionKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind'), 'BarDirectionKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarDirectionKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1015, 6), )

    
    BarDirectionKind = property(__BarDirectionKind.value, __BarDirectionKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarAzPointAngle uses Python identifier BarAzPointAngle
    __BarAzPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle'), 'BarAzPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarAzPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1016, 6), )

    
    BarAzPointAngle = property(__BarAzPointAngle.value, __BarAzPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarElPointAngle uses Python identifier BarElPointAngle
    __BarElPointAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle'), 'BarElPointAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarElPointAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1017, 6), )

    
    BarElPointAngle = property(__BarElPointAngle.value, __BarElPointAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarTrackPlatform uses Python identifier BarTrackPlatform
    __BarTrackPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform'), 'BarTrackPlatform', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarTrackPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1018, 6), )

    
    BarTrackPlatform = property(__BarTrackPlatform.value, __BarTrackPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarAzTrackOffset uses Python identifier BarAzTrackOffset
    __BarAzTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset'), 'BarAzTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarAzTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1019, 6), )

    
    BarAzTrackOffset = property(__BarAzTrackOffset.value, __BarAzTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BarElTrackOffset uses Python identifier BarElTrackOffset
    __BarElTrackOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset'), 'BarElTrackOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLBarElTrackOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1020, 6), )

    
    BarElTrackOffset = property(__BarElTrackOffset.value, __BarElTrackOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledAxisMotionModel uses Python identifier CoupledAxisMotionModel
    __CoupledAxisMotionModel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), 'CoupledAxisMotionModel', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLCoupledAxisMotionModel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1021, 6), )

    
    CoupledAxisMotionModel = property(__CoupledAxisMotionModel.value, __CoupledAxisMotionModel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanBlanking uses Python identifier ScanBlanking
    __ScanBlanking = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), 'ScanBlanking', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLScanBlanking', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1022, 6), )

    
    ScanBlanking = property(__ScanBlanking.value, __ScanBlanking.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerStatus uses Python identifier PalmerStatus
    __PalmerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), 'PalmerStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1023, 6), )

    
    PalmerStatus = property(__PalmerStatus.value, __PalmerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerInitialOffset uses Python identifier PalmerInitialOffset
    __PalmerInitialOffset = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), 'PalmerInitialOffset', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerInitialOffset', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1024, 6), )

    
    PalmerInitialOffset = property(__PalmerInitialOffset.value, __PalmerInitialOffset.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerSquintAngle uses Python identifier PalmerSquintAngle
    __PalmerSquintAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), 'PalmerSquintAngle', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerSquintAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1025, 6), )

    
    PalmerSquintAngle = property(__PalmerSquintAngle.value, __PalmerSquintAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PalmerRate uses Python identifier PalmerRate
    __PalmerRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), 'PalmerRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPalmerRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1026, 6), )

    
    PalmerRate = property(__PalmerRate.value, __PalmerRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModRate uses Python identifier PolarizationModRate
    __PolarizationModRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), 'PolarizationModRate', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationModRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1027, 6), )

    
    PolarizationModRate = property(__PolarizationModRate.value, __PolarizationModRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaRotation uses Python identifier AntennaRotation
    __AntennaRotation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), 'AntennaRotation', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAntennaRotation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1028, 6), )

    
    AntennaRotation = property(__AntennaRotation.value, __AntennaRotation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzScanShape uses Python identifier AzScanShape
    __AzScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), 'AzScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAzScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1029, 6), )

    
    AzScanShape = property(__AzScanShape.value, __AzScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzBeamwidth uses Python identifier AzBeamwidth
    __AzBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), 'AzBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAzBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1030, 6), )

    
    AzBeamwidth = property(__AzBeamwidth.value, __AzBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzSidelobeRatio uses Python identifier AzSidelobeRatio
    __AzSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), 'AzSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAzSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1031, 6), )

    
    AzSidelobeRatio = property(__AzSidelobeRatio.value, __AzSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElScanShape uses Python identifier ElScanShape
    __ElScanShape = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), 'ElScanShape', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLElScanShape', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1032, 6), )

    
    ElScanShape = property(__ElScanShape.value, __ElScanShape.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElBeamwidth uses Python identifier ElBeamwidth
    __ElBeamwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), 'ElBeamwidth', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLElBeamwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1033, 6), )

    
    ElBeamwidth = property(__ElBeamwidth.value, __ElBeamwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElSidelobeRatio uses Python identifier ElSidelobeRatio
    __ElSidelobeRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), 'ElSidelobeRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLElSidelobeRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1034, 6), )

    
    ElSidelobeRatio = property(__ElSidelobeRatio.value, __ElSidelobeRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AntennaModelKind uses Python identifier AntennaModelKind
    __AntennaModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), 'AntennaModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAntennaModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1035, 6), )

    
    AntennaModelKind = property(__AntennaModelKind.value, __AntennaModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationModelKind uses Python identifier PolarizationModelKind
    __PolarizationModelKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), 'PolarizationModelKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationModelKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1036, 6), )

    
    PolarizationModelKind = property(__PolarizationModelKind.value, __PolarizationModelKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPhaseDelta uses Python identifier VhPhaseDelta
    __VhPhaseDelta = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), 'VhPhaseDelta', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLVhPhaseDelta', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1037, 6), )

    
    VhPhaseDelta = property(__VhPhaseDelta.value, __VhPhaseDelta.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VhPolRatio uses Python identifier VhPolRatio
    __VhPolRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), 'VhPolRatio', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLVhPolRatio', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1038, 6), )

    
    VhPolRatio = property(__VhPolRatio.value, __VhPolRatio.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PolarizationKind uses Python identifier PolarizationKind
    __PolarizationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), 'PolarizationKind', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPolarizationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1039, 6), )

    
    PolarizationKind = property(__PolarizationKind.value, __PolarizationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzElPatternName uses Python identifier AzElPatternName
    __AzElPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), 'AzElPatternName', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAzElPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1040, 6), )

    
    AzElPatternName = property(__AzElPatternName.value, __AzElPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EllipticalAxisScaling uses Python identifier EllipticalAxisScaling
    __EllipticalAxisScaling = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), 'EllipticalAxisScaling', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLEllipticalAxisScaling', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1041, 6), )

    
    EllipticalAxisScaling = property(__EllipticalAxisScaling.value, __EllipticalAxisScaling.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TriggerType uses Python identifier TriggerType
    __TriggerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TriggerType'), 'TriggerType', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLTriggerType', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1042, 6), )

    
    TriggerType = property(__TriggerType.value, __TriggerType.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1043, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1044, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTrigger uses Python identifier PulseTrigger
    __PulseTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), 'PulseTrigger', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLPulseTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1045, 6), )

    
    PulseTrigger = property(__PulseTrigger.value, __PulseTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndOfRasterTriggerStatus uses Python identifier EndOfRasterTriggerStatus
    __EndOfRasterTriggerStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndOfRasterTriggerStatus'), 'EndOfRasterTriggerStatus', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLEndOfRasterTriggerStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1046, 6), )

    
    EndOfRasterTriggerStatus = property(__EndOfRasterTriggerStatus.value, __EndOfRasterTriggerStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AzimuthTestPoint uses Python identifier AzimuthTestPoint
    __AzimuthTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), 'AzimuthTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLAzimuthTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1047, 6), )

    
    AzimuthTestPoint = property(__AzimuthTestPoint.value, __AzimuthTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElevationTestPoint uses Python identifier ElevationTestPoint
    __ElevationTestPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), 'ElevationTestPoint', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLElevationTestPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1048, 6), )

    
    ElevationTestPoint = property(__ElevationTestPoint.value, __ElevationTestPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1049, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctScanSegmentNonInterleavedRaster_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1050, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __RasterOrientation.name() : __RasterOrientation,
        __InitialBarDirection.name() : __InitialBarDirection,
        __InterbarDirection.name() : __InterbarDirection,
        __NumberOfBars.name() : __NumberOfBars,
        __BarWidth.name() : __BarWidth,
        __InitialBeamOffset.name() : __InitialBeamOffset,
        __CoverageAngle.name() : __CoverageAngle,
        __BarScanRate.name() : __BarScanRate,
        __BarTransitRate.name() : __BarTransitRate,
        __RasterFlybackStatus.name() : __RasterFlybackStatus,
        __RasterFlybackTime.name() : __RasterFlybackTime,
        __BarScanMotion.name() : __BarScanMotion,
        __BarFlybackTime.name() : __BarFlybackTime,
        __BidirectionReturnOnSameBar.name() : __BidirectionReturnOnSameBar,
        __InterbarBlankingStatus.name() : __InterbarBlankingStatus,
        __BarDirectionKind.name() : __BarDirectionKind,
        __BarAzPointAngle.name() : __BarAzPointAngle,
        __BarElPointAngle.name() : __BarElPointAngle,
        __BarTrackPlatform.name() : __BarTrackPlatform,
        __BarAzTrackOffset.name() : __BarAzTrackOffset,
        __BarElTrackOffset.name() : __BarElTrackOffset,
        __CoupledAxisMotionModel.name() : __CoupledAxisMotionModel,
        __ScanBlanking.name() : __ScanBlanking,
        __PalmerStatus.name() : __PalmerStatus,
        __PalmerInitialOffset.name() : __PalmerInitialOffset,
        __PalmerSquintAngle.name() : __PalmerSquintAngle,
        __PalmerRate.name() : __PalmerRate,
        __PolarizationModRate.name() : __PolarizationModRate,
        __AntennaRotation.name() : __AntennaRotation,
        __AzScanShape.name() : __AzScanShape,
        __AzBeamwidth.name() : __AzBeamwidth,
        __AzSidelobeRatio.name() : __AzSidelobeRatio,
        __ElScanShape.name() : __ElScanShape,
        __ElBeamwidth.name() : __ElBeamwidth,
        __ElSidelobeRatio.name() : __ElSidelobeRatio,
        __AntennaModelKind.name() : __AntennaModelKind,
        __PolarizationModelKind.name() : __PolarizationModelKind,
        __VhPhaseDelta.name() : __VhPhaseDelta,
        __VhPolRatio.name() : __VhPolRatio,
        __PolarizationKind.name() : __PolarizationKind,
        __AzElPatternName.name() : __AzElPatternName,
        __EllipticalAxisScaling.name() : __EllipticalAxisScaling,
        __TriggerType.name() : __TriggerType,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __PulseTrigger.name() : __PulseTrigger,
        __EndOfRasterTriggerStatus.name() : __EndOfRasterTriggerStatus,
        __AzimuthTestPoint.name() : __AzimuthTestPoint,
        __ElevationTestPoint.name() : __ElevationTestPoint,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScanSegmentNonInterleavedRaster = ctScanSegmentNonInterleavedRaster
Namespace.addCategoryObject('typeBinding', 'ctScanSegmentNonInterleavedRaster', ctScanSegmentNonInterleavedRaster)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSequence with content type ELEMENT_ONLY
class ctPulseSequence (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSequence with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPulseSequence')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1054, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PulseSegmentSingle uses Python identifier PulseSegmentSingle
    __PulseSegmentSingle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSingle'), 'PulseSegmentSingle', '__httpwww_amherst_comCEESIMXML_ctPulseSequence_httpwww_amherst_comCEESIMXMLPulseSegmentSingle', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1057, 6), )

    
    PulseSegmentSingle = property(__PulseSegmentSingle.value, __PulseSegmentSingle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseSegmentSeries uses Python identifier PulseSegmentSeries
    __PulseSegmentSeries = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSeries'), 'PulseSegmentSeries', '__httpwww_amherst_comCEESIMXML_ctPulseSequence_httpwww_amherst_comCEESIMXMLPulseSegmentSeries', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1058, 6), )

    
    PulseSegmentSeries = property(__PulseSegmentSeries.value, __PulseSegmentSeries.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseSegmentCw uses Python identifier PulseSegmentCw
    __PulseSegmentCw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentCw'), 'PulseSegmentCw', '__httpwww_amherst_comCEESIMXML_ctPulseSequence_httpwww_amherst_comCEESIMXMLPulseSegmentCw', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1059, 6), )

    
    PulseSegmentCw = property(__PulseSegmentCw.value, __PulseSegmentCw.set, None, None)

    _ElementMap.update({
        __PulseSegmentSingle.name() : __PulseSegmentSingle,
        __PulseSegmentSeries.name() : __PulseSegmentSeries,
        __PulseSegmentCw.name() : __PulseSegmentCw
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPulseSequence = ctPulseSequence
Namespace.addCategoryObject('typeBinding', 'ctPulseSequence', ctPulseSequence)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentSingle with content type ELEMENT_ONLY
class ctPulseSegmentSingle (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentSingle with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPulseSegmentSingle')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1063, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1065, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1066, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Erp uses Python identifier Erp
    __Erp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Erp'), 'Erp', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLErp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1067, 6), )

    
    Erp = property(__Erp.value, __Erp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TransmitAttenuation uses Python identifier TransmitAttenuation
    __TransmitAttenuation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), 'TransmitAttenuation', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLTransmitAttenuation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1068, 6), )

    
    TransmitAttenuation = property(__TransmitAttenuation.value, __TransmitAttenuation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseWidth uses Python identifier PulseWidth
    __PulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), 'PulseWidth', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1069, 6), )

    
    PulseWidth = property(__PulseWidth.value, __PulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1070, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1071, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1072, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1073, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SlowRiseTimeStatus uses Python identifier SlowRiseTimeStatus
    __SlowRiseTimeStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus'), 'SlowRiseTimeStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLSlowRiseTimeStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1074, 6), )

    
    SlowRiseTimeStatus = property(__SlowRiseTimeStatus.value, __SlowRiseTimeStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1075, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidthState uses Python identifier NoiseBandwidthState
    __NoiseBandwidthState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), 'NoiseBandwidthState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLNoiseBandwidthState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1076, 6), )

    
    NoiseBandwidthState = property(__NoiseBandwidthState.value, __NoiseBandwidthState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidth uses Python identifier NoiseBandwidth
    __NoiseBandwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), 'NoiseBandwidth', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLNoiseBandwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1077, 6), )

    
    NoiseBandwidth = property(__NoiseBandwidth.value, __NoiseBandwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModStatus uses Python identifier ModStatus
    __ModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), 'ModStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1078, 6), )

    
    ModStatus = property(__ModStatus.value, __ModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationStatus uses Python identifier InterpulseModulationStatus
    __InterpulseModulationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus'), 'InterpulseModulationStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1079, 6), )

    
    InterpulseModulationStatus = property(__InterpulseModulationStatus.value, __InterpulseModulationStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationKind uses Python identifier InterpulseModulationKind
    __InterpulseModulationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind'), 'InterpulseModulationKind', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1080, 6), )

    
    InterpulseModulationKind = property(__InterpulseModulationKind.value, __InterpulseModulationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModPriPercentage uses Python identifier InterpulseModPriPercentage
    __InterpulseModPriPercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage'), 'InterpulseModPriPercentage', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModPriPercentage', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1081, 6), )

    
    InterpulseModPriPercentage = property(__InterpulseModPriPercentage.value, __InterpulseModPriPercentage.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbName uses Python identifier JitterDstrbName
    __JitterDstrbName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName'), 'JitterDstrbName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLJitterDstrbName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1082, 6), )

    
    JitterDstrbName = property(__JitterDstrbName.value, __JitterDstrbName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1083, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPatternName uses Python identifier InterpulseModulationPatternName
    __InterpulseModulationPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName'), 'InterpulseModulationPatternName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1084, 6), )

    
    InterpulseModulationPatternName = property(__InterpulseModulationPatternName.value, __InterpulseModulationPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeakDeviation uses Python identifier InterpulseModulationPeakDeviation
    __InterpulseModulationPeakDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation'), 'InterpulseModulationPeakDeviation', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPeakDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1085, 6), )

    
    InterpulseModulationPeakDeviation = property(__InterpulseModulationPeakDeviation.value, __InterpulseModulationPeakDeviation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriodKind uses Python identifier InterpulseModulationPeriodKind
    __InterpulseModulationPeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind'), 'InterpulseModulationPeriodKind', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1086, 6), )

    
    InterpulseModulationPeriodKind = property(__InterpulseModulationPeriodKind.value, __InterpulseModulationPeriodKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriodPulses uses Python identifier InterpulseModulationPeriodPulses
    __InterpulseModulationPeriodPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses'), 'InterpulseModulationPeriodPulses', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriodPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1087, 6), )

    
    InterpulseModulationPeriodPulses = property(__InterpulseModulationPeriodPulses.value, __InterpulseModulationPeriodPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriod uses Python identifier InterpulseModulationPeriod
    __InterpulseModulationPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod'), 'InterpulseModulationPeriod', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1088, 6), )

    
    InterpulseModulationPeriod = property(__InterpulseModulationPeriod.value, __InterpulseModulationPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPriSync uses Python identifier InterpulseModulationPriSync
    __InterpulseModulationPriSync = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync'), 'InterpulseModulationPriSync', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLInterpulseModulationPriSync', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1089, 6), )

    
    InterpulseModulationPriSync = property(__InterpulseModulationPriSync.value, __InterpulseModulationPriSync.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntrapulseModulationStatus uses Python identifier IntrapulseModulationStatus
    __IntrapulseModulationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), 'IntrapulseModulationStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLIntrapulseModulationStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1090, 6), )

    
    IntrapulseModulationStatus = property(__IntrapulseModulationStatus.value, __IntrapulseModulationStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteAmplitudeState uses Python identifier DiscreteAmplitudeState
    __DiscreteAmplitudeState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), 'DiscreteAmplitudeState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDiscreteAmplitudeState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1091, 6), )

    
    DiscreteAmplitudeState = property(__DiscreteAmplitudeState.value, __DiscreteAmplitudeState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AmplitudeCells uses Python identifier AmplitudeCells
    __AmplitudeCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), 'AmplitudeCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLAmplitudeCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1092, 6), )

    
    AmplitudeCells = property(__AmplitudeCells.value, __AmplitudeCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteFrequencyState uses Python identifier DiscreteFrequencyState
    __DiscreteFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), 'DiscreteFrequencyState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDiscreteFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1093, 6), )

    
    DiscreteFrequencyState = property(__DiscreteFrequencyState.value, __DiscreteFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyCells uses Python identifier FrequencyCells
    __FrequencyCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), 'FrequencyCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLFrequencyCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1095, 6), )

    
    FrequencyCells = property(__FrequencyCells.value, __FrequencyCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscretePhaseShiftState uses Python identifier DiscretePhaseShiftState
    __DiscretePhaseShiftState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), 'DiscretePhaseShiftState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLDiscretePhaseShiftState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1096, 6), )

    
    DiscretePhaseShiftState = property(__DiscretePhaseShiftState.value, __DiscretePhaseShiftState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BiQuadPhaseMode uses Python identifier BiQuadPhaseMode
    __BiQuadPhaseMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), 'BiQuadPhaseMode', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBiQuadPhaseMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1097, 6), )

    
    BiQuadPhaseMode = property(__BiQuadPhaseMode.value, __BiQuadPhaseMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseCells uses Python identifier PhaseCells
    __PhaseCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), 'PhaseCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPhaseCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1099, 6), )

    
    PhaseCells = property(__PhaseCells.value, __PhaseCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFrequencyState uses Python identifier LinearFrequencyState
    __LinearFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), 'LinearFrequencyState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLLinearFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1100, 6), )

    
    LinearFrequencyState = property(__LinearFrequencyState.value, __LinearFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqMods uses Python identifier LinearFreqMods
    __LinearFreqMods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), 'LinearFreqMods', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLLinearFreqMods', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1102, 6), )

    
    LinearFreqMods = property(__LinearFreqMods.value, __LinearFreqMods.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimState uses Python identifier HfimState
    __HfimState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), 'HfimState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLHfimState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1104, 6), )

    
    HfimState = property(__HfimState.value, __HfimState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimCells uses Python identifier HfimCells
    __HfimCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), 'HfimCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLHfimCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1106, 6), )

    
    HfimCells = property(__HfimCells.value, __HfimCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqState uses Python identifier ExternalIqState
    __ExternalIqState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), 'ExternalIqState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLExternalIqState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1108, 6), )

    
    ExternalIqState = property(__ExternalIqState.value, __ExternalIqState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqPatterns uses Python identifier ExternalIqPatterns
    __ExternalIqPatterns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), 'ExternalIqPatterns', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLExternalIqPatterns', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1110, 6), )

    
    ExternalIqPatterns = property(__ExternalIqPatterns.value, __ExternalIqPatterns.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseGroupState uses Python identifier PulseGroupState
    __PulseGroupState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState'), 'PulseGroupState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPulseGroupState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1112, 6), )

    
    PulseGroupState = property(__PulseGroupState.value, __PulseGroupState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseGroupKind uses Python identifier PulseGroupKind
    __PulseGroupKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind'), 'PulseGroupKind', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPulseGroupKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1113, 6), )

    
    PulseGroupKind = property(__PulseGroupKind.value, __PulseGroupKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPri uses Python identifier BurstPri
    __BurstPri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), 'BurstPri', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1114, 6), )

    
    BurstPri = property(__BurstPri.value, __BurstPri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseWidth uses Python identifier BurstPulseWidth
    __BurstPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), 'BurstPulseWidth', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1115, 6), )

    
    BurstPulseWidth = property(__BurstPulseWidth.value, __BurstPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstDwell uses Python identifier BurstDwell
    __BurstDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell'), 'BurstDwell', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstDwell', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1116, 6), )

    
    BurstDwell = property(__BurstDwell.value, __BurstDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModBasePri uses Python identifier BurstModBasePri
    __BurstModBasePri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri'), 'BurstModBasePri', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModBasePri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1117, 6), )

    
    BurstModBasePri = property(__BurstModBasePri.value, __BurstModBasePri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPatternName uses Python identifier BurstModPatternName
    __BurstModPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName'), 'BurstModPatternName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1118, 6), )

    
    BurstModPatternName = property(__BurstModPatternName.value, __BurstModPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModDeviation uses Python identifier BurstModDeviation
    __BurstModDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation'), 'BurstModDeviation', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1119, 6), )

    
    BurstModDeviation = property(__BurstModDeviation.value, __BurstModDeviation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPulseWidth uses Python identifier BurstModPulseWidth
    __BurstModPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth'), 'BurstModPulseWidth', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1120, 6), )

    
    BurstModPulseWidth = property(__BurstModPulseWidth.value, __BurstModPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPeriod uses Python identifier BurstModPeriod
    __BurstModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod'), 'BurstModPeriod', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1121, 6), )

    
    BurstModPeriod = property(__BurstModPeriod.value, __BurstModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModDwell uses Python identifier BurstModDwell
    __BurstModDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell'), 'BurstModDwell', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstModDwell', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1122, 6), )

    
    BurstModDwell = property(__BurstModDwell.value, __BurstModDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseCells uses Python identifier BurstPulseCells
    __BurstPulseCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells'), 'BurstPulseCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLBurstPulseCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1124, 6), )

    
    BurstPulseCells = property(__BurstPulseCells.value, __BurstPulseCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StaggerModDwellTime uses Python identifier StaggerModDwellTime
    __StaggerModDwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime'), 'StaggerModDwellTime', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLStaggerModDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1126, 6), )

    
    StaggerModDwellTime = property(__StaggerModDwellTime.value, __StaggerModDwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1127, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1128, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1129, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1130, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSingle_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1131, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Erp.name() : __Erp,
        __TransmitAttenuation.name() : __TransmitAttenuation,
        __PulseWidth.name() : __PulseWidth,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __SlowRiseTimeStatus.name() : __SlowRiseTimeStatus,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __NoiseBandwidthState.name() : __NoiseBandwidthState,
        __NoiseBandwidth.name() : __NoiseBandwidth,
        __ModStatus.name() : __ModStatus,
        __InterpulseModulationStatus.name() : __InterpulseModulationStatus,
        __InterpulseModulationKind.name() : __InterpulseModulationKind,
        __InterpulseModPriPercentage.name() : __InterpulseModPriPercentage,
        __JitterDstrbName.name() : __JitterDstrbName,
        __JitterLimit.name() : __JitterLimit,
        __InterpulseModulationPatternName.name() : __InterpulseModulationPatternName,
        __InterpulseModulationPeakDeviation.name() : __InterpulseModulationPeakDeviation,
        __InterpulseModulationPeriodKind.name() : __InterpulseModulationPeriodKind,
        __InterpulseModulationPeriodPulses.name() : __InterpulseModulationPeriodPulses,
        __InterpulseModulationPeriod.name() : __InterpulseModulationPeriod,
        __InterpulseModulationPriSync.name() : __InterpulseModulationPriSync,
        __IntrapulseModulationStatus.name() : __IntrapulseModulationStatus,
        __DiscreteAmplitudeState.name() : __DiscreteAmplitudeState,
        __AmplitudeCells.name() : __AmplitudeCells,
        __DiscreteFrequencyState.name() : __DiscreteFrequencyState,
        __FrequencyCells.name() : __FrequencyCells,
        __DiscretePhaseShiftState.name() : __DiscretePhaseShiftState,
        __BiQuadPhaseMode.name() : __BiQuadPhaseMode,
        __PhaseCells.name() : __PhaseCells,
        __LinearFrequencyState.name() : __LinearFrequencyState,
        __LinearFreqMods.name() : __LinearFreqMods,
        __HfimState.name() : __HfimState,
        __HfimCells.name() : __HfimCells,
        __ExternalIqState.name() : __ExternalIqState,
        __ExternalIqPatterns.name() : __ExternalIqPatterns,
        __PulseGroupState.name() : __PulseGroupState,
        __PulseGroupKind.name() : __PulseGroupKind,
        __BurstPri.name() : __BurstPri,
        __BurstPulseWidth.name() : __BurstPulseWidth,
        __BurstDwell.name() : __BurstDwell,
        __BurstModBasePri.name() : __BurstModBasePri,
        __BurstModPatternName.name() : __BurstModPatternName,
        __BurstModDeviation.name() : __BurstModDeviation,
        __BurstModPulseWidth.name() : __BurstModPulseWidth,
        __BurstModPeriod.name() : __BurstModPeriod,
        __BurstModDwell.name() : __BurstModDwell,
        __BurstPulseCells.name() : __BurstPulseCells,
        __StaggerModDwellTime.name() : __StaggerModDwellTime,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPulseSegmentSingle = ctPulseSegmentSingle
Namespace.addCategoryObject('typeBinding', 'ctPulseSegmentSingle', ctPulseSegmentSingle)


# Complex type {http://www.amherst.com/CEESIM/XML}ctAmplitudeCellList with content type ELEMENT_ONLY
class ctAmplitudeCellList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctAmplitudeCellList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctAmplitudeCellList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1135, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AmplitudeCell uses Python identifier AmplitudeCell
    __AmplitudeCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCell'), 'AmplitudeCell', '__httpwww_amherst_comCEESIMXML_ctAmplitudeCellList_httpwww_amherst_comCEESIMXMLAmplitudeCell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1137, 6), )

    
    AmplitudeCell = property(__AmplitudeCell.value, __AmplitudeCell.set, None, None)

    _ElementMap.update({
        __AmplitudeCell.name() : __AmplitudeCell
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctAmplitudeCellList = ctAmplitudeCellList
Namespace.addCategoryObject('typeBinding', 'ctAmplitudeCellList', ctAmplitudeCellList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctAmplitudeCell with content type ELEMENT_ONLY
class ctAmplitudeCell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctAmplitudeCell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctAmplitudeCell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1141, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AmplitudeCellSize uses Python identifier AmplitudeCellSize
    __AmplitudeCellSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCellSize'), 'AmplitudeCellSize', '__httpwww_amherst_comCEESIMXML_ctAmplitudeCell_httpwww_amherst_comCEESIMXMLAmplitudeCellSize', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1143, 6), )

    
    AmplitudeCellSize = property(__AmplitudeCellSize.value, __AmplitudeCellSize.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Attenuation uses Python identifier Attenuation
    __Attenuation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Attenuation'), 'Attenuation', '__httpwww_amherst_comCEESIMXML_ctAmplitudeCell_httpwww_amherst_comCEESIMXMLAttenuation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1144, 6), )

    
    Attenuation = property(__Attenuation.value, __Attenuation.set, None, None)

    _ElementMap.update({
        __AmplitudeCellSize.name() : __AmplitudeCellSize,
        __Attenuation.name() : __Attenuation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctAmplitudeCell = ctAmplitudeCell
Namespace.addCategoryObject('typeBinding', 'ctAmplitudeCell', ctAmplitudeCell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencyCellList with content type ELEMENT_ONLY
class ctFrequencyCellList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencyCellList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencyCellList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1148, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyCell uses Python identifier FrequencyCell
    __FrequencyCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCell'), 'FrequencyCell', '__httpwww_amherst_comCEESIMXML_ctFrequencyCellList_httpwww_amherst_comCEESIMXMLFrequencyCell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1150, 6), )

    
    FrequencyCell = property(__FrequencyCell.value, __FrequencyCell.set, None, None)

    _ElementMap.update({
        __FrequencyCell.name() : __FrequencyCell
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencyCellList = ctFrequencyCellList
Namespace.addCategoryObject('typeBinding', 'ctFrequencyCellList', ctFrequencyCellList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencyCell with content type ELEMENT_ONLY
class ctFrequencyCell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctFrequencyCell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctFrequencyCell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1154, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyCellSize uses Python identifier FrequencyCellSize
    __FrequencyCellSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCellSize'), 'FrequencyCellSize', '__httpwww_amherst_comCEESIMXML_ctFrequencyCell_httpwww_amherst_comCEESIMXMLFrequencyCellSize', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1156, 6), )

    
    FrequencyCellSize = property(__FrequencyCellSize.value, __FrequencyCellSize.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyDeviation uses Python identifier FrequencyDeviation
    __FrequencyDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDeviation'), 'FrequencyDeviation', '__httpwww_amherst_comCEESIMXML_ctFrequencyCell_httpwww_amherst_comCEESIMXMLFrequencyDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1157, 6), )

    
    FrequencyDeviation = property(__FrequencyDeviation.value, __FrequencyDeviation.set, None, None)

    _ElementMap.update({
        __FrequencyCellSize.name() : __FrequencyCellSize,
        __FrequencyDeviation.name() : __FrequencyDeviation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctFrequencyCell = ctFrequencyCell
Namespace.addCategoryObject('typeBinding', 'ctFrequencyCell', ctFrequencyCell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPhaseCellList with content type ELEMENT_ONLY
class ctPhaseCellList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPhaseCellList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPhaseCellList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1161, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseCell uses Python identifier PhaseCell
    __PhaseCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseCell'), 'PhaseCell', '__httpwww_amherst_comCEESIMXML_ctPhaseCellList_httpwww_amherst_comCEESIMXMLPhaseCell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1163, 6), )

    
    PhaseCell = property(__PhaseCell.value, __PhaseCell.set, None, None)

    _ElementMap.update({
        __PhaseCell.name() : __PhaseCell
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPhaseCellList = ctPhaseCellList
Namespace.addCategoryObject('typeBinding', 'ctPhaseCellList', ctPhaseCellList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPhaseCell with content type ELEMENT_ONLY
class ctPhaseCell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPhaseCell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPhaseCell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1167, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseCellSize uses Python identifier PhaseCellSize
    __PhaseCellSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseCellSize'), 'PhaseCellSize', '__httpwww_amherst_comCEESIMXML_ctPhaseCell_httpwww_amherst_comCEESIMXMLPhaseCellSize', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1169, 6), )

    
    PhaseCellSize = property(__PhaseCellSize.value, __PhaseCellSize.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseShiftKind uses Python identifier PhaseShiftKind
    __PhaseShiftKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseShiftKind'), 'PhaseShiftKind', '__httpwww_amherst_comCEESIMXML_ctPhaseCell_httpwww_amherst_comCEESIMXMLPhaseShiftKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1170, 6), )

    
    PhaseShiftKind = property(__PhaseShiftKind.value, __PhaseShiftKind.set, None, None)

    _ElementMap.update({
        __PhaseCellSize.name() : __PhaseCellSize,
        __PhaseShiftKind.name() : __PhaseShiftKind
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPhaseCell = ctPhaseCell
Namespace.addCategoryObject('typeBinding', 'ctPhaseCell', ctPhaseCell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctLinearFreqModList with content type ELEMENT_ONLY
class ctLinearFreqModList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctLinearFreqModList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctLinearFreqModList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1174, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqMod uses Python identifier LinearFreqMod
    __LinearFreqMod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMod'), 'LinearFreqMod', '__httpwww_amherst_comCEESIMXML_ctLinearFreqModList_httpwww_amherst_comCEESIMXMLLinearFreqMod', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1176, 6), )

    
    LinearFreqMod = property(__LinearFreqMod.value, __LinearFreqMod.set, None, None)

    _ElementMap.update({
        __LinearFreqMod.name() : __LinearFreqMod
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctLinearFreqModList = ctLinearFreqModList
Namespace.addCategoryObject('typeBinding', 'ctLinearFreqModList', ctLinearFreqModList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctLinearFreqMod with content type ELEMENT_ONLY
class ctLinearFreqMod (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctLinearFreqMod with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctLinearFreqMod')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1180, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqDeviation uses Python identifier LinearFreqDeviation
    __LinearFreqDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDeviation'), 'LinearFreqDeviation', '__httpwww_amherst_comCEESIMXML_ctLinearFreqMod_httpwww_amherst_comCEESIMXMLLinearFreqDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1182, 6), )

    
    LinearFreqDeviation = property(__LinearFreqDeviation.value, __LinearFreqDeviation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqDuration uses Python identifier LinearFreqDuration
    __LinearFreqDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDuration'), 'LinearFreqDuration', '__httpwww_amherst_comCEESIMXML_ctLinearFreqMod_httpwww_amherst_comCEESIMXMLLinearFreqDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1183, 6), )

    
    LinearFreqDuration = property(__LinearFreqDuration.value, __LinearFreqDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqResetFlag uses Python identifier LinearFreqResetFlag
    __LinearFreqResetFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqResetFlag'), 'LinearFreqResetFlag', '__httpwww_amherst_comCEESIMXML_ctLinearFreqMod_httpwww_amherst_comCEESIMXMLLinearFreqResetFlag', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1184, 6), )

    
    LinearFreqResetFlag = property(__LinearFreqResetFlag.value, __LinearFreqResetFlag.set, None, None)

    _ElementMap.update({
        __LinearFreqDeviation.name() : __LinearFreqDeviation,
        __LinearFreqDuration.name() : __LinearFreqDuration,
        __LinearFreqResetFlag.name() : __LinearFreqResetFlag
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctLinearFreqMod = ctLinearFreqMod
Namespace.addCategoryObject('typeBinding', 'ctLinearFreqMod', ctLinearFreqMod)


# Complex type {http://www.amherst.com/CEESIM/XML}ctHfimCellList with content type ELEMENT_ONLY
class ctHfimCellList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctHfimCellList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctHfimCellList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1188, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}HfimCell uses Python identifier HfimCell
    __HfimCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimCell'), 'HfimCell', '__httpwww_amherst_comCEESIMXML_ctHfimCellList_httpwww_amherst_comCEESIMXMLHfimCell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1190, 6), )

    
    HfimCell = property(__HfimCell.value, __HfimCell.set, None, None)

    _ElementMap.update({
        __HfimCell.name() : __HfimCell
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctHfimCellList = ctHfimCellList
Namespace.addCategoryObject('typeBinding', 'ctHfimCellList', ctHfimCellList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctHfimCell with content type ELEMENT_ONLY
class ctHfimCell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctHfimCell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctHfimCell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1194, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}HfimSize uses Python identifier HfimSize
    __HfimSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimSize'), 'HfimSize', '__httpwww_amherst_comCEESIMXML_ctHfimCell_httpwww_amherst_comCEESIMXMLHfimSize', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1196, 6), )

    
    HfimSize = property(__HfimSize.value, __HfimSize.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimSampleName uses Python identifier HfimSampleName
    __HfimSampleName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimSampleName'), 'HfimSampleName', '__httpwww_amherst_comCEESIMXML_ctHfimCell_httpwww_amherst_comCEESIMXMLHfimSampleName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1197, 6), )

    
    HfimSampleName = property(__HfimSampleName.value, __HfimSampleName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimSamplePeriodKind uses Python identifier HfimSamplePeriodKind
    __HfimSamplePeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimSamplePeriodKind'), 'HfimSamplePeriodKind', '__httpwww_amherst_comCEESIMXML_ctHfimCell_httpwww_amherst_comCEESIMXMLHfimSamplePeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1198, 6), )

    
    HfimSamplePeriodKind = property(__HfimSamplePeriodKind.value, __HfimSamplePeriodKind.set, None, None)

    _ElementMap.update({
        __HfimSize.name() : __HfimSize,
        __HfimSampleName.name() : __HfimSampleName,
        __HfimSamplePeriodKind.name() : __HfimSamplePeriodKind
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctHfimCell = ctHfimCell
Namespace.addCategoryObject('typeBinding', 'ctHfimCell', ctHfimCell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctExternalIqPatternList with content type ELEMENT_ONLY
class ctExternalIqPatternList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctExternalIqPatternList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctExternalIqPatternList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1202, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqPattern uses Python identifier ExternalIqPattern
    __ExternalIqPattern = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPattern'), 'ExternalIqPattern', '__httpwww_amherst_comCEESIMXML_ctExternalIqPatternList_httpwww_amherst_comCEESIMXMLExternalIqPattern', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1204, 6), )

    
    ExternalIqPattern = property(__ExternalIqPattern.value, __ExternalIqPattern.set, None, None)

    _ElementMap.update({
        __ExternalIqPattern.name() : __ExternalIqPattern
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctExternalIqPatternList = ctExternalIqPatternList
Namespace.addCategoryObject('typeBinding', 'ctExternalIqPatternList', ctExternalIqPatternList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctExternalIqPattern with content type ELEMENT_ONLY
class ctExternalIqPattern (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctExternalIqPattern with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctExternalIqPattern')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1208, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqPatternName uses Python identifier ExternalIqPatternName
    __ExternalIqPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatternName'), 'ExternalIqPatternName', '__httpwww_amherst_comCEESIMXML_ctExternalIqPattern_httpwww_amherst_comCEESIMXMLExternalIqPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1210, 6), )

    
    ExternalIqPatternName = property(__ExternalIqPatternName.value, __ExternalIqPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqNumberOfSamples uses Python identifier ExternalIqNumberOfSamples
    __ExternalIqNumberOfSamples = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqNumberOfSamples'), 'ExternalIqNumberOfSamples', '__httpwww_amherst_comCEESIMXML_ctExternalIqPattern_httpwww_amherst_comCEESIMXMLExternalIqNumberOfSamples', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1211, 6), )

    
    ExternalIqNumberOfSamples = property(__ExternalIqNumberOfSamples.value, __ExternalIqNumberOfSamples.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqSampleRate uses Python identifier ExternalIqSampleRate
    __ExternalIqSampleRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqSampleRate'), 'ExternalIqSampleRate', '__httpwww_amherst_comCEESIMXML_ctExternalIqPattern_httpwww_amherst_comCEESIMXMLExternalIqSampleRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1212, 6), )

    
    ExternalIqSampleRate = property(__ExternalIqSampleRate.value, __ExternalIqSampleRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqUpsampleData uses Python identifier ExternalIqUpsampleData
    __ExternalIqUpsampleData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqUpsampleData'), 'ExternalIqUpsampleData', '__httpwww_amherst_comCEESIMXML_ctExternalIqPattern_httpwww_amherst_comCEESIMXMLExternalIqUpsampleData', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1213, 6), )

    
    ExternalIqUpsampleData = property(__ExternalIqUpsampleData.value, __ExternalIqUpsampleData.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqLoopPatternData uses Python identifier ExternalIqLoopPatternData
    __ExternalIqLoopPatternData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqLoopPatternData'), 'ExternalIqLoopPatternData', '__httpwww_amherst_comCEESIMXML_ctExternalIqPattern_httpwww_amherst_comCEESIMXMLExternalIqLoopPatternData', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1214, 6), )

    
    ExternalIqLoopPatternData = property(__ExternalIqLoopPatternData.value, __ExternalIqLoopPatternData.set, None, None)

    _ElementMap.update({
        __ExternalIqPatternName.name() : __ExternalIqPatternName,
        __ExternalIqNumberOfSamples.name() : __ExternalIqNumberOfSamples,
        __ExternalIqSampleRate.name() : __ExternalIqSampleRate,
        __ExternalIqUpsampleData.name() : __ExternalIqUpsampleData,
        __ExternalIqLoopPatternData.name() : __ExternalIqLoopPatternData
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctExternalIqPattern = ctExternalIqPattern
Namespace.addCategoryObject('typeBinding', 'ctExternalIqPattern', ctExternalIqPattern)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBurstPulseCellList with content type ELEMENT_ONLY
class ctBurstPulseCellList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBurstPulseCellList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBurstPulseCellList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1218, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseCell uses Python identifier BurstPulseCell
    __BurstPulseCell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCell'), 'BurstPulseCell', '__httpwww_amherst_comCEESIMXML_ctBurstPulseCellList_httpwww_amherst_comCEESIMXMLBurstPulseCell', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1220, 6), )

    
    BurstPulseCell = property(__BurstPulseCell.value, __BurstPulseCell.set, None, None)

    _ElementMap.update({
        __BurstPulseCell.name() : __BurstPulseCell
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBurstPulseCellList = ctBurstPulseCellList
Namespace.addCategoryObject('typeBinding', 'ctBurstPulseCellList', ctBurstPulseCellList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctBurstPulseCell with content type ELEMENT_ONLY
class ctBurstPulseCell (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctBurstPulseCell with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctBurstPulseCell')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1224, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPri uses Python identifier BurstPri
    __BurstPri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), 'BurstPri', '__httpwww_amherst_comCEESIMXML_ctBurstPulseCell_httpwww_amherst_comCEESIMXMLBurstPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1226, 6), )

    
    BurstPri = property(__BurstPri.value, __BurstPri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseWidth uses Python identifier BurstPulseWidth
    __BurstPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), 'BurstPulseWidth', '__httpwww_amherst_comCEESIMXML_ctBurstPulseCell_httpwww_amherst_comCEESIMXMLBurstPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1227, 6), )

    
    BurstPulseWidth = property(__BurstPulseWidth.value, __BurstPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseDuration uses Python identifier BurstPulseDuration
    __BurstPulseDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseDuration'), 'BurstPulseDuration', '__httpwww_amherst_comCEESIMXML_ctBurstPulseCell_httpwww_amherst_comCEESIMXMLBurstPulseDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1228, 6), )

    
    BurstPulseDuration = property(__BurstPulseDuration.value, __BurstPulseDuration.set, None, None)

    _ElementMap.update({
        __BurstPri.name() : __BurstPri,
        __BurstPulseWidth.name() : __BurstPulseWidth,
        __BurstPulseDuration.name() : __BurstPulseDuration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctBurstPulseCell = ctBurstPulseCell
Namespace.addCategoryObject('typeBinding', 'ctBurstPulseCell', ctBurstPulseCell)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentSeries with content type ELEMENT_ONLY
class ctPulseSegmentSeries (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentSeries with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPulseSegmentSeries')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1232, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSeries_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1234, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSeries_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1235, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSeries_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1236, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSeries_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1237, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Subsegments uses Python identifier Subsegments
    __Subsegments = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), 'Subsegments', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentSeries_httpwww_amherst_comCEESIMXMLSubsegments', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1238, 6), )

    
    Subsegments = property(__Subsegments.value, __Subsegments.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink,
        __Subsegments.name() : __Subsegments
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPulseSegmentSeries = ctPulseSegmentSeries
Namespace.addCategoryObject('typeBinding', 'ctPulseSegmentSeries', ctPulseSegmentSeries)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesPulseSegmentList with content type ELEMENT_ONLY
class ctSeriesPulseSegmentList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesPulseSegmentList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSeriesPulseSegmentList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1242, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SeriesPulseSegment uses Python identifier SeriesPulseSegment
    __SeriesPulseSegment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SeriesPulseSegment'), 'SeriesPulseSegment', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegmentList_httpwww_amherst_comCEESIMXMLSeriesPulseSegment', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1244, 6), )

    
    SeriesPulseSegment = property(__SeriesPulseSegment.value, __SeriesPulseSegment.set, None, None)

    _ElementMap.update({
        __SeriesPulseSegment.name() : __SeriesPulseSegment
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSeriesPulseSegmentList = ctSeriesPulseSegmentList
Namespace.addCategoryObject('typeBinding', 'ctSeriesPulseSegmentList', ctSeriesPulseSegmentList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesPulseSegment with content type ELEMENT_ONLY
class ctSeriesPulseSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSeriesPulseSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSeriesPulseSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1248, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Erp uses Python identifier Erp
    __Erp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Erp'), 'Erp', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLErp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1250, 6), )

    
    Erp = property(__Erp.value, __Erp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TransmitAttenuation uses Python identifier TransmitAttenuation
    __TransmitAttenuation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), 'TransmitAttenuation', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLTransmitAttenuation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1251, 6), )

    
    TransmitAttenuation = property(__TransmitAttenuation.value, __TransmitAttenuation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseWidth uses Python identifier PulseWidth
    __PulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), 'PulseWidth', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1252, 6), )

    
    PulseWidth = property(__PulseWidth.value, __PulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellStatus uses Python identifier DwellStatus
    __DwellStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), 'DwellStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDwellStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1253, 6), )

    
    DwellStatus = property(__DwellStatus.value, __DwellStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellKind uses Python identifier DwellKind
    __DwellKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), 'DwellKind', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDwellKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1254, 6), )

    
    DwellKind = property(__DwellKind.value, __DwellKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1255, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTimePulses uses Python identifier DwellTimePulses
    __DwellTimePulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), 'DwellTimePulses', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDwellTimePulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1256, 6), )

    
    DwellTimePulses = property(__DwellTimePulses.value, __DwellTimePulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SlowRiseTimeStatus uses Python identifier SlowRiseTimeStatus
    __SlowRiseTimeStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus'), 'SlowRiseTimeStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLSlowRiseTimeStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1257, 6), )

    
    SlowRiseTimeStatus = property(__SlowRiseTimeStatus.value, __SlowRiseTimeStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1258, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidthState uses Python identifier NoiseBandwidthState
    __NoiseBandwidthState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), 'NoiseBandwidthState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLNoiseBandwidthState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1259, 6), )

    
    NoiseBandwidthState = property(__NoiseBandwidthState.value, __NoiseBandwidthState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidth uses Python identifier NoiseBandwidth
    __NoiseBandwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), 'NoiseBandwidth', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLNoiseBandwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1260, 6), )

    
    NoiseBandwidth = property(__NoiseBandwidth.value, __NoiseBandwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModStatus uses Python identifier ModStatus
    __ModStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), 'ModStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLModStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1261, 6), )

    
    ModStatus = property(__ModStatus.value, __ModStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationStatus uses Python identifier InterpulseModulationStatus
    __InterpulseModulationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus'), 'InterpulseModulationStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1262, 6), )

    
    InterpulseModulationStatus = property(__InterpulseModulationStatus.value, __InterpulseModulationStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationKind uses Python identifier InterpulseModulationKind
    __InterpulseModulationKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind'), 'InterpulseModulationKind', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1263, 6), )

    
    InterpulseModulationKind = property(__InterpulseModulationKind.value, __InterpulseModulationKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModPriPercentage uses Python identifier InterpulseModPriPercentage
    __InterpulseModPriPercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage'), 'InterpulseModPriPercentage', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModPriPercentage', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1264, 6), )

    
    InterpulseModPriPercentage = property(__InterpulseModPriPercentage.value, __InterpulseModPriPercentage.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterDstrbName uses Python identifier JitterDstrbName
    __JitterDstrbName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName'), 'JitterDstrbName', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLJitterDstrbName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1265, 6), )

    
    JitterDstrbName = property(__JitterDstrbName.value, __JitterDstrbName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}JitterLimit uses Python identifier JitterLimit
    __JitterLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), 'JitterLimit', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLJitterLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1266, 6), )

    
    JitterLimit = property(__JitterLimit.value, __JitterLimit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPatternName uses Python identifier InterpulseModulationPatternName
    __InterpulseModulationPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName'), 'InterpulseModulationPatternName', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1267, 6), )

    
    InterpulseModulationPatternName = property(__InterpulseModulationPatternName.value, __InterpulseModulationPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeakDeviation uses Python identifier InterpulseModulationPeakDeviation
    __InterpulseModulationPeakDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation'), 'InterpulseModulationPeakDeviation', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPeakDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1268, 6), )

    
    InterpulseModulationPeakDeviation = property(__InterpulseModulationPeakDeviation.value, __InterpulseModulationPeakDeviation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriodKind uses Python identifier InterpulseModulationPeriodKind
    __InterpulseModulationPeriodKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind'), 'InterpulseModulationPeriodKind', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriodKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1269, 6), )

    
    InterpulseModulationPeriodKind = property(__InterpulseModulationPeriodKind.value, __InterpulseModulationPeriodKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriodPulses uses Python identifier InterpulseModulationPeriodPulses
    __InterpulseModulationPeriodPulses = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses'), 'InterpulseModulationPeriodPulses', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriodPulses', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1270, 6), )

    
    InterpulseModulationPeriodPulses = property(__InterpulseModulationPeriodPulses.value, __InterpulseModulationPeriodPulses.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPeriod uses Python identifier InterpulseModulationPeriod
    __InterpulseModulationPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod'), 'InterpulseModulationPeriod', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1271, 6), )

    
    InterpulseModulationPeriod = property(__InterpulseModulationPeriod.value, __InterpulseModulationPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterpulseModulationPriSync uses Python identifier InterpulseModulationPriSync
    __InterpulseModulationPriSync = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync'), 'InterpulseModulationPriSync', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLInterpulseModulationPriSync', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1272, 6), )

    
    InterpulseModulationPriSync = property(__InterpulseModulationPriSync.value, __InterpulseModulationPriSync.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntrapulseModulationStatus uses Python identifier IntrapulseModulationStatus
    __IntrapulseModulationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), 'IntrapulseModulationStatus', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLIntrapulseModulationStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1273, 6), )

    
    IntrapulseModulationStatus = property(__IntrapulseModulationStatus.value, __IntrapulseModulationStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteAmplitudeState uses Python identifier DiscreteAmplitudeState
    __DiscreteAmplitudeState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), 'DiscreteAmplitudeState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDiscreteAmplitudeState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1274, 6), )

    
    DiscreteAmplitudeState = property(__DiscreteAmplitudeState.value, __DiscreteAmplitudeState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AmplitudeCells uses Python identifier AmplitudeCells
    __AmplitudeCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), 'AmplitudeCells', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLAmplitudeCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1276, 6), )

    
    AmplitudeCells = property(__AmplitudeCells.value, __AmplitudeCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteFrequencyState uses Python identifier DiscreteFrequencyState
    __DiscreteFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), 'DiscreteFrequencyState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDiscreteFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1278, 6), )

    
    DiscreteFrequencyState = property(__DiscreteFrequencyState.value, __DiscreteFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyCells uses Python identifier FrequencyCells
    __FrequencyCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), 'FrequencyCells', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLFrequencyCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1280, 6), )

    
    FrequencyCells = property(__FrequencyCells.value, __FrequencyCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscretePhaseShiftState uses Python identifier DiscretePhaseShiftState
    __DiscretePhaseShiftState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), 'DiscretePhaseShiftState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLDiscretePhaseShiftState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1282, 6), )

    
    DiscretePhaseShiftState = property(__DiscretePhaseShiftState.value, __DiscretePhaseShiftState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BiQuadPhaseMode uses Python identifier BiQuadPhaseMode
    __BiQuadPhaseMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), 'BiQuadPhaseMode', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBiQuadPhaseMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1283, 6), )

    
    BiQuadPhaseMode = property(__BiQuadPhaseMode.value, __BiQuadPhaseMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseCells uses Python identifier PhaseCells
    __PhaseCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), 'PhaseCells', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPhaseCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1285, 6), )

    
    PhaseCells = property(__PhaseCells.value, __PhaseCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFrequencyState uses Python identifier LinearFrequencyState
    __LinearFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), 'LinearFrequencyState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLLinearFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1287, 6), )

    
    LinearFrequencyState = property(__LinearFrequencyState.value, __LinearFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqMods uses Python identifier LinearFreqMods
    __LinearFreqMods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), 'LinearFreqMods', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLLinearFreqMods', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1289, 6), )

    
    LinearFreqMods = property(__LinearFreqMods.value, __LinearFreqMods.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimState uses Python identifier HfimState
    __HfimState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), 'HfimState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLHfimState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1290, 6), )

    
    HfimState = property(__HfimState.value, __HfimState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimCells uses Python identifier HfimCells
    __HfimCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), 'HfimCells', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLHfimCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1292, 6), )

    
    HfimCells = property(__HfimCells.value, __HfimCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqState uses Python identifier ExternalIqState
    __ExternalIqState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), 'ExternalIqState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLExternalIqState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1294, 6), )

    
    ExternalIqState = property(__ExternalIqState.value, __ExternalIqState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqPatterns uses Python identifier ExternalIqPatterns
    __ExternalIqPatterns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), 'ExternalIqPatterns', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLExternalIqPatterns', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1296, 6), )

    
    ExternalIqPatterns = property(__ExternalIqPatterns.value, __ExternalIqPatterns.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseGroupState uses Python identifier PulseGroupState
    __PulseGroupState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState'), 'PulseGroupState', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPulseGroupState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1298, 6), )

    
    PulseGroupState = property(__PulseGroupState.value, __PulseGroupState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseGroupKind uses Python identifier PulseGroupKind
    __PulseGroupKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind'), 'PulseGroupKind', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPulseGroupKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1299, 6), )

    
    PulseGroupKind = property(__PulseGroupKind.value, __PulseGroupKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPri uses Python identifier BurstPri
    __BurstPri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), 'BurstPri', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstPri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1300, 6), )

    
    BurstPri = property(__BurstPri.value, __BurstPri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseWidth uses Python identifier BurstPulseWidth
    __BurstPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), 'BurstPulseWidth', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1301, 6), )

    
    BurstPulseWidth = property(__BurstPulseWidth.value, __BurstPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstDwell uses Python identifier BurstDwell
    __BurstDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell'), 'BurstDwell', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstDwell', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1302, 6), )

    
    BurstDwell = property(__BurstDwell.value, __BurstDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModBasePri uses Python identifier BurstModBasePri
    __BurstModBasePri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri'), 'BurstModBasePri', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModBasePri', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1303, 6), )

    
    BurstModBasePri = property(__BurstModBasePri.value, __BurstModBasePri.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPatternName uses Python identifier BurstModPatternName
    __BurstModPatternName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName'), 'BurstModPatternName', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModPatternName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1304, 6), )

    
    BurstModPatternName = property(__BurstModPatternName.value, __BurstModPatternName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModDeviation uses Python identifier BurstModDeviation
    __BurstModDeviation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation'), 'BurstModDeviation', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModDeviation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1305, 6), )

    
    BurstModDeviation = property(__BurstModDeviation.value, __BurstModDeviation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPulseWidth uses Python identifier BurstModPulseWidth
    __BurstModPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth'), 'BurstModPulseWidth', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1306, 6), )

    
    BurstModPulseWidth = property(__BurstModPulseWidth.value, __BurstModPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModPeriod uses Python identifier BurstModPeriod
    __BurstModPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod'), 'BurstModPeriod', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModPeriod', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1307, 6), )

    
    BurstModPeriod = property(__BurstModPeriod.value, __BurstModPeriod.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstModDwell uses Python identifier BurstModDwell
    __BurstModDwell = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell'), 'BurstModDwell', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstModDwell', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1308, 6), )

    
    BurstModDwell = property(__BurstModDwell.value, __BurstModDwell.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BurstPulseCells uses Python identifier BurstPulseCells
    __BurstPulseCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells'), 'BurstPulseCells', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLBurstPulseCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1309, 6), )

    
    BurstPulseCells = property(__BurstPulseCells.value, __BurstPulseCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StaggerModDwellTime uses Python identifier StaggerModDwellTime
    __StaggerModDwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime'), 'StaggerModDwellTime', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLStaggerModDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1310, 6), )

    
    StaggerModDwellTime = property(__StaggerModDwellTime.value, __StaggerModDwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1311, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1312, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctSeriesPulseSegment_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1313, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    _ElementMap.update({
        __Erp.name() : __Erp,
        __TransmitAttenuation.name() : __TransmitAttenuation,
        __PulseWidth.name() : __PulseWidth,
        __DwellStatus.name() : __DwellStatus,
        __DwellKind.name() : __DwellKind,
        __DwellTime.name() : __DwellTime,
        __DwellTimePulses.name() : __DwellTimePulses,
        __SlowRiseTimeStatus.name() : __SlowRiseTimeStatus,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __NoiseBandwidthState.name() : __NoiseBandwidthState,
        __NoiseBandwidth.name() : __NoiseBandwidth,
        __ModStatus.name() : __ModStatus,
        __InterpulseModulationStatus.name() : __InterpulseModulationStatus,
        __InterpulseModulationKind.name() : __InterpulseModulationKind,
        __InterpulseModPriPercentage.name() : __InterpulseModPriPercentage,
        __JitterDstrbName.name() : __JitterDstrbName,
        __JitterLimit.name() : __JitterLimit,
        __InterpulseModulationPatternName.name() : __InterpulseModulationPatternName,
        __InterpulseModulationPeakDeviation.name() : __InterpulseModulationPeakDeviation,
        __InterpulseModulationPeriodKind.name() : __InterpulseModulationPeriodKind,
        __InterpulseModulationPeriodPulses.name() : __InterpulseModulationPeriodPulses,
        __InterpulseModulationPeriod.name() : __InterpulseModulationPeriod,
        __InterpulseModulationPriSync.name() : __InterpulseModulationPriSync,
        __IntrapulseModulationStatus.name() : __IntrapulseModulationStatus,
        __DiscreteAmplitudeState.name() : __DiscreteAmplitudeState,
        __AmplitudeCells.name() : __AmplitudeCells,
        __DiscreteFrequencyState.name() : __DiscreteFrequencyState,
        __FrequencyCells.name() : __FrequencyCells,
        __DiscretePhaseShiftState.name() : __DiscretePhaseShiftState,
        __BiQuadPhaseMode.name() : __BiQuadPhaseMode,
        __PhaseCells.name() : __PhaseCells,
        __LinearFrequencyState.name() : __LinearFrequencyState,
        __LinearFreqMods.name() : __LinearFreqMods,
        __HfimState.name() : __HfimState,
        __HfimCells.name() : __HfimCells,
        __ExternalIqState.name() : __ExternalIqState,
        __ExternalIqPatterns.name() : __ExternalIqPatterns,
        __PulseGroupState.name() : __PulseGroupState,
        __PulseGroupKind.name() : __PulseGroupKind,
        __BurstPri.name() : __BurstPri,
        __BurstPulseWidth.name() : __BurstPulseWidth,
        __BurstDwell.name() : __BurstDwell,
        __BurstModBasePri.name() : __BurstModBasePri,
        __BurstModPatternName.name() : __BurstModPatternName,
        __BurstModDeviation.name() : __BurstModDeviation,
        __BurstModPulseWidth.name() : __BurstModPulseWidth,
        __BurstModPeriod.name() : __BurstModPeriod,
        __BurstModDwell.name() : __BurstModDwell,
        __BurstPulseCells.name() : __BurstPulseCells,
        __StaggerModDwellTime.name() : __StaggerModDwellTime,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __ScanTrigger.name() : __ScanTrigger
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSeriesPulseSegment = ctSeriesPulseSegment
Namespace.addCategoryObject('typeBinding', 'ctSeriesPulseSegment', ctSeriesPulseSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentCw with content type ELEMENT_ONLY
class ctPulseSegmentCw (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPulseSegmentCw with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPulseSegmentCw')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1317, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentNumber uses Python identifier SegmentNumber
    __SegmentNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), 'SegmentNumber', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLSegmentNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1319, 6), )

    
    SegmentNumber = property(__SegmentNumber.value, __SegmentNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SegmentName uses Python identifier SegmentName
    __SegmentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), 'SegmentName', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLSegmentName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1320, 6), )

    
    SegmentName = property(__SegmentName.value, __SegmentName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Erp uses Python identifier Erp
    __Erp = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Erp'), 'Erp', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLErp', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1321, 6), )

    
    Erp = property(__Erp.value, __Erp.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TransmitAttenuation uses Python identifier TransmitAttenuation
    __TransmitAttenuation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), 'TransmitAttenuation', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLTransmitAttenuation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1322, 6), )

    
    TransmitAttenuation = property(__TransmitAttenuation.value, __TransmitAttenuation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DwellTime uses Python identifier DwellTime
    __DwellTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), 'DwellTime', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLDwellTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1323, 6), )

    
    DwellTime = property(__DwellTime.value, __DwellTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInvisibleState uses Python identifier PulseInvisibleState
    __PulseInvisibleState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), 'PulseInvisibleState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLPulseInvisibleState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1324, 6), )

    
    PulseInvisibleState = property(__PulseInvisibleState.value, __PulseInvisibleState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidthState uses Python identifier NoiseBandwidthState
    __NoiseBandwidthState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), 'NoiseBandwidthState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLNoiseBandwidthState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1325, 6), )

    
    NoiseBandwidthState = property(__NoiseBandwidthState.value, __NoiseBandwidthState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NoiseBandwidth uses Python identifier NoiseBandwidth
    __NoiseBandwidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), 'NoiseBandwidth', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLNoiseBandwidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1326, 6), )

    
    NoiseBandwidth = property(__NoiseBandwidth.value, __NoiseBandwidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}IntrapulseModulationStatus uses Python identifier IntrapulseModulationStatus
    __IntrapulseModulationStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), 'IntrapulseModulationStatus', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLIntrapulseModulationStatus', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1327, 6), )

    
    IntrapulseModulationStatus = property(__IntrapulseModulationStatus.value, __IntrapulseModulationStatus.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteAmplitudeState uses Python identifier DiscreteAmplitudeState
    __DiscreteAmplitudeState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), 'DiscreteAmplitudeState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLDiscreteAmplitudeState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1328, 6), )

    
    DiscreteAmplitudeState = property(__DiscreteAmplitudeState.value, __DiscreteAmplitudeState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}AmplitudeCells uses Python identifier AmplitudeCells
    __AmplitudeCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), 'AmplitudeCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLAmplitudeCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1330, 6), )

    
    AmplitudeCells = property(__AmplitudeCells.value, __AmplitudeCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscreteFrequencyState uses Python identifier DiscreteFrequencyState
    __DiscreteFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), 'DiscreteFrequencyState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLDiscreteFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1331, 6), )

    
    DiscreteFrequencyState = property(__DiscreteFrequencyState.value, __DiscreteFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyCells uses Python identifier FrequencyCells
    __FrequencyCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), 'FrequencyCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLFrequencyCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1333, 6), )

    
    FrequencyCells = property(__FrequencyCells.value, __FrequencyCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DiscretePhaseShiftState uses Python identifier DiscretePhaseShiftState
    __DiscretePhaseShiftState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), 'DiscretePhaseShiftState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLDiscretePhaseShiftState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1335, 6), )

    
    DiscretePhaseShiftState = property(__DiscretePhaseShiftState.value, __DiscretePhaseShiftState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BiQuadPhaseMode uses Python identifier BiQuadPhaseMode
    __BiQuadPhaseMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), 'BiQuadPhaseMode', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLBiQuadPhaseMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1336, 6), )

    
    BiQuadPhaseMode = property(__BiQuadPhaseMode.value, __BiQuadPhaseMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PhaseCells uses Python identifier PhaseCells
    __PhaseCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), 'PhaseCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLPhaseCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1338, 6), )

    
    PhaseCells = property(__PhaseCells.value, __PhaseCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFrequencyState uses Python identifier LinearFrequencyState
    __LinearFrequencyState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), 'LinearFrequencyState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLLinearFrequencyState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1340, 6), )

    
    LinearFrequencyState = property(__LinearFrequencyState.value, __LinearFrequencyState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LinearFreqMods uses Python identifier LinearFreqMods
    __LinearFreqMods = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), 'LinearFreqMods', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLLinearFreqMods', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1342, 6), )

    
    LinearFreqMods = property(__LinearFreqMods.value, __LinearFreqMods.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimState uses Python identifier HfimState
    __HfimState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), 'HfimState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLHfimState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1344, 6), )

    
    HfimState = property(__HfimState.value, __HfimState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HfimCells uses Python identifier HfimCells
    __HfimCells = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), 'HfimCells', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLHfimCells', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1346, 6), )

    
    HfimCells = property(__HfimCells.value, __HfimCells.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqState uses Python identifier ExternalIqState
    __ExternalIqState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), 'ExternalIqState', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLExternalIqState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1348, 6), )

    
    ExternalIqState = property(__ExternalIqState.value, __ExternalIqState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalIqPatterns uses Python identifier ExternalIqPatterns
    __ExternalIqPatterns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), 'ExternalIqPatterns', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLExternalIqPatterns', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1350, 6), )

    
    ExternalIqPatterns = property(__ExternalIqPatterns.value, __ExternalIqPatterns.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyTrigger uses Python identifier FrequencyTrigger
    __FrequencyTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), 'FrequencyTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLFrequencyTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1352, 6), )

    
    FrequencyTrigger = property(__FrequencyTrigger.value, __FrequencyTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PriTrigger uses Python identifier PriTrigger
    __PriTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), 'PriTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLPriTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1353, 6), )

    
    PriTrigger = property(__PriTrigger.value, __PriTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScanTrigger uses Python identifier ScanTrigger
    __ScanTrigger = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), 'ScanTrigger', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLScanTrigger', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1354, 6), )

    
    ScanTrigger = property(__ScanTrigger.value, __ScanTrigger.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), 'ExternalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLExternalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1355, 6), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NormalLink uses Python identifier NormalLink
    __NormalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), 'NormalLink', '__httpwww_amherst_comCEESIMXML_ctPulseSegmentCw_httpwww_amherst_comCEESIMXMLNormalLink', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1356, 6), )

    
    NormalLink = property(__NormalLink.value, __NormalLink.set, None, None)

    _ElementMap.update({
        __SegmentNumber.name() : __SegmentNumber,
        __SegmentName.name() : __SegmentName,
        __Erp.name() : __Erp,
        __TransmitAttenuation.name() : __TransmitAttenuation,
        __DwellTime.name() : __DwellTime,
        __PulseInvisibleState.name() : __PulseInvisibleState,
        __NoiseBandwidthState.name() : __NoiseBandwidthState,
        __NoiseBandwidth.name() : __NoiseBandwidth,
        __IntrapulseModulationStatus.name() : __IntrapulseModulationStatus,
        __DiscreteAmplitudeState.name() : __DiscreteAmplitudeState,
        __AmplitudeCells.name() : __AmplitudeCells,
        __DiscreteFrequencyState.name() : __DiscreteFrequencyState,
        __FrequencyCells.name() : __FrequencyCells,
        __DiscretePhaseShiftState.name() : __DiscretePhaseShiftState,
        __BiQuadPhaseMode.name() : __BiQuadPhaseMode,
        __PhaseCells.name() : __PhaseCells,
        __LinearFrequencyState.name() : __LinearFrequencyState,
        __LinearFreqMods.name() : __LinearFreqMods,
        __HfimState.name() : __HfimState,
        __HfimCells.name() : __HfimCells,
        __ExternalIqState.name() : __ExternalIqState,
        __ExternalIqPatterns.name() : __ExternalIqPatterns,
        __FrequencyTrigger.name() : __FrequencyTrigger,
        __PriTrigger.name() : __PriTrigger,
        __ScanTrigger.name() : __ScanTrigger,
        __ExternalLink.name() : __ExternalLink,
        __NormalLink.name() : __NormalLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPulseSegmentCw = ctPulseSegmentCw
Namespace.addCategoryObject('typeBinding', 'ctPulseSegmentCw', ctPulseSegmentCw)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmode with content type ELEMENT_ONLY
class ctEmitterSubmode (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmode with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterSubmode')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1360, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterSubmodeHeader uses Python identifier EmitterSubmodeHeader
    __EmitterSubmodeHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodeHeader'), 'EmitterSubmodeHeader', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmode_httpwww_amherst_comCEESIMXMLEmitterSubmodeHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1362, 6), )

    
    EmitterSubmodeHeader = property(__EmitterSubmodeHeader.value, __EmitterSubmodeHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorNumbers uses Python identifier GeneratorNumbers
    __GeneratorNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumbers'), 'GeneratorNumbers', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmode_httpwww_amherst_comCEESIMXMLGeneratorNumbers', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1363, 6), )

    
    GeneratorNumbers = property(__GeneratorNumbers.value, __GeneratorNumbers.set, None, None)

    _ElementMap.update({
        __EmitterSubmodeHeader.name() : __EmitterSubmodeHeader,
        __GeneratorNumbers.name() : __GeneratorNumbers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterSubmode = ctEmitterSubmode
Namespace.addCategoryObject('typeBinding', 'ctEmitterSubmode', ctEmitterSubmode)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmodeHeader with content type ELEMENT_ONLY
class ctEmitterSubmodeHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterSubmodeHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterSubmodeHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1372, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SubmodeId uses Python identifier SubmodeId
    __SubmodeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubmodeId'), 'SubmodeId', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmodeHeader_httpwww_amherst_comCEESIMXMLSubmodeId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1374, 6), )

    
    SubmodeId = property(__SubmodeId.value, __SubmodeId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SubmodeName uses Python identifier SubmodeName
    __SubmodeName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SubmodeName'), 'SubmodeName', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmodeHeader_httpwww_amherst_comCEESIMXMLSubmodeName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1375, 6), )

    
    SubmodeName = property(__SubmodeName.value, __SubmodeName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PgpDefaultMode uses Python identifier PgpDefaultMode
    __PgpDefaultMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode'), 'PgpDefaultMode', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmodeHeader_httpwww_amherst_comCEESIMXMLPgpDefaultMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1376, 6), )

    
    PgpDefaultMode = property(__PgpDefaultMode.value, __PgpDefaultMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PgpDropTrackMode uses Python identifier PgpDropTrackMode
    __PgpDropTrackMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode'), 'PgpDropTrackMode', '__httpwww_amherst_comCEESIMXML_ctEmitterSubmodeHeader_httpwww_amherst_comCEESIMXMLPgpDropTrackMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1377, 6), )

    
    PgpDropTrackMode = property(__PgpDropTrackMode.value, __PgpDropTrackMode.set, None, None)

    _ElementMap.update({
        __SubmodeId.name() : __SubmodeId,
        __SubmodeName.name() : __SubmodeName,
        __PgpDefaultMode.name() : __PgpDefaultMode,
        __PgpDropTrackMode.name() : __PgpDropTrackMode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterSubmodeHeader = ctEmitterSubmodeHeader
Namespace.addCategoryObject('typeBinding', 'ctEmitterSubmodeHeader', ctEmitterSubmodeHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorNumberList with content type ELEMENT_ONLY
class ctGeneratorNumberList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGeneratorNumberList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGeneratorNumberList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1381, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}GeneratorNumber uses Python identifier GeneratorNumber
    __GeneratorNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), 'GeneratorNumber', '__httpwww_amherst_comCEESIMXML_ctGeneratorNumberList_httpwww_amherst_comCEESIMXMLGeneratorNumber', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1383, 6), )

    
    GeneratorNumber = property(__GeneratorNumber.value, __GeneratorNumber.set, None, None)

    _ElementMap.update({
        __GeneratorNumber.name() : __GeneratorNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGeneratorNumberList = ctGeneratorNumberList
Namespace.addCategoryObject('typeBinding', 'ctGeneratorNumberList', ctGeneratorNumberList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformData with content type ELEMENT_ONLY
class ctPlatformData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPlatformData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 39, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformHeader uses Python identifier PlatformHeader
    __PlatformHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader'), 'PlatformHeader', '__httpwww_amherst_comCEESIMXML_ctPlatformData_httpwww_amherst_comCEESIMXMLPlatformHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 41, 6), )

    
    PlatformHeader = property(__PlatformHeader.value, __PlatformHeader.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctPlatformData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 43, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 43, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __PlatformHeader.name() : __PlatformHeader
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctPlatformData = ctPlatformData
Namespace.addCategoryObject('typeBinding', 'ctPlatformData', ctPlatformData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformHeader with content type ELEMENT_ONLY
class ctPlatformHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPlatformHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 46, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}UserPlatformNumber uses Python identifier UserPlatformNumber
    __UserPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UserPlatformNumber'), 'UserPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLUserPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 48, 6), )

    
    UserPlatformNumber = property(__UserPlatformNumber.value, __UserPlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformId uses Python identifier PlatformId
    __PlatformId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformId'), 'PlatformId', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLPlatformId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 49, 6), )

    
    PlatformId = property(__PlatformId.value, __PlatformId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SymbolKind uses Python identifier SymbolKind
    __SymbolKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SymbolKind'), 'SymbolKind', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLSymbolKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 50, 6), )

    
    SymbolKind = property(__SymbolKind.value, __SymbolKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ActivationTime uses Python identifier ActivationTime
    __ActivationTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ActivationTime'), 'ActivationTime', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLActivationTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 51, 6), )

    
    ActivationTime = property(__ActivationTime.value, __ActivationTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SpeedUnits uses Python identifier SpeedUnits
    __SpeedUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpeedUnits'), 'SpeedUnits', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLSpeedUnits', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 52, 6), )

    
    SpeedUnits = property(__SpeedUnits.value, __SpeedUnits.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LastUpdateDate uses Python identifier LastUpdateDate
    __LastUpdateDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate'), 'LastUpdateDate', '__httpwww_amherst_comCEESIMXML_ctPlatformHeader_httpwww_amherst_comCEESIMXMLLastUpdateDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 53, 6), )

    
    LastUpdateDate = property(__LastUpdateDate.value, __LastUpdateDate.set, None, None)

    _ElementMap.update({
        __UserPlatformNumber.name() : __UserPlatformNumber,
        __PlatformId.name() : __PlatformId,
        __SymbolKind.name() : __SymbolKind,
        __ActivationTime.name() : __ActivationTime,
        __SpeedUnits.name() : __SpeedUnits,
        __LastUpdateDate.name() : __LastUpdateDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPlatformHeader = ctPlatformHeader
Namespace.addCategoryObject('typeBinding', 'ctPlatformHeader', ctPlatformHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformScriptEventList with content type ELEMENT_ONLY
class ctPlatformScriptEventList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformScriptEventList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPlatformScriptEventList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 42, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformScriptEvent uses Python identifier PlatformScriptEvent
    __PlatformScriptEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformScriptEvent'), 'PlatformScriptEvent', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEventList_httpwww_amherst_comCEESIMXMLPlatformScriptEvent', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 44, 6), )

    
    PlatformScriptEvent = property(__PlatformScriptEvent.value, __PlatformScriptEvent.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEventList_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 46, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 46, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __PlatformScriptEvent.name() : __PlatformScriptEvent
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctPlatformScriptEventList = ctPlatformScriptEventList
Namespace.addCategoryObject('typeBinding', 'ctPlatformScriptEventList', ctPlatformScriptEventList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformScriptEvent with content type ELEMENT_ONLY
class ctPlatformScriptEvent (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformScriptEvent with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPlatformScriptEvent')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 49, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartTime'), 'StartTime', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEvent_httpwww_amherst_comCEESIMXMLStartTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 51, 6), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Deactivate uses Python identifier Deactivate
    __Deactivate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Deactivate'), 'Deactivate', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEvent_httpwww_amherst_comCEESIMXMLDeactivate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 52, 6), )

    
    Deactivate = property(__Deactivate.value, __Deactivate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Segment uses Python identifier Segment
    __Segment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Segment'), 'Segment', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEvent_httpwww_amherst_comCEESIMXMLSegment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 53, 6), )

    
    Segment = property(__Segment.value, __Segment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Intercept uses Python identifier Intercept
    __Intercept = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intercept'), 'Intercept', '__httpwww_amherst_comCEESIMXML_ctPlatformScriptEvent_httpwww_amherst_comCEESIMXMLIntercept', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 54, 6), )

    
    Intercept = property(__Intercept.value, __Intercept.set, None, None)

    _ElementMap.update({
        __StartTime.name() : __StartTime,
        __Deactivate.name() : __Deactivate,
        __Segment.name() : __Segment,
        __Intercept.name() : __Intercept
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPlatformScriptEvent = ctPlatformScriptEvent
Namespace.addCategoryObject('typeBinding', 'ctPlatformScriptEvent', ctPlatformScriptEvent)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPathSegment with content type ELEMENT_ONLY
class ctPathSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPathSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPathSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 58, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Point uses Python identifier Point
    __Point = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Point'), 'Point', '__httpwww_amherst_comCEESIMXML_ctPathSegment_httpwww_amherst_comCEESIMXMLPoint', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 60, 6), )

    
    Point = property(__Point.value, __Point.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Line uses Python identifier Line
    __Line = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Line'), 'Line', '__httpwww_amherst_comCEESIMXML_ctPathSegment_httpwww_amherst_comCEESIMXMLLine', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 61, 6), )

    
    Line = property(__Line.value, __Line.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Arc uses Python identifier Arc
    __Arc = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Arc'), 'Arc', '__httpwww_amherst_comCEESIMXML_ctPathSegment_httpwww_amherst_comCEESIMXMLArc', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 62, 6), )

    
    Arc = property(__Arc.value, __Arc.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Compound uses Python identifier Compound
    __Compound = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Compound'), 'Compound', '__httpwww_amherst_comCEESIMXML_ctPathSegment_httpwww_amherst_comCEESIMXMLCompound', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 63, 6), )

    
    Compound = property(__Compound.value, __Compound.set, None, None)

    _ElementMap.update({
        __Point.name() : __Point,
        __Line.name() : __Line,
        __Arc.name() : __Arc,
        __Compound.name() : __Compound
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPathSegment = ctPathSegment
Namespace.addCategoryObject('typeBinding', 'ctPathSegment', ctPathSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPointSegment with content type ELEMENT_ONLY
class ctPointSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPointSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPointSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 67, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AltitudeKind uses Python identifier AltitudeKind
    __AltitudeKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), 'AltitudeKind', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLAltitudeKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 69, 6), )

    
    AltitudeKind = property(__AltitudeKind.value, __AltitudeKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FirstSegmentOnPath uses Python identifier FirstSegmentOnPath
    __FirstSegmentOnPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), 'FirstSegmentOnPath', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLFirstSegmentOnPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 70, 6), )

    
    FirstSegmentOnPath = property(__FirstSegmentOnPath.value, __FirstSegmentOnPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), 'StartPoint', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLStartPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 71, 6), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledMotionEnable uses Python identifier CoupledMotionEnable
    __CoupledMotionEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable'), 'CoupledMotionEnable', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLCoupledMotionEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 72, 6), )

    
    CoupledMotionEnable = property(__CoupledMotionEnable.value, __CoupledMotionEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartRoll uses Python identifier StartRoll
    __StartRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), 'StartRoll', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLStartRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 73, 6), )

    
    StartRoll = property(__StartRoll.value, __StartRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPitch uses Python identifier StartPitch
    __StartPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), 'StartPitch', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLStartPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 74, 6), )

    
    StartPitch = property(__StartPitch.value, __StartPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartYaw uses Python identifier StartYaw
    __StartYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), 'StartYaw', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLStartYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 75, 6), )

    
    StartYaw = property(__StartYaw.value, __StartYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RollRate uses Python identifier RollRate
    __RollRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), 'RollRate', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLRollRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 76, 6), )

    
    RollRate = property(__RollRate.value, __RollRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PitchRate uses Python identifier PitchRate
    __PitchRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PitchRate'), 'PitchRate', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLPitchRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 77, 6), )

    
    PitchRate = property(__PitchRate.value, __PitchRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}YawRate uses Python identifier YawRate
    __YawRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'YawRate'), 'YawRate', '__httpwww_amherst_comCEESIMXML_ctPointSegment_httpwww_amherst_comCEESIMXMLYawRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 78, 6), )

    
    YawRate = property(__YawRate.value, __YawRate.set, None, None)

    _ElementMap.update({
        __AltitudeKind.name() : __AltitudeKind,
        __FirstSegmentOnPath.name() : __FirstSegmentOnPath,
        __StartPoint.name() : __StartPoint,
        __CoupledMotionEnable.name() : __CoupledMotionEnable,
        __StartRoll.name() : __StartRoll,
        __StartPitch.name() : __StartPitch,
        __StartYaw.name() : __StartYaw,
        __RollRate.name() : __RollRate,
        __PitchRate.name() : __PitchRate,
        __YawRate.name() : __YawRate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPointSegment = ctPointSegment
Namespace.addCategoryObject('typeBinding', 'ctPointSegment', ctPointSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctLineSegment with content type ELEMENT_ONLY
class ctLineSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctLineSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctLineSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 82, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AltitudeKind uses Python identifier AltitudeKind
    __AltitudeKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), 'AltitudeKind', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLAltitudeKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 84, 6), )

    
    AltitudeKind = property(__AltitudeKind.value, __AltitudeKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FirstSegmentOnPath uses Python identifier FirstSegmentOnPath
    __FirstSegmentOnPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), 'FirstSegmentOnPath', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLFirstSegmentOnPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 85, 6), )

    
    FirstSegmentOnPath = property(__FirstSegmentOnPath.value, __FirstSegmentOnPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), 'StartPoint', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLStartPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 87, 6), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPoint uses Python identifier EndPoint
    __EndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), 'EndPoint', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 88, 6), )

    
    EndPoint = property(__EndPoint.value, __EndPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CoupledMotionEnable uses Python identifier CoupledMotionEnable
    __CoupledMotionEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable'), 'CoupledMotionEnable', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLCoupledMotionEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 89, 6), )

    
    CoupledMotionEnable = property(__CoupledMotionEnable.value, __CoupledMotionEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartRoll uses Python identifier StartRoll
    __StartRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), 'StartRoll', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLStartRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 91, 6), )

    
    StartRoll = property(__StartRoll.value, __StartRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPitch uses Python identifier StartPitch
    __StartPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), 'StartPitch', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLStartPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 92, 6), )

    
    StartPitch = property(__StartPitch.value, __StartPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartYaw uses Python identifier StartYaw
    __StartYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), 'StartYaw', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLStartYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 93, 6), )

    
    StartYaw = property(__StartYaw.value, __StartYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndRoll uses Python identifier EndRoll
    __EndRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), 'EndRoll', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 95, 6), )

    
    EndRoll = property(__EndRoll.value, __EndRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPitch uses Python identifier EndPitch
    __EndPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), 'EndPitch', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 96, 6), )

    
    EndPitch = property(__EndPitch.value, __EndPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndYaw uses Python identifier EndYaw
    __EndYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), 'EndYaw', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 97, 6), )

    
    EndYaw = property(__EndYaw.value, __EndYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RollRate uses Python identifier RollRate
    __RollRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), 'RollRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLRollRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 99, 6), )

    
    RollRate = property(__RollRate.value, __RollRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PitchRate uses Python identifier PitchRate
    __PitchRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PitchRate'), 'PitchRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLPitchRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 100, 6), )

    
    PitchRate = property(__PitchRate.value, __PitchRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}YawRate uses Python identifier YawRate
    __YawRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'YawRate'), 'YawRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLYawRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 101, 6), )

    
    YawRate = property(__YawRate.value, __YawRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndRollRate uses Python identifier EndRollRate
    __EndRollRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndRollRate'), 'EndRollRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndRollRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 103, 6), )

    
    EndRollRate = property(__EndRollRate.value, __EndRollRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPitchRate uses Python identifier EndPitchRate
    __EndPitchRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPitchRate'), 'EndPitchRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndPitchRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 104, 6), )

    
    EndPitchRate = property(__EndPitchRate.value, __EndPitchRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndYawRate uses Python identifier EndYawRate
    __EndYawRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndYawRate'), 'EndYawRate', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndYawRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 105, 6), )

    
    EndYawRate = property(__EndYawRate.value, __EndYawRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartSpeed uses Python identifier StartSpeed
    __StartSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), 'StartSpeed', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLStartSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 107, 6), )

    
    StartSpeed = property(__StartSpeed.value, __StartSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndSpeed uses Python identifier EndSpeed
    __EndSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), 'EndSpeed', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLEndSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 108, 6), )

    
    EndSpeed = property(__EndSpeed.value, __EndSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PitchKind uses Python identifier PitchKind
    __PitchKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), 'PitchKind', '__httpwww_amherst_comCEESIMXML_ctLineSegment_httpwww_amherst_comCEESIMXMLPitchKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 109, 6), )

    
    PitchKind = property(__PitchKind.value, __PitchKind.set, None, None)

    _ElementMap.update({
        __AltitudeKind.name() : __AltitudeKind,
        __FirstSegmentOnPath.name() : __FirstSegmentOnPath,
        __StartPoint.name() : __StartPoint,
        __EndPoint.name() : __EndPoint,
        __CoupledMotionEnable.name() : __CoupledMotionEnable,
        __StartRoll.name() : __StartRoll,
        __StartPitch.name() : __StartPitch,
        __StartYaw.name() : __StartYaw,
        __EndRoll.name() : __EndRoll,
        __EndPitch.name() : __EndPitch,
        __EndYaw.name() : __EndYaw,
        __RollRate.name() : __RollRate,
        __PitchRate.name() : __PitchRate,
        __YawRate.name() : __YawRate,
        __EndRollRate.name() : __EndRollRate,
        __EndPitchRate.name() : __EndPitchRate,
        __EndYawRate.name() : __EndYawRate,
        __StartSpeed.name() : __StartSpeed,
        __EndSpeed.name() : __EndSpeed,
        __PitchKind.name() : __PitchKind
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctLineSegment = ctLineSegment
Namespace.addCategoryObject('typeBinding', 'ctLineSegment', ctLineSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctArcSegment with content type ELEMENT_ONLY
class ctArcSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctArcSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctArcSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 113, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AltitudeKind uses Python identifier AltitudeKind
    __AltitudeKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), 'AltitudeKind', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLAltitudeKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 115, 6), )

    
    AltitudeKind = property(__AltitudeKind.value, __AltitudeKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FirstSegmentOnPath uses Python identifier FirstSegmentOnPath
    __FirstSegmentOnPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), 'FirstSegmentOnPath', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLFirstSegmentOnPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 116, 6), )

    
    FirstSegmentOnPath = property(__FirstSegmentOnPath.value, __FirstSegmentOnPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), 'StartPoint', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLStartPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 118, 6), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CenterPoint uses Python identifier CenterPoint
    __CenterPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CenterPoint'), 'CenterPoint', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLCenterPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 119, 6), )

    
    CenterPoint = property(__CenterPoint.value, __CenterPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPoint uses Python identifier EndPoint
    __EndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), 'EndPoint', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLEndPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 120, 6), )

    
    EndPoint = property(__EndPoint.value, __EndPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartRoll uses Python identifier StartRoll
    __StartRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), 'StartRoll', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLStartRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 122, 6), )

    
    StartRoll = property(__StartRoll.value, __StartRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPitch uses Python identifier StartPitch
    __StartPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), 'StartPitch', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLStartPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 123, 6), )

    
    StartPitch = property(__StartPitch.value, __StartPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartYaw uses Python identifier StartYaw
    __StartYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), 'StartYaw', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLStartYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 124, 6), )

    
    StartYaw = property(__StartYaw.value, __StartYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndRoll uses Python identifier EndRoll
    __EndRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), 'EndRoll', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLEndRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 126, 6), )

    
    EndRoll = property(__EndRoll.value, __EndRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPitch uses Python identifier EndPitch
    __EndPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), 'EndPitch', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLEndPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 127, 6), )

    
    EndPitch = property(__EndPitch.value, __EndPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndYaw uses Python identifier EndYaw
    __EndYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), 'EndYaw', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLEndYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 128, 6), )

    
    EndYaw = property(__EndYaw.value, __EndYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartSpeed uses Python identifier StartSpeed
    __StartSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), 'StartSpeed', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLStartSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 130, 6), )

    
    StartSpeed = property(__StartSpeed.value, __StartSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndSpeed uses Python identifier EndSpeed
    __EndSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), 'EndSpeed', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLEndSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 131, 6), )

    
    EndSpeed = property(__EndSpeed.value, __EndSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PitchKind uses Python identifier PitchKind
    __PitchKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), 'PitchKind', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLPitchKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 133, 6), )

    
    PitchKind = property(__PitchKind.value, __PitchKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TurnKind uses Python identifier TurnKind
    __TurnKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TurnKind'), 'TurnKind', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLTurnKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 134, 6), )

    
    TurnKind = property(__TurnKind.value, __TurnKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LoadFactor uses Python identifier LoadFactor
    __LoadFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor'), 'LoadFactor', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLLoadFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 136, 6), )

    
    LoadFactor = property(__LoadFactor.value, __LoadFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RollRate uses Python identifier RollRate
    __RollRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), 'RollRate', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLRollRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 138, 6), )

    
    RollRate = property(__RollRate.value, __RollRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BankAngle uses Python identifier BankAngle
    __BankAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BankAngle'), 'BankAngle', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLBankAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 140, 6), )

    
    BankAngle = property(__BankAngle.value, __BankAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Heading uses Python identifier Heading
    __Heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Heading'), 'Heading', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLHeading', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 141, 6), )

    
    Heading = property(__Heading.value, __Heading.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClimbAngle uses Python identifier ClimbAngle
    __ClimbAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle'), 'ClimbAngle', '__httpwww_amherst_comCEESIMXML_ctArcSegment_httpwww_amherst_comCEESIMXMLClimbAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 142, 6), )

    
    ClimbAngle = property(__ClimbAngle.value, __ClimbAngle.set, None, None)

    _ElementMap.update({
        __AltitudeKind.name() : __AltitudeKind,
        __FirstSegmentOnPath.name() : __FirstSegmentOnPath,
        __StartPoint.name() : __StartPoint,
        __CenterPoint.name() : __CenterPoint,
        __EndPoint.name() : __EndPoint,
        __StartRoll.name() : __StartRoll,
        __StartPitch.name() : __StartPitch,
        __StartYaw.name() : __StartYaw,
        __EndRoll.name() : __EndRoll,
        __EndPitch.name() : __EndPitch,
        __EndYaw.name() : __EndYaw,
        __StartSpeed.name() : __StartSpeed,
        __EndSpeed.name() : __EndSpeed,
        __PitchKind.name() : __PitchKind,
        __TurnKind.name() : __TurnKind,
        __LoadFactor.name() : __LoadFactor,
        __RollRate.name() : __RollRate,
        __BankAngle.name() : __BankAngle,
        __Heading.name() : __Heading,
        __ClimbAngle.name() : __ClimbAngle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctArcSegment = ctArcSegment
Namespace.addCategoryObject('typeBinding', 'ctArcSegment', ctArcSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctCompoundSegment with content type ELEMENT_ONLY
class ctCompoundSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctCompoundSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctCompoundSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 146, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AltitudeKind uses Python identifier AltitudeKind
    __AltitudeKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), 'AltitudeKind', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLAltitudeKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 148, 6), )

    
    AltitudeKind = property(__AltitudeKind.value, __AltitudeKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FirstSegmentOnPath uses Python identifier FirstSegmentOnPath
    __FirstSegmentOnPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), 'FirstSegmentOnPath', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLFirstSegmentOnPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 149, 6), )

    
    FirstSegmentOnPath = property(__FirstSegmentOnPath.value, __FirstSegmentOnPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), 'StartPoint', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLStartPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 151, 6), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPoint uses Python identifier EndPoint
    __EndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), 'EndPoint', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLEndPoint', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 152, 6), )

    
    EndPoint = property(__EndPoint.value, __EndPoint.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartRoll uses Python identifier StartRoll
    __StartRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), 'StartRoll', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLStartRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 154, 6), )

    
    StartRoll = property(__StartRoll.value, __StartRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartPitch uses Python identifier StartPitch
    __StartPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), 'StartPitch', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLStartPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 155, 6), )

    
    StartPitch = property(__StartPitch.value, __StartPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartYaw uses Python identifier StartYaw
    __StartYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), 'StartYaw', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLStartYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 156, 6), )

    
    StartYaw = property(__StartYaw.value, __StartYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndRoll uses Python identifier EndRoll
    __EndRoll = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), 'EndRoll', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLEndRoll', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 158, 6), )

    
    EndRoll = property(__EndRoll.value, __EndRoll.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndPitch uses Python identifier EndPitch
    __EndPitch = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), 'EndPitch', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLEndPitch', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 159, 6), )

    
    EndPitch = property(__EndPitch.value, __EndPitch.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndYaw uses Python identifier EndYaw
    __EndYaw = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), 'EndYaw', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLEndYaw', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 160, 6), )

    
    EndYaw = property(__EndYaw.value, __EndYaw.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}StartSpeed uses Python identifier StartSpeed
    __StartSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), 'StartSpeed', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLStartSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 162, 6), )

    
    StartSpeed = property(__StartSpeed.value, __StartSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EndSpeed uses Python identifier EndSpeed
    __EndSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), 'EndSpeed', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLEndSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 163, 6), )

    
    EndSpeed = property(__EndSpeed.value, __EndSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PitchKind uses Python identifier PitchKind
    __PitchKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), 'PitchKind', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLPitchKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 165, 6), )

    
    PitchKind = property(__PitchKind.value, __PitchKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TurnKind uses Python identifier TurnKind
    __TurnKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TurnKind'), 'TurnKind', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLTurnKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 166, 6), )

    
    TurnKind = property(__TurnKind.value, __TurnKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LoadFactor uses Python identifier LoadFactor
    __LoadFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor'), 'LoadFactor', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLLoadFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 168, 6), )

    
    LoadFactor = property(__LoadFactor.value, __LoadFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RollRate uses Python identifier RollRate
    __RollRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), 'RollRate', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLRollRate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 170, 6), )

    
    RollRate = property(__RollRate.value, __RollRate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}BankAngle uses Python identifier BankAngle
    __BankAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'BankAngle'), 'BankAngle', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLBankAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 172, 6), )

    
    BankAngle = property(__BankAngle.value, __BankAngle.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Heading uses Python identifier Heading
    __Heading = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Heading'), 'Heading', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLHeading', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 173, 6), )

    
    Heading = property(__Heading.value, __Heading.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ClimbAngle uses Python identifier ClimbAngle
    __ClimbAngle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle'), 'ClimbAngle', '__httpwww_amherst_comCEESIMXML_ctCompoundSegment_httpwww_amherst_comCEESIMXMLClimbAngle', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 174, 6), )

    
    ClimbAngle = property(__ClimbAngle.value, __ClimbAngle.set, None, None)

    _ElementMap.update({
        __AltitudeKind.name() : __AltitudeKind,
        __FirstSegmentOnPath.name() : __FirstSegmentOnPath,
        __StartPoint.name() : __StartPoint,
        __EndPoint.name() : __EndPoint,
        __StartRoll.name() : __StartRoll,
        __StartPitch.name() : __StartPitch,
        __StartYaw.name() : __StartYaw,
        __EndRoll.name() : __EndRoll,
        __EndPitch.name() : __EndPitch,
        __EndYaw.name() : __EndYaw,
        __StartSpeed.name() : __StartSpeed,
        __EndSpeed.name() : __EndSpeed,
        __PitchKind.name() : __PitchKind,
        __TurnKind.name() : __TurnKind,
        __LoadFactor.name() : __LoadFactor,
        __RollRate.name() : __RollRate,
        __BankAngle.name() : __BankAngle,
        __Heading.name() : __Heading,
        __ClimbAngle.name() : __ClimbAngle
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctCompoundSegment = ctCompoundSegment
Namespace.addCategoryObject('typeBinding', 'ctCompoundSegment', ctCompoundSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctInterceptSegment with content type ELEMENT_ONLY
class ctInterceptSegment (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctInterceptSegment with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctInterceptSegment')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 178, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}InterceptKind uses Python identifier InterceptKind
    __InterceptKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterceptKind'), 'InterceptKind', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLInterceptKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 180, 6), )

    
    InterceptKind = property(__InterceptKind.value, __InterceptKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TargetSutFlag uses Python identifier TargetSutFlag
    __TargetSutFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetSutFlag'), 'TargetSutFlag', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLTargetSutFlag', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 181, 6), )

    
    TargetSutFlag = property(__TargetSutFlag.value, __TargetSutFlag.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TargetPlatformNumber uses Python identifier TargetPlatformNumber
    __TargetPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TargetPlatformNumber'), 'TargetPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLTargetPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 182, 6), )

    
    TargetPlatformNumber = property(__TargetPlatformNumber.value, __TargetPlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterceptEndAction uses Python identifier InterceptEndAction
    __InterceptEndAction = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterceptEndAction'), 'InterceptEndAction', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLInterceptEndAction', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 183, 6), )

    
    InterceptEndAction = property(__InterceptEndAction.value, __InterceptEndAction.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterceptRange uses Python identifier InterceptRange
    __InterceptRange = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterceptRange'), 'InterceptRange', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLInterceptRange', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 184, 6), )

    
    InterceptRange = property(__InterceptRange.value, __InterceptRange.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ConstantSpeed uses Python identifier ConstantSpeed
    __ConstantSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ConstantSpeed'), 'ConstantSpeed', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLConstantSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 185, 6), )

    
    ConstantSpeed = property(__ConstantSpeed.value, __ConstantSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}MaximumSpeed uses Python identifier MaximumSpeed
    __MaximumSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MaximumSpeed'), 'MaximumSpeed', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLMaximumSpeed', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 186, 6), )

    
    MaximumSpeed = property(__MaximumSpeed.value, __MaximumSpeed.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InterceptDuration uses Python identifier InterceptDuration
    __InterceptDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InterceptDuration'), 'InterceptDuration', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLInterceptDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 187, 6), )

    
    InterceptDuration = property(__InterceptDuration.value, __InterceptDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}LimitDurationFlag uses Python identifier LimitDurationFlag
    __LimitDurationFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LimitDurationFlag'), 'LimitDurationFlag', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLLimitDurationFlag', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 188, 6), )

    
    LimitDurationFlag = property(__LimitDurationFlag.value, __LimitDurationFlag.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DurationLimit uses Python identifier DurationLimit
    __DurationLimit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DurationLimit'), 'DurationLimit', '__httpwww_amherst_comCEESIMXML_ctInterceptSegment_httpwww_amherst_comCEESIMXMLDurationLimit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 189, 6), )

    
    DurationLimit = property(__DurationLimit.value, __DurationLimit.set, None, None)

    _ElementMap.update({
        __InterceptKind.name() : __InterceptKind,
        __TargetSutFlag.name() : __TargetSutFlag,
        __TargetPlatformNumber.name() : __TargetPlatformNumber,
        __InterceptEndAction.name() : __InterceptEndAction,
        __InterceptRange.name() : __InterceptRange,
        __ConstantSpeed.name() : __ConstantSpeed,
        __MaximumSpeed.name() : __MaximumSpeed,
        __InterceptDuration.name() : __InterceptDuration,
        __LimitDurationFlag.name() : __LimitDurationFlag,
        __DurationLimit.name() : __DurationLimit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctInterceptSegment = ctInterceptSegment
Namespace.addCategoryObject('typeBinding', 'ctInterceptSegment', ctInterceptSegment)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioData with content type ELEMENT_ONLY
class ctScenarioData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScenarioData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 41, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioHeader uses Python identifier ScenarioHeader
    __ScenarioHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader'), 'ScenarioHeader', '__httpwww_amherst_comCEESIMXML_ctScenarioData_httpwww_amherst_comCEESIMXMLScenarioHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 43, 6), )

    
    ScenarioHeader = property(__ScenarioHeader.value, __ScenarioHeader.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctScenarioData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 45, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 45, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __ScenarioHeader.name() : __ScenarioHeader
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctScenarioData = ctScenarioData
Namespace.addCategoryObject('typeBinding', 'ctScenarioData', ctScenarioData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioHeader with content type ELEMENT_ONLY
class ctScenarioHeader (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioHeader with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScenarioHeader')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 48, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CreationDate'), 'CreationDate', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLCreationDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 50, 6), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ModificationDate uses Python identifier ModificationDate
    __ModificationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate'), 'ModificationDate', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLModificationDate', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 51, 6), )

    
    ModificationDate = property(__ModificationDate.value, __ModificationDate.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioRevision uses Python identifier ScenarioRevision
    __ScenarioRevision = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioRevision'), 'ScenarioRevision', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLScenarioRevision', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 52, 6), )

    
    ScenarioRevision = property(__ScenarioRevision.value, __ScenarioRevision.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SoftwareReleaseOfLastHeaderEdit uses Python identifier SoftwareReleaseOfLastHeaderEdit
    __SoftwareReleaseOfLastHeaderEdit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SoftwareReleaseOfLastHeaderEdit'), 'SoftwareReleaseOfLastHeaderEdit', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLSoftwareReleaseOfLastHeaderEdit', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 53, 6), )

    
    SoftwareReleaseOfLastHeaderEdit = property(__SoftwareReleaseOfLastHeaderEdit.value, __SoftwareReleaseOfLastHeaderEdit.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DistanceUnits uses Python identifier DistanceUnits
    __DistanceUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DistanceUnits'), 'DistanceUnits', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLDistanceUnits', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 54, 6), )

    
    DistanceUnits = property(__DistanceUnits.value, __DistanceUnits.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EnvironmentKind uses Python identifier EnvironmentKind
    __EnvironmentKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EnvironmentKind'), 'EnvironmentKind', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLEnvironmentKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 55, 6), )

    
    EnvironmentKind = property(__EnvironmentKind.value, __EnvironmentKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Comment uses Python identifier Comment
    __Comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Comment'), 'Comment', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLComment', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 56, 6), )

    
    Comment = property(__Comment.value, __Comment.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SutPlatformNumbers uses Python identifier SutPlatformNumbers
    __SutPlatformNumbers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumbers'), 'SutPlatformNumbers', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLSutPlatformNumbers', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 57, 6), )

    
    SutPlatformNumbers = property(__SutPlatformNumbers.value, __SutPlatformNumbers.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalSutFlag uses Python identifier ExternalSutFlag
    __ExternalSutFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalSutFlag'), 'ExternalSutFlag', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLExternalSutFlag', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 58, 6), )

    
    ExternalSutFlag = property(__ExternalSutFlag.value, __ExternalSutFlag.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HorizonMaskingEnable uses Python identifier HorizonMaskingEnable
    __HorizonMaskingEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HorizonMaskingEnable'), 'HorizonMaskingEnable', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLHorizonMaskingEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 59, 6), )

    
    HorizonMaskingEnable = property(__HorizonMaskingEnable.value, __HorizonMaskingEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EarthRadiusFactor uses Python identifier EarthRadiusFactor
    __EarthRadiusFactor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EarthRadiusFactor'), 'EarthRadiusFactor', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLEarthRadiusFactor', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 60, 6), )

    
    EarthRadiusFactor = property(__EarthRadiusFactor.value, __EarthRadiusFactor.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DataRecording uses Python identifier DataRecording
    __DataRecording = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataRecording'), 'DataRecording', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLDataRecording', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 61, 6), )

    
    DataRecording = property(__DataRecording.value, __DataRecording.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterLibraryEnable uses Python identifier EmitterLibraryEnable
    __EmitterLibraryEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryEnable'), 'EmitterLibraryEnable', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLEmitterLibraryEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 62, 6), )

    
    EmitterLibraryEnable = property(__EmitterLibraryEnable.value, __EmitterLibraryEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterLibraryName uses Python identifier EmitterLibraryName
    __EmitterLibraryName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryName'), 'EmitterLibraryName', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLEmitterLibraryName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 63, 6), )

    
    EmitterLibraryName = property(__EmitterLibraryName.value, __EmitterLibraryName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioElementLibraryEnable uses Python identifier ScenarioElementLibraryEnable
    __ScenarioElementLibraryEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryEnable'), 'ScenarioElementLibraryEnable', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLScenarioElementLibraryEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 64, 6), )

    
    ScenarioElementLibraryEnable = property(__ScenarioElementLibraryEnable.value, __ScenarioElementLibraryEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioElementLibraryName uses Python identifier ScenarioElementLibraryName
    __ScenarioElementLibraryName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryName'), 'ScenarioElementLibraryName', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLScenarioElementLibraryName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 65, 6), )

    
    ScenarioElementLibraryName = property(__ScenarioElementLibraryName.value, __ScenarioElementLibraryName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Terrain uses Python identifier Terrain
    __Terrain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Terrain'), 'Terrain', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLTerrain', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 66, 6), )

    
    Terrain = property(__Terrain.value, __Terrain.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SurfaceEffects uses Python identifier SurfaceEffects
    __SurfaceEffects = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SurfaceEffects'), 'SurfaceEffects', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLSurfaceEffects', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 67, 6), )

    
    SurfaceEffects = property(__SurfaceEffects.value, __SurfaceEffects.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PropagationEffects uses Python identifier PropagationEffects
    __PropagationEffects = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PropagationEffects'), 'PropagationEffects', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLPropagationEffects', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 68, 6), )

    
    PropagationEffects = property(__PropagationEffects.value, __PropagationEffects.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SpacialAndDopplerEffects uses Python identifier SpacialAndDopplerEffects
    __SpacialAndDopplerEffects = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SpacialAndDopplerEffects'), 'SpacialAndDopplerEffects', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLSpacialAndDopplerEffects', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 69, 6), )

    
    SpacialAndDopplerEffects = property(__SpacialAndDopplerEffects.value, __SpacialAndDopplerEffects.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}HardwareResourceOptimizations uses Python identifier HardwareResourceOptimizations
    __HardwareResourceOptimizations = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'HardwareResourceOptimizations'), 'HardwareResourceOptimizations', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLHardwareResourceOptimizations', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 70, 6), )

    
    HardwareResourceOptimizations = property(__HardwareResourceOptimizations.value, __HardwareResourceOptimizations.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Dpms uses Python identifier Dpms
    __Dpms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dpms'), 'Dpms', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLDpms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 71, 6), )

    
    Dpms = property(__Dpms.value, __Dpms.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavigationInterfaceSettings uses Python identifier NavigationInterfaceSettings
    __NavigationInterfaceSettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavigationInterfaceSettings'), 'NavigationInterfaceSettings', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLNavigationInterfaceSettings', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 72, 6), )

    
    NavigationInterfaceSettings = property(__NavigationInterfaceSettings.value, __NavigationInterfaceSettings.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SituationDisplayData uses Python identifier SituationDisplayData
    __SituationDisplayData = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayData'), 'SituationDisplayData', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLSituationDisplayData', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 73, 6), )

    
    SituationDisplayData = property(__SituationDisplayData.value, __SituationDisplayData.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GuiDisplaySettings uses Python identifier GuiDisplaySettings
    __GuiDisplaySettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplaySettings'), 'GuiDisplaySettings', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_httpwww_amherst_comCEESIMXMLGuiDisplaySettings', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 74, 6), )

    
    GuiDisplaySettings = property(__GuiDisplaySettings.value, __GuiDisplaySettings.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctScenarioHeader_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 76, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 76, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __CreationDate.name() : __CreationDate,
        __ModificationDate.name() : __ModificationDate,
        __ScenarioRevision.name() : __ScenarioRevision,
        __SoftwareReleaseOfLastHeaderEdit.name() : __SoftwareReleaseOfLastHeaderEdit,
        __DistanceUnits.name() : __DistanceUnits,
        __EnvironmentKind.name() : __EnvironmentKind,
        __Comment.name() : __Comment,
        __SutPlatformNumbers.name() : __SutPlatformNumbers,
        __ExternalSutFlag.name() : __ExternalSutFlag,
        __HorizonMaskingEnable.name() : __HorizonMaskingEnable,
        __EarthRadiusFactor.name() : __EarthRadiusFactor,
        __DataRecording.name() : __DataRecording,
        __EmitterLibraryEnable.name() : __EmitterLibraryEnable,
        __EmitterLibraryName.name() : __EmitterLibraryName,
        __ScenarioElementLibraryEnable.name() : __ScenarioElementLibraryEnable,
        __ScenarioElementLibraryName.name() : __ScenarioElementLibraryName,
        __Terrain.name() : __Terrain,
        __SurfaceEffects.name() : __SurfaceEffects,
        __PropagationEffects.name() : __PropagationEffects,
        __SpacialAndDopplerEffects.name() : __SpacialAndDopplerEffects,
        __HardwareResourceOptimizations.name() : __HardwareResourceOptimizations,
        __Dpms.name() : __Dpms,
        __NavigationInterfaceSettings.name() : __NavigationInterfaceSettings,
        __SituationDisplayData.name() : __SituationDisplayData,
        __GuiDisplaySettings.name() : __GuiDisplaySettings
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctScenarioHeader = ctScenarioHeader
Namespace.addCategoryObject('typeBinding', 'ctScenarioHeader', ctScenarioHeader)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSutPlatformNumberList with content type ELEMENT_ONLY
class ctSutPlatformNumberList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSutPlatformNumberList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSutPlatformNumberList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 79, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SutPlatformNumber uses Python identifier SutPlatformNumber
    __SutPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumber'), 'SutPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctSutPlatformNumberList_httpwww_amherst_comCEESIMXMLSutPlatformNumber', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 81, 6), )

    
    SutPlatformNumber = property(__SutPlatformNumber.value, __SutPlatformNumber.set, None, None)

    _ElementMap.update({
        __SutPlatformNumber.name() : __SutPlatformNumber
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSutPlatformNumberList = ctSutPlatformNumberList
Namespace.addCategoryObject('typeBinding', 'ctSutPlatformNumberList', ctSutPlatformNumberList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDataRecording with content type ELEMENT_ONLY
class ctDataRecording (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDataRecording with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDataRecording')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 85, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DataRecordingEnable uses Python identifier DataRecordingEnable
    __DataRecordingEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DataRecordingEnable'), 'DataRecordingEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLDataRecordingEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 87, 6), )

    
    DataRecordingEnable = property(__DataRecordingEnable.value, __DataRecordingEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DxFileName uses Python identifier DxFileName
    __DxFileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DxFileName'), 'DxFileName', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLDxFileName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 88, 6), )

    
    DxFileName = property(__DxFileName.value, __DxFileName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RecordPlatformEventsEnable uses Python identifier RecordPlatformEventsEnable
    __RecordPlatformEventsEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformEventsEnable'), 'RecordPlatformEventsEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLRecordPlatformEventsEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 89, 6), )

    
    RecordPlatformEventsEnable = property(__RecordPlatformEventsEnable.value, __RecordPlatformEventsEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RecordEmitterEventsEnable uses Python identifier RecordEmitterEventsEnable
    __RecordEmitterEventsEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterEventsEnable'), 'RecordEmitterEventsEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLRecordEmitterEventsEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 90, 6), )

    
    RecordEmitterEventsEnable = property(__RecordEmitterEventsEnable.value, __RecordEmitterEventsEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RecordPulseCountsEnable uses Python identifier RecordPulseCountsEnable
    __RecordPulseCountsEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecordPulseCountsEnable'), 'RecordPulseCountsEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLRecordPulseCountsEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 91, 6), )

    
    RecordPulseCountsEnable = property(__RecordPulseCountsEnable.value, __RecordPulseCountsEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RecordPlatformStatusEnable uses Python identifier RecordPlatformStatusEnable
    __RecordPlatformStatusEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformStatusEnable'), 'RecordPlatformStatusEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLRecordPlatformStatusEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 92, 6), )

    
    RecordPlatformStatusEnable = property(__RecordPlatformStatusEnable.value, __RecordPlatformStatusEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RecordEmitterStatusEnable uses Python identifier RecordEmitterStatusEnable
    __RecordEmitterStatusEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterStatusEnable'), 'RecordEmitterStatusEnable', '__httpwww_amherst_comCEESIMXML_ctDataRecording_httpwww_amherst_comCEESIMXMLRecordEmitterStatusEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 93, 6), )

    
    RecordEmitterStatusEnable = property(__RecordEmitterStatusEnable.value, __RecordEmitterStatusEnable.set, None, None)

    _ElementMap.update({
        __DataRecordingEnable.name() : __DataRecordingEnable,
        __DxFileName.name() : __DxFileName,
        __RecordPlatformEventsEnable.name() : __RecordPlatformEventsEnable,
        __RecordEmitterEventsEnable.name() : __RecordEmitterEventsEnable,
        __RecordPulseCountsEnable.name() : __RecordPulseCountsEnable,
        __RecordPlatformStatusEnable.name() : __RecordPlatformStatusEnable,
        __RecordEmitterStatusEnable.name() : __RecordEmitterStatusEnable
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDataRecording = ctDataRecording
Namespace.addCategoryObject('typeBinding', 'ctDataRecording', ctDataRecording)


# Complex type {http://www.amherst.com/CEESIM/XML}ctTerrain with content type ELEMENT_ONLY
class ctTerrain (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctTerrain with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctTerrain')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 97, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}TerrainEnable uses Python identifier TerrainEnable
    __TerrainEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable'), 'TerrainEnable', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLTerrainEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 99, 6), )

    
    TerrainEnable = property(__TerrainEnable.value, __TerrainEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerrainMaskingAttenuationEnable uses Python identifier TerrainMaskingAttenuationEnable
    __TerrainMaskingAttenuationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrainMaskingAttenuationEnable'), 'TerrainMaskingAttenuationEnable', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLTerrainMaskingAttenuationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 100, 6), )

    
    TerrainMaskingAttenuationEnable = property(__TerrainMaskingAttenuationEnable.value, __TerrainMaskingAttenuationEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerrainDtedKind uses Python identifier TerrainDtedKind
    __TerrainDtedKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrainDtedKind'), 'TerrainDtedKind', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLTerrainDtedKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 101, 6), )

    
    TerrainDtedKind = property(__TerrainDtedKind.value, __TerrainDtedKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NorthLatitude uses Python identifier NorthLatitude
    __NorthLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude'), 'NorthLatitude', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLNorthLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 102, 6), )

    
    NorthLatitude = property(__NorthLatitude.value, __NorthLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NorthDirection uses Python identifier NorthDirection
    __NorthDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection'), 'NorthDirection', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLNorthDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 103, 6), )

    
    NorthDirection = property(__NorthDirection.value, __NorthDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}WestLongitude uses Python identifier WestLongitude
    __WestLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude'), 'WestLongitude', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLWestLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 104, 6), )

    
    WestLongitude = property(__WestLongitude.value, __WestLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}WestDirection uses Python identifier WestDirection
    __WestDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WestDirection'), 'WestDirection', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLWestDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 105, 6), )

    
    WestDirection = property(__WestDirection.value, __WestDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SouthLatitude uses Python identifier SouthLatitude
    __SouthLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude'), 'SouthLatitude', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLSouthLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 106, 6), )

    
    SouthLatitude = property(__SouthLatitude.value, __SouthLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SouthDirection uses Python identifier SouthDirection
    __SouthDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection'), 'SouthDirection', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLSouthDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 107, 6), )

    
    SouthDirection = property(__SouthDirection.value, __SouthDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EastLongitude uses Python identifier EastLongitude
    __EastLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude'), 'EastLongitude', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLEastLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 108, 6), )

    
    EastLongitude = property(__EastLongitude.value, __EastLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EastDirection uses Python identifier EastDirection
    __EastDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EastDirection'), 'EastDirection', '__httpwww_amherst_comCEESIMXML_ctTerrain_httpwww_amherst_comCEESIMXMLEastDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 109, 6), )

    
    EastDirection = property(__EastDirection.value, __EastDirection.set, None, None)

    _ElementMap.update({
        __TerrainEnable.name() : __TerrainEnable,
        __TerrainMaskingAttenuationEnable.name() : __TerrainMaskingAttenuationEnable,
        __TerrainDtedKind.name() : __TerrainDtedKind,
        __NorthLatitude.name() : __NorthLatitude,
        __NorthDirection.name() : __NorthDirection,
        __WestLongitude.name() : __WestLongitude,
        __WestDirection.name() : __WestDirection,
        __SouthLatitude.name() : __SouthLatitude,
        __SouthDirection.name() : __SouthDirection,
        __EastLongitude.name() : __EastLongitude,
        __EastDirection.name() : __EastDirection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctTerrain = ctTerrain
Namespace.addCategoryObject('typeBinding', 'ctTerrain', ctTerrain)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSurfaceEffects with content type ELEMENT_ONLY
class ctSurfaceEffects (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSurfaceEffects with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSurfaceEffects')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 113, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}MultipathEnable uses Python identifier MultipathEnable
    __MultipathEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'MultipathEnable'), 'MultipathEnable', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLMultipathEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 115, 6), )

    
    MultipathEnable = property(__MultipathEnable.value, __MultipathEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}WaveSplashEnable uses Python identifier WaveSplashEnable
    __WaveSplashEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WaveSplashEnable'), 'WaveSplashEnable', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLWaveSplashEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 116, 6), )

    
    WaveSplashEnable = property(__WaveSplashEnable.value, __WaveSplashEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SutEmitterEarthReflectionEnable uses Python identifier SutEmitterEarthReflectionEnable
    __SutEmitterEarthReflectionEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SutEmitterEarthReflectionEnable'), 'SutEmitterEarthReflectionEnable', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLSutEmitterEarthReflectionEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 117, 6), )

    
    SutEmitterEarthReflectionEnable = property(__SutEmitterEarthReflectionEnable.value, __SutEmitterEarthReflectionEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SurfaceKind uses Python identifier SurfaceKind
    __SurfaceKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SurfaceKind'), 'SurfaceKind', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLSurfaceKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 118, 6), )

    
    SurfaceKind = property(__SurfaceKind.value, __SurfaceKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NorthLatitude uses Python identifier NorthLatitude
    __NorthLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude'), 'NorthLatitude', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLNorthLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 119, 6), )

    
    NorthLatitude = property(__NorthLatitude.value, __NorthLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NorthDirection uses Python identifier NorthDirection
    __NorthDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection'), 'NorthDirection', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLNorthDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 120, 6), )

    
    NorthDirection = property(__NorthDirection.value, __NorthDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}WestLongitude uses Python identifier WestLongitude
    __WestLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude'), 'WestLongitude', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLWestLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 121, 6), )

    
    WestLongitude = property(__WestLongitude.value, __WestLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}WestDirection uses Python identifier WestDirection
    __WestDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'WestDirection'), 'WestDirection', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLWestDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 122, 6), )

    
    WestDirection = property(__WestDirection.value, __WestDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SouthLatitude uses Python identifier SouthLatitude
    __SouthLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude'), 'SouthLatitude', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLSouthLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 123, 6), )

    
    SouthLatitude = property(__SouthLatitude.value, __SouthLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SouthDirection uses Python identifier SouthDirection
    __SouthDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection'), 'SouthDirection', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLSouthDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 124, 6), )

    
    SouthDirection = property(__SouthDirection.value, __SouthDirection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EastLongitude uses Python identifier EastLongitude
    __EastLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude'), 'EastLongitude', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLEastLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 125, 6), )

    
    EastLongitude = property(__EastLongitude.value, __EastLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EastDirection uses Python identifier EastDirection
    __EastDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EastDirection'), 'EastDirection', '__httpwww_amherst_comCEESIMXML_ctSurfaceEffects_httpwww_amherst_comCEESIMXMLEastDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 126, 6), )

    
    EastDirection = property(__EastDirection.value, __EastDirection.set, None, None)

    _ElementMap.update({
        __MultipathEnable.name() : __MultipathEnable,
        __WaveSplashEnable.name() : __WaveSplashEnable,
        __SutEmitterEarthReflectionEnable.name() : __SutEmitterEarthReflectionEnable,
        __SurfaceKind.name() : __SurfaceKind,
        __NorthLatitude.name() : __NorthLatitude,
        __NorthDirection.name() : __NorthDirection,
        __WestLongitude.name() : __WestLongitude,
        __WestDirection.name() : __WestDirection,
        __SouthLatitude.name() : __SouthLatitude,
        __SouthDirection.name() : __SouthDirection,
        __EastLongitude.name() : __EastLongitude,
        __EastDirection.name() : __EastDirection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSurfaceEffects = ctSurfaceEffects
Namespace.addCategoryObject('typeBinding', 'ctSurfaceEffects', ctSurfaceEffects)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPropagationEffects with content type ELEMENT_ONLY
class ctPropagationEffects (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPropagationEffects with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPropagationEffects')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 130, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AtmosphericAbsorptionAttenuationEnable uses Python identifier AtmosphericAbsorptionAttenuationEnable
    __AtmosphericAbsorptionAttenuationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AtmosphericAbsorptionAttenuationEnable'), 'AtmosphericAbsorptionAttenuationEnable', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLAtmosphericAbsorptionAttenuationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 132, 6), )

    
    AtmosphericAbsorptionAttenuationEnable = property(__AtmosphericAbsorptionAttenuationEnable.value, __AtmosphericAbsorptionAttenuationEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RainfallRateKind uses Python identifier RainfallRateKind
    __RainfallRateKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RainfallRateKind'), 'RainfallRateKind', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLRainfallRateKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 133, 6), )

    
    RainfallRateKind = property(__RainfallRateKind.value, __RainfallRateKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DuctingEnable uses Python identifier DuctingEnable
    __DuctingEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuctingEnable'), 'DuctingEnable', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLDuctingEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 134, 6), )

    
    DuctingEnable = property(__DuctingEnable.value, __DuctingEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DuctingBoundaryKind uses Python identifier DuctingBoundaryKind
    __DuctingBoundaryKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuctingBoundaryKind'), 'DuctingBoundaryKind', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLDuctingBoundaryKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 135, 6), )

    
    DuctingBoundaryKind = property(__DuctingBoundaryKind.value, __DuctingBoundaryKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DuctingHeight uses Python identifier DuctingHeight
    __DuctingHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuctingHeight'), 'DuctingHeight', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLDuctingHeight', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 136, 6), )

    
    DuctingHeight = property(__DuctingHeight.value, __DuctingHeight.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DuctingRefractivity uses Python identifier DuctingRefractivity
    __DuctingRefractivity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuctingRefractivity'), 'DuctingRefractivity', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLDuctingRefractivity', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 137, 6), )

    
    DuctingRefractivity = property(__DuctingRefractivity.value, __DuctingRefractivity.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DuctingFileName uses Python identifier DuctingFileName
    __DuctingFileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DuctingFileName'), 'DuctingFileName', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLDuctingFileName', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 138, 6), )

    
    DuctingFileName = property(__DuctingFileName.value, __DuctingFileName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeAttenuationEnable uses Python identifier RangeAttenuationEnable
    __RangeAttenuationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeAttenuationEnable'), 'RangeAttenuationEnable', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLRangeAttenuationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 139, 6), )

    
    RangeAttenuationEnable = property(__RangeAttenuationEnable.value, __RangeAttenuationEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyAttenuationEnable uses Python identifier FrequencyAttenuationEnable
    __FrequencyAttenuationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyAttenuationEnable'), 'FrequencyAttenuationEnable', '__httpwww_amherst_comCEESIMXML_ctPropagationEffects_httpwww_amherst_comCEESIMXMLFrequencyAttenuationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 140, 6), )

    
    FrequencyAttenuationEnable = property(__FrequencyAttenuationEnable.value, __FrequencyAttenuationEnable.set, None, None)

    _ElementMap.update({
        __AtmosphericAbsorptionAttenuationEnable.name() : __AtmosphericAbsorptionAttenuationEnable,
        __RainfallRateKind.name() : __RainfallRateKind,
        __DuctingEnable.name() : __DuctingEnable,
        __DuctingBoundaryKind.name() : __DuctingBoundaryKind,
        __DuctingHeight.name() : __DuctingHeight,
        __DuctingRefractivity.name() : __DuctingRefractivity,
        __DuctingFileName.name() : __DuctingFileName,
        __RangeAttenuationEnable.name() : __RangeAttenuationEnable,
        __FrequencyAttenuationEnable.name() : __FrequencyAttenuationEnable
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctPropagationEffects = ctPropagationEffects
Namespace.addCategoryObject('typeBinding', 'ctPropagationEffects', ctPropagationEffects)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSpacialAndDopplerEffects with content type ELEMENT_ONLY
class ctSpacialAndDopplerEffects (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSpacialAndDopplerEffects with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSpacialAndDopplerEffects')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 144, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}FrequencyDopplerShiftEnable uses Python identifier FrequencyDopplerShiftEnable
    __FrequencyDopplerShiftEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDopplerShiftEnable'), 'FrequencyDopplerShiftEnable', '__httpwww_amherst_comCEESIMXML_ctSpacialAndDopplerEffects_httpwww_amherst_comCEESIMXMLFrequencyDopplerShiftEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 146, 6), )

    
    FrequencyDopplerShiftEnable = property(__FrequencyDopplerShiftEnable.value, __FrequencyDopplerShiftEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RangeAndPriDopplerShiftEnable uses Python identifier RangeAndPriDopplerShiftEnable
    __RangeAndPriDopplerShiftEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RangeAndPriDopplerShiftEnable'), 'RangeAndPriDopplerShiftEnable', '__httpwww_amherst_comCEESIMXML_ctSpacialAndDopplerEffects_httpwww_amherst_comCEESIMXMLRangeAndPriDopplerShiftEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 147, 6), )

    
    RangeAndPriDopplerShiftEnable = property(__RangeAndPriDopplerShiftEnable.value, __RangeAndPriDopplerShiftEnable.set, None, None)

    _ElementMap.update({
        __FrequencyDopplerShiftEnable.name() : __FrequencyDopplerShiftEnable,
        __RangeAndPriDopplerShiftEnable.name() : __RangeAndPriDopplerShiftEnable
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSpacialAndDopplerEffects = ctSpacialAndDopplerEffects
Namespace.addCategoryObject('typeBinding', 'ctSpacialAndDopplerEffects', ctSpacialAndDopplerEffects)


# Complex type {http://www.amherst.com/CEESIM/XML}ctHardwareResourceOptimizations with content type ELEMENT_ONLY
class ctHardwareResourceOptimizations (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctHardwareResourceOptimizations with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctHardwareResourceOptimizations')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 151, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PulseTruncationEnable uses Python identifier PulseTruncationEnable
    __PulseTruncationEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseTruncationEnable'), 'PulseTruncationEnable', '__httpwww_amherst_comCEESIMXML_ctHardwareResourceOptimizations_httpwww_amherst_comCEESIMXMLPulseTruncationEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 153, 6), )

    
    PulseTruncationEnable = property(__PulseTruncationEnable.value, __PulseTruncationEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CwInterruptEnable uses Python identifier CwInterruptEnable
    __CwInterruptEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CwInterruptEnable'), 'CwInterruptEnable', '__httpwww_amherst_comCEESIMXML_ctHardwareResourceOptimizations_httpwww_amherst_comCEESIMXMLCwInterruptEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 154, 6), )

    
    CwInterruptEnable = property(__CwInterruptEnable.value, __CwInterruptEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SensitivityThresholdEnable uses Python identifier SensitivityThresholdEnable
    __SensitivityThresholdEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SensitivityThresholdEnable'), 'SensitivityThresholdEnable', '__httpwww_amherst_comCEESIMXML_ctHardwareResourceOptimizations_httpwww_amherst_comCEESIMXMLSensitivityThresholdEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 155, 6), )

    
    SensitivityThresholdEnable = property(__SensitivityThresholdEnable.value, __SensitivityThresholdEnable.set, None, None)

    _ElementMap.update({
        __PulseTruncationEnable.name() : __PulseTruncationEnable,
        __CwInterruptEnable.name() : __CwInterruptEnable,
        __SensitivityThresholdEnable.name() : __SensitivityThresholdEnable
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctHardwareResourceOptimizations = ctHardwareResourceOptimizations
Namespace.addCategoryObject('typeBinding', 'ctHardwareResourceOptimizations', ctHardwareResourceOptimizations)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmDataList with content type ELEMENT_ONLY
class ctDpmDataList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmDataList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmDataList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 159, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Dpm uses Python identifier Dpm
    __Dpm = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Dpm'), 'Dpm', '__httpwww_amherst_comCEESIMXML_ctDpmDataList_httpwww_amherst_comCEESIMXMLDpm', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 161, 6), )

    
    Dpm = property(__Dpm.value, __Dpm.set, None, None)

    _ElementMap.update({
        __Dpm.name() : __Dpm
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmDataList = ctDpmDataList
Namespace.addCategoryObject('typeBinding', 'ctDpmDataList', ctDpmDataList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmData with content type ELEMENT_ONLY
class ctDpmData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 165, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DpmBoardCollectionEnable uses Python identifier DpmBoardCollectionEnable
    __DpmBoardCollectionEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DpmBoardCollectionEnable'), 'DpmBoardCollectionEnable', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLDpmBoardCollectionEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 167, 6), )

    
    DpmBoardCollectionEnable = property(__DpmBoardCollectionEnable.value, __DpmBoardCollectionEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseContendedState uses Python identifier PulseContendedState
    __PulseContendedState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseContendedState'), 'PulseContendedState', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLPulseContendedState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 168, 6), )

    
    PulseContendedState = property(__PulseContendedState.value, __PulseContendedState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseInhibitState uses Python identifier PulseInhibitState
    __PulseInhibitState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseInhibitState'), 'PulseInhibitState', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLPulseInhibitState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 169, 6), )

    
    PulseInhibitState = property(__PulseInhibitState.value, __PulseInhibitState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CircularBufferCollection uses Python identifier CircularBufferCollection
    __CircularBufferCollection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CircularBufferCollection'), 'CircularBufferCollection', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLCircularBufferCollection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 170, 6), )

    
    CircularBufferCollection = property(__CircularBufferCollection.value, __CircularBufferCollection.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ExternalGatingState uses Python identifier ExternalGatingState
    __ExternalGatingState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ExternalGatingState'), 'ExternalGatingState', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLExternalGatingState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 171, 6), )

    
    ExternalGatingState = property(__ExternalGatingState.value, __ExternalGatingState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DgsVideoState uses Python identifier DgsVideoState
    __DgsVideoState = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DgsVideoState'), 'DgsVideoState', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLDgsVideoState', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 172, 6), )

    
    DgsVideoState = property(__DgsVideoState.value, __DgsVideoState.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PdwKind uses Python identifier PdwKind
    __PdwKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PdwKind'), 'PdwKind', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLPdwKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 173, 6), )

    
    PdwKind = property(__PdwKind.value, __PdwKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}InvalidPdwsFlag uses Python identifier InvalidPdwsFlag
    __InvalidPdwsFlag = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'InvalidPdwsFlag'), 'InvalidPdwsFlag', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLInvalidPdwsFlag', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 174, 6), )

    
    InvalidPdwsFlag = property(__InvalidPdwsFlag.value, __InvalidPdwsFlag.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DpmFilters uses Python identifier DpmFilters
    __DpmFilters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DpmFilters'), 'DpmFilters', '__httpwww_amherst_comCEESIMXML_ctDpmData_httpwww_amherst_comCEESIMXMLDpmFilters', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 175, 6), )

    
    DpmFilters = property(__DpmFilters.value, __DpmFilters.set, None, None)

    _ElementMap.update({
        __DpmBoardCollectionEnable.name() : __DpmBoardCollectionEnable,
        __PulseContendedState.name() : __PulseContendedState,
        __PulseInhibitState.name() : __PulseInhibitState,
        __CircularBufferCollection.name() : __CircularBufferCollection,
        __ExternalGatingState.name() : __ExternalGatingState,
        __DgsVideoState.name() : __DgsVideoState,
        __PdwKind.name() : __PdwKind,
        __InvalidPdwsFlag.name() : __InvalidPdwsFlag,
        __DpmFilters.name() : __DpmFilters
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmData = ctDpmData
Namespace.addCategoryObject('typeBinding', 'ctDpmData', ctDpmData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilter with content type ELEMENT_ONLY
class ctDpmFilter (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilter with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilter')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 179, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}AzAoa uses Python identifier AzAoa
    __AzAoa = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'AzAoa'), 'AzAoa', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLAzAoa', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 181, 6), )

    
    AzAoa = property(__AzAoa.value, __AzAoa.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ElAoa uses Python identifier ElAoa
    __ElAoa = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ElAoa'), 'ElAoa', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLElAoa', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 182, 6), )

    
    ElAoa = property(__ElAoa.value, __ElAoa.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterNumber uses Python identifier EmitterNumber
    __EmitterNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterNumber'), 'EmitterNumber', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLEmitterNumber', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 183, 6), )

    
    EmitterNumber = property(__EmitterNumber.value, __EmitterNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Frequency uses Python identifier Frequency
    __Frequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), 'Frequency', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLFrequency', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 184, 6), )

    
    Frequency = property(__Frequency.value, __Frequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Generator uses Python identifier Generator
    __Generator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Generator'), 'Generator', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLGenerator', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 185, 6), )

    
    Generator = property(__Generator.value, __Generator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterName uses Python identifier EmitterName
    __EmitterName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterName'), 'EmitterName', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLEmitterName', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 186, 6), )

    
    EmitterName = property(__EmitterName.value, __EmitterName.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PulseWidth uses Python identifier PulseWidth
    __PulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), 'PulseWidth', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLPulseWidth', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 187, 6), )

    
    PulseWidth = property(__PulseWidth.value, __PulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Power uses Python identifier Power
    __Power = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Power'), 'Power', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLPower', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 188, 6), )

    
    Power = property(__Power.value, __Power.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioTime uses Python identifier ScenarioTime
    __ScenarioTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioTime'), 'ScenarioTime', '__httpwww_amherst_comCEESIMXML_ctDpmFilter_httpwww_amherst_comCEESIMXMLScenarioTime', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 189, 6), )

    
    ScenarioTime = property(__ScenarioTime.value, __ScenarioTime.set, None, None)

    _ElementMap.update({
        __AzAoa.name() : __AzAoa,
        __ElAoa.name() : __ElAoa,
        __EmitterNumber.name() : __EmitterNumber,
        __Frequency.name() : __Frequency,
        __Generator.name() : __Generator,
        __EmitterName.name() : __EmitterName,
        __PulseWidth.name() : __PulseWidth,
        __Power.name() : __Power,
        __ScenarioTime.name() : __ScenarioTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilter = ctDpmFilter
Namespace.addCategoryObject('typeBinding', 'ctDpmFilter', ctDpmFilter)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterAzAoa with content type ELEMENT_ONLY
class ctDpmFilterAzAoa (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterAzAoa with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterAzAoa')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 193, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerAzimuth uses Python identifier LowerAzimuth
    __LowerAzimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerAzimuth'), 'LowerAzimuth', '__httpwww_amherst_comCEESIMXML_ctDpmFilterAzAoa_httpwww_amherst_comCEESIMXMLLowerAzimuth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 195, 6), )

    
    LowerAzimuth = property(__LowerAzimuth.value, __LowerAzimuth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperAzimuth uses Python identifier UpperAzimuth
    __UpperAzimuth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperAzimuth'), 'UpperAzimuth', '__httpwww_amherst_comCEESIMXML_ctDpmFilterAzAoa_httpwww_amherst_comCEESIMXMLUpperAzimuth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 196, 6), )

    
    UpperAzimuth = property(__UpperAzimuth.value, __UpperAzimuth.set, None, None)

    _ElementMap.update({
        __LowerAzimuth.name() : __LowerAzimuth,
        __UpperAzimuth.name() : __UpperAzimuth
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterAzAoa = ctDpmFilterAzAoa
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterAzAoa', ctDpmFilterAzAoa)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterElAoa with content type ELEMENT_ONLY
class ctDpmFilterElAoa (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterElAoa with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterElAoa')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 200, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerElevation uses Python identifier LowerElevation
    __LowerElevation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerElevation'), 'LowerElevation', '__httpwww_amherst_comCEESIMXML_ctDpmFilterElAoa_httpwww_amherst_comCEESIMXMLLowerElevation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 202, 6), )

    
    LowerElevation = property(__LowerElevation.value, __LowerElevation.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperElevation uses Python identifier UpperElevation
    __UpperElevation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperElevation'), 'UpperElevation', '__httpwww_amherst_comCEESIMXML_ctDpmFilterElAoa_httpwww_amherst_comCEESIMXMLUpperElevation', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 203, 6), )

    
    UpperElevation = property(__UpperElevation.value, __UpperElevation.set, None, None)

    _ElementMap.update({
        __LowerElevation.name() : __LowerElevation,
        __UpperElevation.name() : __UpperElevation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterElAoa = ctDpmFilterElAoa
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterElAoa', ctDpmFilterElAoa)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterEmitterNumber with content type ELEMENT_ONLY
class ctDpmFilterEmitterNumber (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterEmitterNumber with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterEmitterNumber')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 207, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerEmitter uses Python identifier LowerEmitter
    __LowerEmitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerEmitter'), 'LowerEmitter', '__httpwww_amherst_comCEESIMXML_ctDpmFilterEmitterNumber_httpwww_amherst_comCEESIMXMLLowerEmitter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 209, 6), )

    
    LowerEmitter = property(__LowerEmitter.value, __LowerEmitter.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperEmitter uses Python identifier UpperEmitter
    __UpperEmitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperEmitter'), 'UpperEmitter', '__httpwww_amherst_comCEESIMXML_ctDpmFilterEmitterNumber_httpwww_amherst_comCEESIMXMLUpperEmitter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 210, 6), )

    
    UpperEmitter = property(__UpperEmitter.value, __UpperEmitter.set, None, None)

    _ElementMap.update({
        __LowerEmitter.name() : __LowerEmitter,
        __UpperEmitter.name() : __UpperEmitter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterEmitterNumber = ctDpmFilterEmitterNumber
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterEmitterNumber', ctDpmFilterEmitterNumber)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterFrequency with content type ELEMENT_ONLY
class ctDpmFilterFrequency (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterFrequency with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterFrequency')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 214, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerFrequency uses Python identifier LowerFrequency
    __LowerFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerFrequency'), 'LowerFrequency', '__httpwww_amherst_comCEESIMXML_ctDpmFilterFrequency_httpwww_amherst_comCEESIMXMLLowerFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 216, 6), )

    
    LowerFrequency = property(__LowerFrequency.value, __LowerFrequency.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperFrequency uses Python identifier UpperFrequency
    __UpperFrequency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperFrequency'), 'UpperFrequency', '__httpwww_amherst_comCEESIMXML_ctDpmFilterFrequency_httpwww_amherst_comCEESIMXMLUpperFrequency', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 217, 6), )

    
    UpperFrequency = property(__UpperFrequency.value, __UpperFrequency.set, None, None)

    _ElementMap.update({
        __LowerFrequency.name() : __LowerFrequency,
        __UpperFrequency.name() : __UpperFrequency
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterFrequency = ctDpmFilterFrequency
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterFrequency', ctDpmFilterFrequency)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterGenerator with content type ELEMENT_ONLY
class ctDpmFilterGenerator (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterGenerator with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterGenerator')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 221, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerGenerator uses Python identifier LowerGenerator
    __LowerGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerGenerator'), 'LowerGenerator', '__httpwww_amherst_comCEESIMXML_ctDpmFilterGenerator_httpwww_amherst_comCEESIMXMLLowerGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 223, 6), )

    
    LowerGenerator = property(__LowerGenerator.value, __LowerGenerator.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperGenerator uses Python identifier UpperGenerator
    __UpperGenerator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperGenerator'), 'UpperGenerator', '__httpwww_amherst_comCEESIMXML_ctDpmFilterGenerator_httpwww_amherst_comCEESIMXMLUpperGenerator', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 224, 6), )

    
    UpperGenerator = property(__UpperGenerator.value, __UpperGenerator.set, None, None)

    _ElementMap.update({
        __LowerGenerator.name() : __LowerGenerator,
        __UpperGenerator.name() : __UpperGenerator
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterGenerator = ctDpmFilterGenerator
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterGenerator', ctDpmFilterGenerator)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterPulseWidth with content type ELEMENT_ONLY
class ctDpmFilterPulseWidth (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterPulseWidth with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterPulseWidth')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 228, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerPulseWidth uses Python identifier LowerPulseWidth
    __LowerPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerPulseWidth'), 'LowerPulseWidth', '__httpwww_amherst_comCEESIMXML_ctDpmFilterPulseWidth_httpwww_amherst_comCEESIMXMLLowerPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 230, 6), )

    
    LowerPulseWidth = property(__LowerPulseWidth.value, __LowerPulseWidth.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperPulseWidth uses Python identifier UpperPulseWidth
    __UpperPulseWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperPulseWidth'), 'UpperPulseWidth', '__httpwww_amherst_comCEESIMXML_ctDpmFilterPulseWidth_httpwww_amherst_comCEESIMXMLUpperPulseWidth', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 231, 6), )

    
    UpperPulseWidth = property(__UpperPulseWidth.value, __UpperPulseWidth.set, None, None)

    _ElementMap.update({
        __LowerPulseWidth.name() : __LowerPulseWidth,
        __UpperPulseWidth.name() : __UpperPulseWidth
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterPulseWidth = ctDpmFilterPulseWidth
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterPulseWidth', ctDpmFilterPulseWidth)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterPower with content type ELEMENT_ONLY
class ctDpmFilterPower (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterPower with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterPower')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 235, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerPower uses Python identifier LowerPower
    __LowerPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerPower'), 'LowerPower', '__httpwww_amherst_comCEESIMXML_ctDpmFilterPower_httpwww_amherst_comCEESIMXMLLowerPower', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 237, 6), )

    
    LowerPower = property(__LowerPower.value, __LowerPower.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperPower uses Python identifier UpperPower
    __UpperPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperPower'), 'UpperPower', '__httpwww_amherst_comCEESIMXML_ctDpmFilterPower_httpwww_amherst_comCEESIMXMLUpperPower', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 238, 6), )

    
    UpperPower = property(__UpperPower.value, __UpperPower.set, None, None)

    _ElementMap.update({
        __LowerPower.name() : __LowerPower,
        __UpperPower.name() : __UpperPower
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterPower = ctDpmFilterPower
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterPower', ctDpmFilterPower)


# Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterScenarioTime with content type ELEMENT_ONLY
class ctDpmFilterScenarioTime (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctDpmFilterScenarioTime with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctDpmFilterScenarioTime')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 242, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}LowerTime uses Python identifier LowerTime
    __LowerTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'LowerTime'), 'LowerTime', '__httpwww_amherst_comCEESIMXML_ctDpmFilterScenarioTime_httpwww_amherst_comCEESIMXMLLowerTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 244, 6), )

    
    LowerTime = property(__LowerTime.value, __LowerTime.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}UpperTime uses Python identifier UpperTime
    __UpperTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'UpperTime'), 'UpperTime', '__httpwww_amherst_comCEESIMXML_ctDpmFilterScenarioTime_httpwww_amherst_comCEESIMXMLUpperTime', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 245, 6), )

    
    UpperTime = property(__UpperTime.value, __UpperTime.set, None, None)

    _ElementMap.update({
        __LowerTime.name() : __LowerTime,
        __UpperTime.name() : __UpperTime
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctDpmFilterScenarioTime = ctDpmFilterScenarioTime
Namespace.addCategoryObject('typeBinding', 'ctDpmFilterScenarioTime', ctDpmFilterScenarioTime)


# Complex type {http://www.amherst.com/CEESIM/XML}ctNavigationInterfaceSettings with content type ELEMENT_ONLY
class ctNavigationInterfaceSettings (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctNavigationInterfaceSettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctNavigationInterfaceSettings')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 249, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfEnable uses Python identifier NavIfEnable
    __NavIfEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfEnable'), 'NavIfEnable', '__httpwww_amherst_comCEESIMXML_ctNavigationInterfaceSettings_httpwww_amherst_comCEESIMXMLNavIfEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 251, 6), )

    
    NavIfEnable = property(__NavIfEnable.value, __NavIfEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfPhysicalIfKind uses Python identifier NavIfPhysicalIfKind
    __NavIfPhysicalIfKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfPhysicalIfKind'), 'NavIfPhysicalIfKind', '__httpwww_amherst_comCEESIMXML_ctNavigationInterfaceSettings_httpwww_amherst_comCEESIMXMLNavIfPhysicalIfKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 252, 6), )

    
    NavIfPhysicalIfKind = property(__NavIfPhysicalIfKind.value, __NavIfPhysicalIfKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIf1553BusKind uses Python identifier NavIf1553BusKind
    __NavIf1553BusKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIf1553BusKind'), 'NavIf1553BusKind', '__httpwww_amherst_comCEESIMXML_ctNavigationInterfaceSettings_httpwww_amherst_comCEESIMXMLNavIf1553BusKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 253, 6), )

    
    NavIf1553BusKind = property(__NavIf1553BusKind.value, __NavIf1553BusKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfUpdateInterval uses Python identifier NavIfUpdateInterval
    __NavIfUpdateInterval = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfUpdateInterval'), 'NavIfUpdateInterval', '__httpwww_amherst_comCEESIMXML_ctNavigationInterfaceSettings_httpwww_amherst_comCEESIMXMLNavIfUpdateInterval', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 254, 6), )

    
    NavIfUpdateInterval = property(__NavIfUpdateInterval.value, __NavIfUpdateInterval.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfPlatforms uses Python identifier NavIfPlatforms
    __NavIfPlatforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatforms'), 'NavIfPlatforms', '__httpwww_amherst_comCEESIMXML_ctNavigationInterfaceSettings_httpwww_amherst_comCEESIMXMLNavIfPlatforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 255, 6), )

    
    NavIfPlatforms = property(__NavIfPlatforms.value, __NavIfPlatforms.set, None, None)

    _ElementMap.update({
        __NavIfEnable.name() : __NavIfEnable,
        __NavIfPhysicalIfKind.name() : __NavIfPhysicalIfKind,
        __NavIf1553BusKind.name() : __NavIf1553BusKind,
        __NavIfUpdateInterval.name() : __NavIfUpdateInterval,
        __NavIfPlatforms.name() : __NavIfPlatforms
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctNavigationInterfaceSettings = ctNavigationInterfaceSettings
Namespace.addCategoryObject('typeBinding', 'ctNavigationInterfaceSettings', ctNavigationInterfaceSettings)


# Complex type {http://www.amherst.com/CEESIM/XML}ctNavIfPlatformsList with content type ELEMENT_ONLY
class ctNavIfPlatformsList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctNavIfPlatformsList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctNavIfPlatformsList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 259, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfPlatform uses Python identifier NavIfPlatform
    __NavIfPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatform'), 'NavIfPlatform', '__httpwww_amherst_comCEESIMXML_ctNavIfPlatformsList_httpwww_amherst_comCEESIMXMLNavIfPlatform', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 261, 6), )

    
    NavIfPlatform = property(__NavIfPlatform.value, __NavIfPlatform.set, None, None)

    _ElementMap.update({
        __NavIfPlatform.name() : __NavIfPlatform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctNavIfPlatformsList = ctNavIfPlatformsList
Namespace.addCategoryObject('typeBinding', 'ctNavIfPlatformsList', ctNavIfPlatformsList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctNavIfPlatform with content type ELEMENT_ONLY
class ctNavIfPlatform (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctNavIfPlatform with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctNavIfPlatform')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 265, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfUserPlatformNumber uses Python identifier NavIfUserPlatformNumber
    __NavIfUserPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfUserPlatformNumber'), 'NavIfUserPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctNavIfPlatform_httpwww_amherst_comCEESIMXMLNavIfUserPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 267, 6), )

    
    NavIfUserPlatformNumber = property(__NavIfUserPlatformNumber.value, __NavIfUserPlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfRtAddress uses Python identifier NavIfRtAddress
    __NavIfRtAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtAddress'), 'NavIfRtAddress', '__httpwww_amherst_comCEESIMXML_ctNavIfPlatform_httpwww_amherst_comCEESIMXMLNavIfRtAddress', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 268, 6), )

    
    NavIfRtAddress = property(__NavIfRtAddress.value, __NavIfRtAddress.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfRtSubAddress uses Python identifier NavIfRtSubAddress
    __NavIfRtSubAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtSubAddress'), 'NavIfRtSubAddress', '__httpwww_amherst_comCEESIMXML_ctNavIfPlatform_httpwww_amherst_comCEESIMXMLNavIfRtSubAddress', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 269, 6), )

    
    NavIfRtSubAddress = property(__NavIfRtSubAddress.value, __NavIfRtSubAddress.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}NavIfTransferDirection uses Python identifier NavIfTransferDirection
    __NavIfTransferDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'NavIfTransferDirection'), 'NavIfTransferDirection', '__httpwww_amherst_comCEESIMXML_ctNavIfPlatform_httpwww_amherst_comCEESIMXMLNavIfTransferDirection', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 270, 6), )

    
    NavIfTransferDirection = property(__NavIfTransferDirection.value, __NavIfTransferDirection.set, None, None)

    _ElementMap.update({
        __NavIfUserPlatformNumber.name() : __NavIfUserPlatformNumber,
        __NavIfRtAddress.name() : __NavIfRtAddress,
        __NavIfRtSubAddress.name() : __NavIfRtSubAddress,
        __NavIfTransferDirection.name() : __NavIfTransferDirection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctNavIfPlatform = ctNavIfPlatform
Namespace.addCategoryObject('typeBinding', 'ctNavIfPlatform', ctNavIfPlatform)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayDataList with content type ELEMENT_ONLY
class ctSituationDisplayDataList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayDataList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSituationDisplayDataList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 274, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SituationDisplaySettings uses Python identifier SituationDisplaySettings
    __SituationDisplaySettings = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplaySettings'), 'SituationDisplaySettings', '__httpwww_amherst_comCEESIMXML_ctSituationDisplayDataList_httpwww_amherst_comCEESIMXMLSituationDisplaySettings', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 276, 6), )

    
    SituationDisplaySettings = property(__SituationDisplaySettings.value, __SituationDisplaySettings.set, None, None)

    _ElementMap.update({
        __SituationDisplaySettings.name() : __SituationDisplaySettings
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSituationDisplayDataList = ctSituationDisplayDataList
Namespace.addCategoryObject('typeBinding', 'ctSituationDisplayDataList', ctSituationDisplayDataList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplaySettings with content type ELEMENT_ONLY
class ctSituationDisplaySettings (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplaySettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSituationDisplaySettings')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 280, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayServer uses Python identifier DisplayServer
    __DisplayServer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayServer'), 'DisplayServer', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayServer', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 282, 6), )

    
    DisplayServer = property(__DisplayServer.value, __DisplayServer.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayId uses Python identifier DisplayId
    __DisplayId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayId'), 'DisplayId', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayId', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 283, 6), )

    
    DisplayId = property(__DisplayId.value, __DisplayId.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayVisibility uses Python identifier DisplayVisibility
    __DisplayVisibility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayVisibility'), 'DisplayVisibility', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayVisibility', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 284, 6), )

    
    DisplayVisibility = property(__DisplayVisibility.value, __DisplayVisibility.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SituationDisplayCenter uses Python identifier SituationDisplayCenter
    __SituationDisplayCenter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayCenter'), 'SituationDisplayCenter', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLSituationDisplayCenter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 285, 6), )

    
    SituationDisplayCenter = property(__SituationDisplayCenter.value, __SituationDisplayCenter.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Center uses Python identifier Center
    __Center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Center'), 'Center', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLCenter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 286, 6), )

    
    Center = property(__Center.value, __Center.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}SituationDisplayMode uses Python identifier SituationDisplayMode
    __SituationDisplayMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayMode'), 'SituationDisplayMode', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLSituationDisplayMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 287, 6), )

    
    SituationDisplayMode = property(__SituationDisplayMode.value, __SituationDisplayMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayScale uses Python identifier DisplayScale
    __DisplayScale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayScale'), 'DisplayScale', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayScale', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 288, 6), )

    
    DisplayScale = property(__DisplayScale.value, __DisplayScale.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayIntensity uses Python identifier DisplayIntensity
    __DisplayIntensity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayIntensity'), 'DisplayIntensity', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayIntensity', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 289, 6), )

    
    DisplayIntensity = property(__DisplayIntensity.value, __DisplayIntensity.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VelocityVectorDuration uses Python identifier VelocityVectorDuration
    __VelocityVectorDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration'), 'VelocityVectorDuration', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLVelocityVectorDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 290, 6), )

    
    VelocityVectorDuration = property(__VelocityVectorDuration.value, __VelocityVectorDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayTerrain uses Python identifier DisplayTerrain
    __DisplayTerrain = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrain'), 'DisplayTerrain', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayTerrain', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 291, 6), )

    
    DisplayTerrain = property(__DisplayTerrain.value, __DisplayTerrain.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRoughness uses Python identifier DisplayRoughness
    __DisplayRoughness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughness'), 'DisplayRoughness', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRoughness', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 292, 6), )

    
    DisplayRoughness = property(__DisplayRoughness.value, __DisplayRoughness.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayGeopolitical uses Python identifier DisplayGeopolitical
    __DisplayGeopolitical = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayGeopolitical'), 'DisplayGeopolitical', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayGeopolitical', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 293, 6), )

    
    DisplayGeopolitical = property(__DisplayGeopolitical.value, __DisplayGeopolitical.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeopoliticalCenterLatitude uses Python identifier GeopoliticalCenterLatitude
    __GeopoliticalCenterLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude'), 'GeopoliticalCenterLatitude', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLGeopoliticalCenterLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 294, 6), )

    
    GeopoliticalCenterLatitude = property(__GeopoliticalCenterLatitude.value, __GeopoliticalCenterLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeopoliticalCenterLongitude uses Python identifier GeopoliticalCenterLongitude
    __GeopoliticalCenterLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude'), 'GeopoliticalCenterLongitude', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLGeopoliticalCenterLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 295, 6), )

    
    GeopoliticalCenterLongitude = property(__GeopoliticalCenterLongitude.value, __GeopoliticalCenterLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayBarriers uses Python identifier DisplayBarriers
    __DisplayBarriers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers'), 'DisplayBarriers', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayBarriers', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 296, 6), )

    
    DisplayBarriers = property(__DisplayBarriers.value, __DisplayBarriers.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayCoastline uses Python identifier DisplayCoastline
    __DisplayCoastline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline'), 'DisplayCoastline', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayCoastline', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 297, 6), )

    
    DisplayCoastline = property(__DisplayCoastline.value, __DisplayCoastline.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayDepthLines uses Python identifier DisplayDepthLines
    __DisplayDepthLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines'), 'DisplayDepthLines', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayDepthLines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 298, 6), )

    
    DisplayDepthLines = property(__DisplayDepthLines.value, __DisplayDepthLines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPoliticalLines uses Python identifier DisplayPoliticalLines
    __DisplayPoliticalLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines'), 'DisplayPoliticalLines', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPoliticalLines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 299, 6), )

    
    DisplayPoliticalLines = property(__DisplayPoliticalLines.value, __DisplayPoliticalLines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayCanals uses Python identifier DisplayCanals
    __DisplayCanals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals'), 'DisplayCanals', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayCanals', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 300, 6), )

    
    DisplayCanals = property(__DisplayCanals.value, __DisplayCanals.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayWaterways uses Python identifier DisplayWaterways
    __DisplayWaterways = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways'), 'DisplayWaterways', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayWaterways', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 301, 6), )

    
    DisplayWaterways = property(__DisplayWaterways.value, __DisplayWaterways.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayLandforms uses Python identifier DisplayLandforms
    __DisplayLandforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms'), 'DisplayLandforms', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayLandforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 302, 6), )

    
    DisplayLandforms = property(__DisplayLandforms.value, __DisplayLandforms.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRailroads uses Python identifier DisplayRailroads
    __DisplayRailroads = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads'), 'DisplayRailroads', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRailroads', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 303, 6), )

    
    DisplayRailroads = property(__DisplayRailroads.value, __DisplayRailroads.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRoads uses Python identifier DisplayRoads
    __DisplayRoads = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads'), 'DisplayRoads', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRoads', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 304, 6), )

    
    DisplayRoads = property(__DisplayRoads.value, __DisplayRoads.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayTrails uses Python identifier DisplayTrails
    __DisplayTrails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails'), 'DisplayTrails', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayTrails', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 305, 6), )

    
    DisplayTrails = property(__DisplayTrails.value, __DisplayTrails.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayStructures uses Python identifier DisplayStructures
    __DisplayStructures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures'), 'DisplayStructures', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayStructures', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 306, 6), )

    
    DisplayStructures = property(__DisplayStructures.value, __DisplayStructures.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPipelines uses Python identifier DisplayPipelines
    __DisplayPipelines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines'), 'DisplayPipelines', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPipelines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 307, 6), )

    
    DisplayPipelines = property(__DisplayPipelines.value, __DisplayPipelines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayUtilities uses Python identifier DisplayUtilities
    __DisplayUtilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities'), 'DisplayUtilities', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayUtilities', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 308, 6), )

    
    DisplayUtilities = property(__DisplayUtilities.value, __DisplayUtilities.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformDisplayOptionsList uses Python identifier PlatformDisplayOptionsList
    __PlatformDisplayOptionsList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList'), 'PlatformDisplayOptionsList', '__httpwww_amherst_comCEESIMXML_ctSituationDisplaySettings_httpwww_amherst_comCEESIMXMLPlatformDisplayOptionsList', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 309, 6), )

    
    PlatformDisplayOptionsList = property(__PlatformDisplayOptionsList.value, __PlatformDisplayOptionsList.set, None, None)

    _ElementMap.update({
        __DisplayServer.name() : __DisplayServer,
        __DisplayId.name() : __DisplayId,
        __DisplayVisibility.name() : __DisplayVisibility,
        __SituationDisplayCenter.name() : __SituationDisplayCenter,
        __Center.name() : __Center,
        __SituationDisplayMode.name() : __SituationDisplayMode,
        __DisplayScale.name() : __DisplayScale,
        __DisplayIntensity.name() : __DisplayIntensity,
        __VelocityVectorDuration.name() : __VelocityVectorDuration,
        __DisplayTerrain.name() : __DisplayTerrain,
        __DisplayRoughness.name() : __DisplayRoughness,
        __DisplayGeopolitical.name() : __DisplayGeopolitical,
        __GeopoliticalCenterLatitude.name() : __GeopoliticalCenterLatitude,
        __GeopoliticalCenterLongitude.name() : __GeopoliticalCenterLongitude,
        __DisplayBarriers.name() : __DisplayBarriers,
        __DisplayCoastline.name() : __DisplayCoastline,
        __DisplayDepthLines.name() : __DisplayDepthLines,
        __DisplayPoliticalLines.name() : __DisplayPoliticalLines,
        __DisplayCanals.name() : __DisplayCanals,
        __DisplayWaterways.name() : __DisplayWaterways,
        __DisplayLandforms.name() : __DisplayLandforms,
        __DisplayRailroads.name() : __DisplayRailroads,
        __DisplayRoads.name() : __DisplayRoads,
        __DisplayTrails.name() : __DisplayTrails,
        __DisplayStructures.name() : __DisplayStructures,
        __DisplayPipelines.name() : __DisplayPipelines,
        __DisplayUtilities.name() : __DisplayUtilities,
        __PlatformDisplayOptionsList.name() : __PlatformDisplayOptionsList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSituationDisplaySettings = ctSituationDisplaySettings
Namespace.addCategoryObject('typeBinding', 'ctSituationDisplaySettings', ctSituationDisplaySettings)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGuiDisplaySettings with content type ELEMENT_ONLY
class ctGuiDisplaySettings (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGuiDisplaySettings with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGuiDisplaySettings')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 313, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}GuiDisplayMode uses Python identifier GuiDisplayMode
    __GuiDisplayMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayMode'), 'GuiDisplayMode', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGuiDisplayMode', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 315, 6), )

    
    GuiDisplayMode = property(__GuiDisplayMode.value, __GuiDisplayMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayGridKind uses Python identifier DisplayGridKind
    __DisplayGridKind = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayGridKind'), 'DisplayGridKind', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayGridKind', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 316, 6), )

    
    DisplayGridKind = property(__DisplayGridKind.value, __DisplayGridKind.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GuiDisplayCenter uses Python identifier GuiDisplayCenter
    __GuiDisplayCenter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayCenter'), 'GuiDisplayCenter', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGuiDisplayCenter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 317, 6), )

    
    GuiDisplayCenter = property(__GuiDisplayCenter.value, __GuiDisplayCenter.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Center uses Python identifier Center
    __Center = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Center'), 'Center', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLCenter', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 318, 6), )

    
    Center = property(__Center.value, __Center.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}CenterPlatformNumber uses Python identifier CenterPlatformNumber
    __CenterPlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'CenterPlatformNumber'), 'CenterPlatformNumber', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLCenterPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 319, 6), )

    
    CenterPlatformNumber = property(__CenterPlatformNumber.value, __CenterPlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Scale uses Python identifier Scale
    __Scale = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Scale'), 'Scale', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLScale', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 320, 6), )

    
    Scale = property(__Scale.value, __Scale.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Intensity uses Python identifier Intensity
    __Intensity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Intensity'), 'Intensity', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLIntensity', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 321, 6), )

    
    Intensity = property(__Intensity.value, __Intensity.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VelocityVectorDuration uses Python identifier VelocityVectorDuration
    __VelocityVectorDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration'), 'VelocityVectorDuration', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLVelocityVectorDuration', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 322, 6), )

    
    VelocityVectorDuration = property(__VelocityVectorDuration.value, __VelocityVectorDuration.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayHud uses Python identifier DisplayHud
    __DisplayHud = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayHud'), 'DisplayHud', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayHud', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 323, 6), )

    
    DisplayHud = property(__DisplayHud.value, __DisplayHud.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPlatformDetails uses Python identifier DisplayPlatformDetails
    __DisplayPlatformDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatformDetails'), 'DisplayPlatformDetails', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPlatformDetails', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 324, 6), )

    
    DisplayPlatformDetails = property(__DisplayPlatformDetails.value, __DisplayPlatformDetails.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayTerrainLegend uses Python identifier DisplayTerrainLegend
    __DisplayTerrainLegend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrainLegend'), 'DisplayTerrainLegend', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayTerrainLegend', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 325, 6), )

    
    DisplayTerrainLegend = property(__DisplayTerrainLegend.value, __DisplayTerrainLegend.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayGrids uses Python identifier DisplayGrids
    __DisplayGrids = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayGrids'), 'DisplayGrids', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayGrids', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 326, 6), )

    
    DisplayGrids = property(__DisplayGrids.value, __DisplayGrids.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayProjectedPath uses Python identifier DisplayProjectedPath
    __DisplayProjectedPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath'), 'DisplayProjectedPath', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayProjectedPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 327, 6), )

    
    DisplayProjectedPath = property(__DisplayProjectedPath.value, __DisplayProjectedPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPathHistory uses Python identifier DisplayPathHistory
    __DisplayPathHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory'), 'DisplayPathHistory', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPathHistory', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 328, 6), )

    
    DisplayPathHistory = property(__DisplayPathHistory.value, __DisplayPathHistory.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayInactivePlatforms uses Python identifier DisplayInactivePlatforms
    __DisplayInactivePlatforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayInactivePlatforms'), 'DisplayInactivePlatforms', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayInactivePlatforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 329, 6), )

    
    DisplayInactivePlatforms = property(__DisplayInactivePlatforms.value, __DisplayInactivePlatforms.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplaySymbolLegend uses Python identifier DisplaySymbolLegend
    __DisplaySymbolLegend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbolLegend'), 'DisplaySymbolLegend', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplaySymbolLegend', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 330, 6), )

    
    DisplaySymbolLegend = property(__DisplaySymbolLegend.value, __DisplaySymbolLegend.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRoughnessLegend uses Python identifier DisplayRoughnessLegend
    __DisplayRoughnessLegend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughnessLegend'), 'DisplayRoughnessLegend', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRoughnessLegend', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 331, 6), )

    
    DisplayRoughnessLegend = property(__DisplayRoughnessLegend.value, __DisplayRoughnessLegend.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayVmapLegend uses Python identifier DisplayVmapLegend
    __DisplayVmapLegend = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayVmapLegend'), 'DisplayVmapLegend', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayVmapLegend', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 332, 6), )

    
    DisplayVmapLegend = property(__DisplayVmapLegend.value, __DisplayVmapLegend.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}TerrainEnable uses Python identifier TerrainEnable
    __TerrainEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable'), 'TerrainEnable', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLTerrainEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 333, 6), )

    
    TerrainEnable = property(__TerrainEnable.value, __TerrainEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}RoughnessEnable uses Python identifier RoughnessEnable
    __RoughnessEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'RoughnessEnable'), 'RoughnessEnable', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLRoughnessEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 334, 6), )

    
    RoughnessEnable = property(__RoughnessEnable.value, __RoughnessEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}VmapEnable uses Python identifier VmapEnable
    __VmapEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'VmapEnable'), 'VmapEnable', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLVmapEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 335, 6), )

    
    VmapEnable = property(__VmapEnable.value, __VmapEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeopoliticalCenterLatitude uses Python identifier GeopoliticalCenterLatitude
    __GeopoliticalCenterLatitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude'), 'GeopoliticalCenterLatitude', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGeopoliticalCenterLatitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 336, 6), )

    
    GeopoliticalCenterLatitude = property(__GeopoliticalCenterLatitude.value, __GeopoliticalCenterLatitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeopoliticalCenterLongitude uses Python identifier GeopoliticalCenterLongitude
    __GeopoliticalCenterLongitude = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude'), 'GeopoliticalCenterLongitude', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGeopoliticalCenterLongitude', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 337, 6), )

    
    GeopoliticalCenterLongitude = property(__GeopoliticalCenterLongitude.value, __GeopoliticalCenterLongitude.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayBarriers uses Python identifier DisplayBarriers
    __DisplayBarriers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers'), 'DisplayBarriers', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayBarriers', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 338, 6), )

    
    DisplayBarriers = property(__DisplayBarriers.value, __DisplayBarriers.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayCoastline uses Python identifier DisplayCoastline
    __DisplayCoastline = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline'), 'DisplayCoastline', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayCoastline', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 339, 6), )

    
    DisplayCoastline = property(__DisplayCoastline.value, __DisplayCoastline.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayDepthLines uses Python identifier DisplayDepthLines
    __DisplayDepthLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines'), 'DisplayDepthLines', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayDepthLines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 340, 6), )

    
    DisplayDepthLines = property(__DisplayDepthLines.value, __DisplayDepthLines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPoliticalLines uses Python identifier DisplayPoliticalLines
    __DisplayPoliticalLines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines'), 'DisplayPoliticalLines', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPoliticalLines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 341, 6), )

    
    DisplayPoliticalLines = property(__DisplayPoliticalLines.value, __DisplayPoliticalLines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayCanals uses Python identifier DisplayCanals
    __DisplayCanals = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals'), 'DisplayCanals', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayCanals', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 342, 6), )

    
    DisplayCanals = property(__DisplayCanals.value, __DisplayCanals.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayWaterways uses Python identifier DisplayWaterways
    __DisplayWaterways = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways'), 'DisplayWaterways', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayWaterways', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 343, 6), )

    
    DisplayWaterways = property(__DisplayWaterways.value, __DisplayWaterways.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayLandforms uses Python identifier DisplayLandforms
    __DisplayLandforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms'), 'DisplayLandforms', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayLandforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 344, 6), )

    
    DisplayLandforms = property(__DisplayLandforms.value, __DisplayLandforms.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRailroads uses Python identifier DisplayRailroads
    __DisplayRailroads = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads'), 'DisplayRailroads', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRailroads', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 345, 6), )

    
    DisplayRailroads = property(__DisplayRailroads.value, __DisplayRailroads.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayRoads uses Python identifier DisplayRoads
    __DisplayRoads = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads'), 'DisplayRoads', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayRoads', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 346, 6), )

    
    DisplayRoads = property(__DisplayRoads.value, __DisplayRoads.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayTrails uses Python identifier DisplayTrails
    __DisplayTrails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails'), 'DisplayTrails', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayTrails', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 347, 6), )

    
    DisplayTrails = property(__DisplayTrails.value, __DisplayTrails.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayStructures uses Python identifier DisplayStructures
    __DisplayStructures = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures'), 'DisplayStructures', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayStructures', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 348, 6), )

    
    DisplayStructures = property(__DisplayStructures.value, __DisplayStructures.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPipelines uses Python identifier DisplayPipelines
    __DisplayPipelines = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines'), 'DisplayPipelines', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayPipelines', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 349, 6), )

    
    DisplayPipelines = property(__DisplayPipelines.value, __DisplayPipelines.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayUtilities uses Python identifier DisplayUtilities
    __DisplayUtilities = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities'), 'DisplayUtilities', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLDisplayUtilities', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 350, 6), )

    
    DisplayUtilities = property(__DisplayUtilities.value, __DisplayUtilities.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeotiffEnable uses Python identifier GeotiffEnable
    __GeotiffEnable = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeotiffEnable'), 'GeotiffEnable', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGeotiffEnable', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 351, 6), )

    
    GeotiffEnable = property(__GeotiffEnable.value, __GeotiffEnable.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}GeotiffPath uses Python identifier GeotiffPath
    __GeotiffPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'GeotiffPath'), 'GeotiffPath', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLGeotiffPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 352, 6), )

    
    GeotiffPath = property(__GeotiffPath.value, __GeotiffPath.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformDisplayOptionsList uses Python identifier PlatformDisplayOptionsList
    __PlatformDisplayOptionsList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList'), 'PlatformDisplayOptionsList', '__httpwww_amherst_comCEESIMXML_ctGuiDisplaySettings_httpwww_amherst_comCEESIMXMLPlatformDisplayOptionsList', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 353, 6), )

    
    PlatformDisplayOptionsList = property(__PlatformDisplayOptionsList.value, __PlatformDisplayOptionsList.set, None, None)

    _ElementMap.update({
        __GuiDisplayMode.name() : __GuiDisplayMode,
        __DisplayGridKind.name() : __DisplayGridKind,
        __GuiDisplayCenter.name() : __GuiDisplayCenter,
        __Center.name() : __Center,
        __CenterPlatformNumber.name() : __CenterPlatformNumber,
        __Scale.name() : __Scale,
        __Intensity.name() : __Intensity,
        __VelocityVectorDuration.name() : __VelocityVectorDuration,
        __DisplayHud.name() : __DisplayHud,
        __DisplayPlatformDetails.name() : __DisplayPlatformDetails,
        __DisplayTerrainLegend.name() : __DisplayTerrainLegend,
        __DisplayGrids.name() : __DisplayGrids,
        __DisplayProjectedPath.name() : __DisplayProjectedPath,
        __DisplayPathHistory.name() : __DisplayPathHistory,
        __DisplayInactivePlatforms.name() : __DisplayInactivePlatforms,
        __DisplaySymbolLegend.name() : __DisplaySymbolLegend,
        __DisplayRoughnessLegend.name() : __DisplayRoughnessLegend,
        __DisplayVmapLegend.name() : __DisplayVmapLegend,
        __TerrainEnable.name() : __TerrainEnable,
        __RoughnessEnable.name() : __RoughnessEnable,
        __VmapEnable.name() : __VmapEnable,
        __GeopoliticalCenterLatitude.name() : __GeopoliticalCenterLatitude,
        __GeopoliticalCenterLongitude.name() : __GeopoliticalCenterLongitude,
        __DisplayBarriers.name() : __DisplayBarriers,
        __DisplayCoastline.name() : __DisplayCoastline,
        __DisplayDepthLines.name() : __DisplayDepthLines,
        __DisplayPoliticalLines.name() : __DisplayPoliticalLines,
        __DisplayCanals.name() : __DisplayCanals,
        __DisplayWaterways.name() : __DisplayWaterways,
        __DisplayLandforms.name() : __DisplayLandforms,
        __DisplayRailroads.name() : __DisplayRailroads,
        __DisplayRoads.name() : __DisplayRoads,
        __DisplayTrails.name() : __DisplayTrails,
        __DisplayStructures.name() : __DisplayStructures,
        __DisplayPipelines.name() : __DisplayPipelines,
        __DisplayUtilities.name() : __DisplayUtilities,
        __GeotiffEnable.name() : __GeotiffEnable,
        __GeotiffPath.name() : __GeotiffPath,
        __PlatformDisplayOptionsList.name() : __PlatformDisplayOptionsList
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGuiDisplaySettings = ctGuiDisplaySettings
Namespace.addCategoryObject('typeBinding', 'ctGuiDisplaySettings', ctGuiDisplaySettings)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayPlatformOptionsList with content type ELEMENT_ONLY
class ctSituationDisplayPlatformOptionsList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayPlatformOptionsList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSituationDisplayPlatformOptionsList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 357, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformDisplayOptions uses Python identifier PlatformDisplayOptions
    __PlatformDisplayOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions'), 'PlatformDisplayOptions', '__httpwww_amherst_comCEESIMXML_ctSituationDisplayPlatformOptionsList_httpwww_amherst_comCEESIMXMLPlatformDisplayOptions', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 359, 6), )

    
    PlatformDisplayOptions = property(__PlatformDisplayOptions.value, __PlatformDisplayOptions.set, None, None)

    _ElementMap.update({
        __PlatformDisplayOptions.name() : __PlatformDisplayOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSituationDisplayPlatformOptionsList = ctSituationDisplayPlatformOptionsList
Namespace.addCategoryObject('typeBinding', 'ctSituationDisplayPlatformOptionsList', ctSituationDisplayPlatformOptionsList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayPlatformOptions with content type ELEMENT_ONLY
class ctSituationDisplayPlatformOptions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSituationDisplayPlatformOptions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSituationDisplayPlatformOptions')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 363, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformNumber uses Python identifier PlatformNumber
    __PlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber'), 'PlatformNumber', '__httpwww_amherst_comCEESIMXML_ctSituationDisplayPlatformOptions_httpwww_amherst_comCEESIMXMLPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 365, 6), )

    
    PlatformNumber = property(__PlatformNumber.value, __PlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPlatform uses Python identifier DisplayPlatform
    __DisplayPlatform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatform'), 'DisplayPlatform', '__httpwww_amherst_comCEESIMXML_ctSituationDisplayPlatformOptions_httpwww_amherst_comCEESIMXMLDisplayPlatform', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 366, 6), )

    
    DisplayPlatform = property(__DisplayPlatform.value, __DisplayPlatform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPath uses Python identifier DisplayPath
    __DisplayPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPath'), 'DisplayPath', '__httpwww_amherst_comCEESIMXML_ctSituationDisplayPlatformOptions_httpwww_amherst_comCEESIMXMLDisplayPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 367, 6), )

    
    DisplayPath = property(__DisplayPath.value, __DisplayPath.set, None, None)

    _ElementMap.update({
        __PlatformNumber.name() : __PlatformNumber,
        __DisplayPlatform.name() : __DisplayPlatform,
        __DisplayPath.name() : __DisplayPath
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSituationDisplayPlatformOptions = ctSituationDisplayPlatformOptions
Namespace.addCategoryObject('typeBinding', 'ctSituationDisplayPlatformOptions', ctSituationDisplayPlatformOptions)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGuiPlatformOptionsList with content type ELEMENT_ONLY
class ctGuiPlatformOptionsList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGuiPlatformOptionsList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGuiPlatformOptionsList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 371, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformDisplayOptions uses Python identifier PlatformDisplayOptions
    __PlatformDisplayOptions = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions'), 'PlatformDisplayOptions', '__httpwww_amherst_comCEESIMXML_ctGuiPlatformOptionsList_httpwww_amherst_comCEESIMXMLPlatformDisplayOptions', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 373, 6), )

    
    PlatformDisplayOptions = property(__PlatformDisplayOptions.value, __PlatformDisplayOptions.set, None, None)

    _ElementMap.update({
        __PlatformDisplayOptions.name() : __PlatformDisplayOptions
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGuiPlatformOptionsList = ctGuiPlatformOptionsList
Namespace.addCategoryObject('typeBinding', 'ctGuiPlatformOptionsList', ctGuiPlatformOptionsList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctGuiPlatformOptions with content type ELEMENT_ONLY
class ctGuiPlatformOptions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctGuiPlatformOptions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctGuiPlatformOptions')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 377, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformNumber uses Python identifier PlatformNumber
    __PlatformNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber'), 'PlatformNumber', '__httpwww_amherst_comCEESIMXML_ctGuiPlatformOptions_httpwww_amherst_comCEESIMXMLPlatformNumber', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 379, 6), )

    
    PlatformNumber = property(__PlatformNumber.value, __PlatformNumber.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplaySymbol uses Python identifier DisplaySymbol
    __DisplaySymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbol'), 'DisplaySymbol', '__httpwww_amherst_comCEESIMXML_ctGuiPlatformOptions_httpwww_amherst_comCEESIMXMLDisplaySymbol', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 380, 6), )

    
    DisplaySymbol = property(__DisplaySymbol.value, __DisplaySymbol.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayPathHistory uses Python identifier DisplayPathHistory
    __DisplayPathHistory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory'), 'DisplayPathHistory', '__httpwww_amherst_comCEESIMXML_ctGuiPlatformOptions_httpwww_amherst_comCEESIMXMLDisplayPathHistory', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 381, 6), )

    
    DisplayPathHistory = property(__DisplayPathHistory.value, __DisplayPathHistory.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}DisplayProjectedPath uses Python identifier DisplayProjectedPath
    __DisplayProjectedPath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath'), 'DisplayProjectedPath', '__httpwww_amherst_comCEESIMXML_ctGuiPlatformOptions_httpwww_amherst_comCEESIMXMLDisplayProjectedPath', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 382, 6), )

    
    DisplayProjectedPath = property(__DisplayProjectedPath.value, __DisplayProjectedPath.set, None, None)

    _ElementMap.update({
        __PlatformNumber.name() : __PlatformNumber,
        __DisplaySymbol.name() : __DisplaySymbol,
        __DisplayPathHistory.name() : __DisplayPathHistory,
        __DisplayProjectedPath.name() : __DisplayProjectedPath
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctGuiPlatformOptions = ctGuiPlatformOptions
Namespace.addCategoryObject('typeBinding', 'ctGuiPlatformOptions', ctGuiPlatformOptions)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterModeList with content type ELEMENT_ONLY
class ctEmitterModeList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterModeList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterModeList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 103, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterMode uses Python identifier EmitterMode
    __EmitterMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode'), 'EmitterMode', '__httpwww_amherst_comCEESIMXML_ctEmitterModeList_httpwww_amherst_comCEESIMXMLEmitterMode', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 105, 6), )

    
    EmitterMode = property(__EmitterMode.value, __EmitterMode.set, None, None)

    _ElementMap.update({
        __EmitterMode.name() : __EmitterMode
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterModeList = ctEmitterModeList
Namespace.addCategoryObject('typeBinding', 'ctEmitterModeList', ctEmitterModeList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterFullData with content type ELEMENT_ONLY
class ctEmitterFullData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterFullData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterFullData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 109, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterHeader uses Python identifier EmitterHeader
    __EmitterHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), 'EmitterHeader', '__httpwww_amherst_comCEESIMXML_ctEmitterFullData_httpwww_amherst_comCEESIMXMLEmitterHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 111, 6), )

    
    EmitterHeader = property(__EmitterHeader.value, __EmitterHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterScript uses Python identifier EmitterScript
    __EmitterScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript'), 'EmitterScript', '__httpwww_amherst_comCEESIMXML_ctEmitterFullData_httpwww_amherst_comCEESIMXMLEmitterScript', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 112, 6), )

    
    EmitterScript = property(__EmitterScript.value, __EmitterScript.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterModes uses Python identifier EmitterModes
    __EmitterModes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes'), 'EmitterModes', '__httpwww_amherst_comCEESIMXML_ctEmitterFullData_httpwww_amherst_comCEESIMXMLEmitterModes', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 118, 6), )

    
    EmitterModes = property(__EmitterModes.value, __EmitterModes.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctEmitterFullData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 125, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 125, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmitterHeader.name() : __EmitterHeader,
        __EmitterScript.name() : __EmitterScript,
        __EmitterModes.name() : __EmitterModes
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctEmitterFullData = ctEmitterFullData
Namespace.addCategoryObject('typeBinding', 'ctEmitterFullData', ctEmitterFullData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterFullDataList with content type ELEMENT_ONLY
class ctEmitterFullDataList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmitterFullDataList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmitterFullDataList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 128, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Emitter uses Python identifier Emitter
    __Emitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), 'Emitter', '__httpwww_amherst_comCEESIMXML_ctEmitterFullDataList_httpwww_amherst_comCEESIMXMLEmitter', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 130, 6), )

    
    Emitter = property(__Emitter.value, __Emitter.set, None, None)

    _ElementMap.update({
        __Emitter.name() : __Emitter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmitterFullDataList = ctEmitterFullDataList
Namespace.addCategoryObject('typeBinding', 'ctEmitterFullDataList', ctEmitterFullDataList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformFullData with content type ELEMENT_ONLY
class ctPlatformFullData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctPlatformFullData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctPlatformFullData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 134, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformHeader uses Python identifier PlatformHeader
    __PlatformHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader'), 'PlatformHeader', '__httpwww_amherst_comCEESIMXML_ctPlatformFullData_httpwww_amherst_comCEESIMXMLPlatformHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 136, 6), )

    
    PlatformHeader = property(__PlatformHeader.value, __PlatformHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}PlatformScript uses Python identifier PlatformScript
    __PlatformScript = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'PlatformScript'), 'PlatformScript', '__httpwww_amherst_comCEESIMXML_ctPlatformFullData_httpwww_amherst_comCEESIMXMLPlatformScript', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 137, 6), )

    
    PlatformScript = property(__PlatformScript.value, __PlatformScript.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Emitters uses Python identifier Emitters
    __Emitters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emitters'), 'Emitters', '__httpwww_amherst_comCEESIMXML_ctPlatformFullData_httpwww_amherst_comCEESIMXMLEmitters', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 138, 6), )

    
    Emitters = property(__Emitters.value, __Emitters.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctPlatformFullData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 140, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 140, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __PlatformHeader.name() : __PlatformHeader,
        __PlatformScript.name() : __PlatformScript,
        __Emitters.name() : __Emitters
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctPlatformFullData = ctPlatformFullData
Namespace.addCategoryObject('typeBinding', 'ctPlatformFullData', ctPlatformFullData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioPlatformFullDataList with content type ELEMENT_ONLY
class ctScenarioPlatformFullDataList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioPlatformFullDataList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScenarioPlatformFullDataList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 143, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Platform uses Python identifier Platform
    __Platform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Platform'), 'Platform', '__httpwww_amherst_comCEESIMXML_ctScenarioPlatformFullDataList_httpwww_amherst_comCEESIMXMLPlatform', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 145, 6), )

    
    Platform = property(__Platform.value, __Platform.set, None, None)

    _ElementMap.update({
        __Platform.name() : __Platform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctScenarioPlatformFullDataList = ctScenarioPlatformFullDataList
Namespace.addCategoryObject('typeBinding', 'ctScenarioPlatformFullDataList', ctScenarioPlatformFullDataList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSelPlatformFullDataList with content type ELEMENT_ONLY
class ctSelPlatformFullDataList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSelPlatformFullDataList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSelPlatformFullDataList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 149, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Platform uses Python identifier Platform
    __Platform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Platform'), 'Platform', '__httpwww_amherst_comCEESIMXML_ctSelPlatformFullDataList_httpwww_amherst_comCEESIMXMLPlatform', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 151, 6), )

    
    Platform = property(__Platform.value, __Platform.set, None, None)

    _ElementMap.update({
        __Platform.name() : __Platform
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctSelPlatformFullDataList = ctSelPlatformFullDataList
Namespace.addCategoryObject('typeBinding', 'ctSelPlatformFullDataList', ctSelPlatformFullDataList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioFullData with content type ELEMENT_ONLY
class ctScenarioFullData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctScenarioFullData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctScenarioFullData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 161, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}ScenarioHeader uses Python identifier ScenarioHeader
    __ScenarioHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader'), 'ScenarioHeader', '__httpwww_amherst_comCEESIMXML_ctScenarioFullData_httpwww_amherst_comCEESIMXMLScenarioHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 163, 6), )

    
    ScenarioHeader = property(__ScenarioHeader.value, __ScenarioHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Platforms uses Python identifier Platforms
    __Platforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Platforms'), 'Platforms', '__httpwww_amherst_comCEESIMXML_ctScenarioFullData_httpwww_amherst_comCEESIMXMLPlatforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 164, 6), )

    
    Platforms = property(__Platforms.value, __Platforms.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctScenarioFullData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 166, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 166, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __ScenarioHeader.name() : __ScenarioHeader,
        __Platforms.name() : __Platforms
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctScenarioFullData = ctScenarioFullData
Namespace.addCategoryObject('typeBinding', 'ctScenarioFullData', ctScenarioFullData)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSel with content type ELEMENT_ONLY
class ctSel (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSel with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSel')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 169, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}SelHeader uses Python identifier SelHeader
    __SelHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'SelHeader'), 'SelHeader', '__httpwww_amherst_comCEESIMXML_ctSel_httpwww_amherst_comCEESIMXMLSelHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 171, 6), )

    
    SelHeader = property(__SelHeader.value, __SelHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Platforms uses Python identifier Platforms
    __Platforms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Platforms'), 'Platforms', '__httpwww_amherst_comCEESIMXML_ctSel_httpwww_amherst_comCEESIMXMLPlatforms', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 172, 6), )

    
    Platforms = property(__Platforms.value, __Platforms.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctSel_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 174, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 174, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __SelHeader.name() : __SelHeader,
        __Platforms.name() : __Platforms
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctSel = ctSel
Namespace.addCategoryObject('typeBinding', 'ctSel', ctSel)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmlEmitter with content type ELEMENT_ONLY
class ctEmlEmitter (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmlEmitter with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmlEmitter')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 177, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterHeader uses Python identifier EmitterHeader
    __EmitterHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), 'EmitterHeader', '__httpwww_amherst_comCEESIMXML_ctEmlEmitter_httpwww_amherst_comCEESIMXMLEmitterHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 179, 6), )

    
    EmitterHeader = property(__EmitterHeader.value, __EmitterHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterModes uses Python identifier EmitterModes
    __EmitterModes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes'), 'EmitterModes', '__httpwww_amherst_comCEESIMXML_ctEmlEmitter_httpwww_amherst_comCEESIMXMLEmitterModes', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 180, 6), )

    
    EmitterModes = property(__EmitterModes.value, __EmitterModes.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctEmlEmitter_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 187, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 187, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmitterHeader.name() : __EmitterHeader,
        __EmitterModes.name() : __EmitterModes
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctEmlEmitter = ctEmlEmitter
Namespace.addCategoryObject('typeBinding', 'ctEmlEmitter', ctEmlEmitter)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEmlEmitterList with content type ELEMENT_ONLY
class ctEmlEmitterList (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEmlEmitterList with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEmlEmitterList')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 190, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}Emitter uses Python identifier Emitter
    __Emitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), 'Emitter', '__httpwww_amherst_comCEESIMXML_ctEmlEmitterList_httpwww_amherst_comCEESIMXMLEmitter', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 192, 6), )

    
    Emitter = property(__Emitter.value, __Emitter.set, None, None)

    _ElementMap.update({
        __Emitter.name() : __Emitter
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ctEmlEmitterList = ctEmlEmitterList
Namespace.addCategoryObject('typeBinding', 'ctEmlEmitterList', ctEmlEmitterList)


# Complex type {http://www.amherst.com/CEESIM/XML}ctEml with content type ELEMENT_ONLY
class ctEml (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctEml with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctEml')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 196, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmlHeader uses Python identifier EmlHeader
    __EmlHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmlHeader'), 'EmlHeader', '__httpwww_amherst_comCEESIMXML_ctEml_httpwww_amherst_comCEESIMXMLEmlHeader', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 198, 6), )

    
    EmlHeader = property(__EmlHeader.value, __EmlHeader.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Emitters uses Python identifier Emitters
    __Emitters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emitters'), 'Emitters', '__httpwww_amherst_comCEESIMXML_ctEml_httpwww_amherst_comCEESIMXMLEmitters', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 199, 6), )

    
    Emitters = property(__Emitters.value, __Emitters.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctEml_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 201, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 201, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmlHeader.name() : __EmlHeader,
        __Emitters.name() : __Emitters
    })
    _AttributeMap.update({
        __PerId.name() : __PerId
    })
_module_typeBindings.ctEml = ctEml
Namespace.addCategoryObject('typeBinding', 'ctEml', ctEml)


# Complex type {http://www.amherst.com/CEESIM/XML}ctSimEntityData with content type ELEMENT_ONLY
class ctSimEntityData (pyxb.binding.basis.complexTypeDefinition):
    """Complex type {http://www.amherst.com/CEESIM/XML}ctSimEntityData with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ctSimEntityData')
    _XSDLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 62, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element {http://www.amherst.com/CEESIM/XML}EmitterMode uses Python identifier EmitterMode
    __EmitterMode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode'), 'EmitterMode', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLEmitterMode', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 65, 6), )

    
    EmitterMode = property(__EmitterMode.value, __EmitterMode.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Emitter uses Python identifier Emitter
    __Emitter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), 'Emitter', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLEmitter', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 67, 6), )

    
    Emitter = property(__Emitter.value, __Emitter.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Platform uses Python identifier Platform
    __Platform = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Platform'), 'Platform', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLPlatform', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 69, 6), )

    
    Platform = property(__Platform.value, __Platform.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Scenario uses Python identifier Scenario
    __Scenario = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Scenario'), 'Scenario', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLScenario', True, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 71, 6), )

    
    Scenario = property(__Scenario.value, __Scenario.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Sel uses Python identifier Sel
    __Sel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Sel'), 'Sel', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLSel', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 82, 6), )

    
    Sel = property(__Sel.value, __Sel.set, None, None)

    
    # Element {http://www.amherst.com/CEESIM/XML}Eml uses Python identifier Eml
    __Eml = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(Namespace, 'Eml'), 'Eml', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_httpwww_amherst_comCEESIMXMLEml', False, pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 89, 6), )

    
    Eml = property(__Eml.value, __Eml.set, None, None)

    
    # Attribute Major uses Python identifier Major
    __Major = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Major'), 'Major', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_Major', _module_typeBindings.stSimEntityMajorRevision, required=True)
    __Major._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 98, 4)
    __Major._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 98, 4)
    
    Major = property(__Major.value, __Major.set, None, None)

    
    # Attribute Minor uses Python identifier Minor
    __Minor = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Minor'), 'Minor', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_Minor', _module_typeBindings.stSimEntityMinorRevision, required=True)
    __Minor._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 99, 4)
    __Minor._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 99, 4)
    
    Minor = property(__Minor.value, __Minor.set, None, None)

    
    # Attribute PerId uses Python identifier PerId
    __PerId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PerId'), 'PerId', '__httpwww_amherst_comCEESIMXML_ctSimEntityData_PerId', pyxb.binding.datatypes.string, unicode_default='')
    __PerId._DeclarationLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 100, 4)
    __PerId._UseLocation = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 100, 4)
    
    PerId = property(__PerId.value, __PerId.set, None, None)

    _ElementMap.update({
        __EmitterMode.name() : __EmitterMode,
        __Emitter.name() : __Emitter,
        __Platform.name() : __Platform,
        __Scenario.name() : __Scenario,
        __Sel.name() : __Sel,
        __Eml.name() : __Eml
    })
    _AttributeMap.update({
        __Major.name() : __Major,
        __Minor.name() : __Minor,
        __PerId.name() : __PerId
    })
_module_typeBindings.ctSimEntityData = ctSimEntityData
Namespace.addCategoryObject('typeBinding', 'ctSimEntityData', ctSimEntityData)


SimEntity = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SimEntity'), ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 60, 2))
Namespace.addCategoryObject('elementBinding', SimEntity.name().localName(), SimEntity)



ctFlatEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'X'), stDoubleX, scope=ctFlatEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 43, 6)))

ctFlatEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Y'), stDoubleY, scope=ctFlatEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 44, 6)))

ctFlatEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Z'), stDoubleZ, scope=ctFlatEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 45, 6)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 43, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFlatEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'X')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 43, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 44, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFlatEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Y')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 44, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 45, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFlatEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Z')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 45, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 43, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 44, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 45, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_())
    sub_automata.append(_BuildAutomaton_2())
    sub_automata.append(_BuildAutomaton_3())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 42, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFlatEarthPoint._Automaton = _BuildAutomaton()




ctModificationHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationDate'), stDateCreationDate, scope=ctModificationHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 51, 6)))

ctModificationHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate'), stDateModificationDate, scope=ctModificationHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 52, 6)))

ctModificationHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Comment'), stTextCommentHeader, scope=ctModificationHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 53, 6)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 51, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctModificationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 51, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 52, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctModificationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 53, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctModificationHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Comment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 53, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 51, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 52, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 53, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_5())
    sub_automata.append(_BuildAutomaton_6())
    sub_automata.append(_BuildAutomaton_7())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 50, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctModificationHeader._Automaton = _BuildAutomaton_4()




ctPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlatEarthPoint'), ctFlatEarthPoint, scope=ctPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 59, 6)))

ctPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoundEarthPoint'), ctRoundEarthPoint, scope=ctPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 60, 6)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 58, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 59, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 60, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FlatEarthPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 59, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoundEarthPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 60, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPoint._Automaton = _BuildAutomaton_8()




ctRoundEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Latitude'), stDoubleLatitude, scope=ctRoundEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 66, 6)))

ctRoundEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Longitude'), stDoubleLongitude, scope=ctRoundEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 67, 6)))

ctRoundEarthPoint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Altitude'), stDoubleAltitude, scope=ctRoundEarthPoint, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 68, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 66, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRoundEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Latitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 66, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 67, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRoundEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Longitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 67, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 68, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRoundEarthPoint._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Altitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 68, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 66, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 67, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 68, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_10())
    sub_automata.append(_BuildAutomaton_11())
    sub_automata.append(_BuildAutomaton_12())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/commonTypesR1-1.xsd', 65, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctRoundEarthPoint._Automaton = _BuildAutomaton_9()




ctEmitterData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), ctEmitterHeader, scope=ctEmitterData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 43, 6)))

ctEmitterData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript'), ctEmitterScriptEventList, scope=ctEmitterData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 44, 6)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 43, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 44, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 44, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 44, 6))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_14())
    sub_automata.append(_BuildAutomaton_15())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 42, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterData._Automaton = _BuildAutomaton_13()




ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserEmitterNumber'), stIntUserEmitterNumber, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 56, 6)))

ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterId'), stStringEmitterId, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 57, 6)))

ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterName'), stStringEmitterName, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 58, 6)))

ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'XOffset'), stDoubleXOffset, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 59, 6)))

ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'YOffset'), stDoubleYOffset, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 60, 6)))

ctEmitterHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ZOffset'), stDoubleZOffset, scope=ctEmitterHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 61, 6)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserEmitterNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 56, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 57, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 58, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 59, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'XOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 59, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'YOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 61, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ZOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 61, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 59, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 60, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 61, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_17())
    sub_automata.append(_BuildAutomaton_18())
    sub_automata.append(_BuildAutomaton_19())
    sub_automata.append(_BuildAutomaton_20())
    sub_automata.append(_BuildAutomaton_21())
    sub_automata.append(_BuildAutomaton_22())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 55, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterHeader._Automaton = _BuildAutomaton_16()




ctEmitterScriptEventList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterScriptEvent'), ctEmitterScriptEvent, scope=ctEmitterScriptEventList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 67, 6)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 66, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEventList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterScriptEvent')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 67, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmitterScriptEventList._Automaton = _BuildAutomaton_23()




ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventNumber'), stIntEventNumber, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 73, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventTime'), stDoubleEventTime, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 74, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EventType'), stEnumEventType, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 75, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeName'), stStringModeNameScript, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 76, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RadiationState'), stBoolRadiationState, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 77, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ResyncOnModeChangeState'), stBoolResyncOnModeChangeState, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 78, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChangeTracking'), stBoolChangeTracking, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 79, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellDuration'), stDoubleDwellDurationScript, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 80, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumbers'), ctTrackPlatformNumberList, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 81, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorEventDefined'), stBoolGeneratorEventDefined, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 82, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeEvents'), ctRangeEventList, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 84, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvents'), ctGeneratorScriptEventList, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 85, 6)))

ctEmitterScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssociatedSubmodeName'), stStringAssociatedSubmodeName, scope=ctEmitterScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 86, 6)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 73, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 73, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 74, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 75, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EventType')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 76, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 76, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 77, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RadiationState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 77, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 78, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ResyncOnModeChangeState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 78, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 79, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChangeTracking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 79, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 80, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 80, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 81, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumbers')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 81, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 82, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorEventDefined')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 82, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 84, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeEvents')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 84, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 85, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvents')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 85, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 86, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssociatedSubmodeName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 86, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 73, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 74, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 75, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 76, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 77, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 78, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 79, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 80, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 81, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 82, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 84, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 85, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 86, 6))
    counters.add(cc_12)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_25())
    sub_automata.append(_BuildAutomaton_26())
    sub_automata.append(_BuildAutomaton_27())
    sub_automata.append(_BuildAutomaton_28())
    sub_automata.append(_BuildAutomaton_29())
    sub_automata.append(_BuildAutomaton_30())
    sub_automata.append(_BuildAutomaton_31())
    sub_automata.append(_BuildAutomaton_32())
    sub_automata.append(_BuildAutomaton_33())
    sub_automata.append(_BuildAutomaton_34())
    sub_automata.append(_BuildAutomaton_35())
    sub_automata.append(_BuildAutomaton_36())
    sub_automata.append(_BuildAutomaton_37())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 72, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmitterScriptEvent._Automaton = _BuildAutomaton_24()




ctTrackPlatformNumberList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumber'), stIntTrackPlatformNumber, scope=ctTrackPlatformNumberList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 93, 6)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=32, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 92, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackPlatformNumberList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 93, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctTrackPlatformNumberList._Automaton = _BuildAutomaton_38()




ctRangeEventList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeEvent'), ctRangeEvent, scope=ctRangeEventList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 99, 6)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 98, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRangeEventList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeEvent')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 99, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctRangeEventList._Automaton = _BuildAutomaton_39()




ctGeneratorScriptEventList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvent'), ctGeneratorScriptEvent, scope=ctGeneratorScriptEventList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 105, 6)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 104, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEventList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorScriptEvent')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGeneratorScriptEventList._Automaton = _BuildAutomaton_40()




ctRangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HighRange'), stDoubleHighRange, scope=ctRangeEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 111, 6)))

ctRangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeModeName'), stStringRangeModeName, scope=ctRangeEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 112, 6)))

ctRangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeRadiationState'), stBoolRangeRadiationState, scope=ctRangeEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 113, 6)))

ctRangeEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeResyncOnModeChangeState'), stBoolRangeResyncOnModeChangeState, scope=ctRangeEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 114, 6)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 111, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRangeEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HighRange')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 111, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 112, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRangeEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeModeName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 112, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 113, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRangeEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeRadiationState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 113, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 114, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctRangeEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeResyncOnModeChangeState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 114, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 111, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 112, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 113, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 114, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_42())
    sub_automata.append(_BuildAutomaton_43())
    sub_automata.append(_BuildAutomaton_44())
    sub_automata.append(_BuildAutomaton_45())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 110, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctRangeEvent._Automaton = _BuildAutomaton_41()




ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), stIntScriptGeneratorNumber, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 120, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorActive'), stBoolGeneratorActive, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 121, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RadiationEnable'), stBoolRadiationEnable, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 122, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), stBoolOverrideTrack, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 123, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents'), ctTrackEventList, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 124, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideScanInterrupts'), stBoolOverrideScanInterrupts, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 125, 6)))

ctGeneratorScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecords'), ctInterruptRecordList, scope=ctGeneratorScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 126, 6)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 120, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 120, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 121, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorActive')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 121, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 122, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RadiationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 122, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 123, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 123, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 124, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 125, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideScanInterrupts')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 125, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 126, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecords')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 126, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 120, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 121, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 122, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 123, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 124, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 125, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 126, 6))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_47())
    sub_automata.append(_BuildAutomaton_48())
    sub_automata.append(_BuildAutomaton_49())
    sub_automata.append(_BuildAutomaton_50())
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 119, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGeneratorScriptEvent._Automaton = _BuildAutomaton_46()




ctTrackEventList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackEvent'), ctTrackEvent, scope=ctTrackEventList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 132, 6)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 131, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEventList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackEvent')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 132, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctTrackEventList._Automaton = _BuildAutomaton_54()




ctTrackEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), stBoolOverrideTrack, scope=ctTrackEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 138, 6)))

ctTrackEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NewTrackPlatform'), stIntPlatformTrackNumber, scope=ctTrackEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 139, 6)))

ctTrackEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OldTrackDataValid'), stBoolOldTrackDataValid, scope=ctTrackEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 140, 6)))

ctTrackEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OldTrackIsSut'), stBoolOldTrackIsSut, scope=ctTrackEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 141, 6)))

ctTrackEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OldTrackPlatform'), stIntPlatformTrackNumber, scope=ctTrackEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 142, 6)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 138, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 138, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 139, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NewTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 139, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 140, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OldTrackDataValid')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 140, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 141, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OldTrackIsSut')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 141, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 142, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTrackEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OldTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 142, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 138, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 139, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 140, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 141, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 142, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_56())
    sub_automata.append(_BuildAutomaton_57())
    sub_automata.append(_BuildAutomaton_58())
    sub_automata.append(_BuildAutomaton_59())
    sub_automata.append(_BuildAutomaton_60())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 137, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctTrackEvent._Automaton = _BuildAutomaton_55()




ctInterruptRecordList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecord'), ctInterruptRecord, scope=ctInterruptRecordList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 148, 6)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 147, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecordList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptRecord')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 148, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctInterruptRecordList._Automaton = _BuildAutomaton_61()




ctInterruptRecord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideInterruptGenerators'), stBoolOverrideInterruptGenerators, scope=ctInterruptRecord, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 154, 6)))

ctInterruptRecord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptActive'), stBoolInterruptActive, scope=ctInterruptRecord, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 155, 6)))

ctInterruptRecord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorNumber'), stIntInterruptGeneratorNumber, scope=ctInterruptRecord, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 156, 6)))

ctInterruptRecord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack'), stBoolOverrideTrack, scope=ctInterruptRecord, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 157, 6)))

ctInterruptRecord._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents'), ctTrackEventList, scope=ctInterruptRecord, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 158, 6)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 154, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecord._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideInterruptGenerators')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 154, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 155, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecord._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptActive')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 155, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 156, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecord._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 156, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 157, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecord._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'OverrideTrack')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 157, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 158, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptRecord._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackEvents')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 158, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 154, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 155, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 156, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 157, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 158, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_63())
    sub_automata.append(_BuildAutomaton_64())
    sub_automata.append(_BuildAutomaton_65())
    sub_automata.append(_BuildAutomaton_66())
    sub_automata.append(_BuildAutomaton_67())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/emitterDataR1-1.xsd', 153, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctInterruptRecord._Automaton = _BuildAutomaton_62()




ctEmitterMode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterModeHeader'), ctEmitterModeHeader, scope=ctEmitterMode, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 57, 6)))

ctEmitterMode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Generators'), ctGeneratorList, scope=ctEmitterMode, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 58, 6)))

ctEmitterMode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodes'), ctEmitterSubmodeList, scope=ctEmitterMode, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 64, 6)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterMode._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterModeHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 57, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 58, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterMode._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Generators')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 58, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 64, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterMode._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodes')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 64, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 58, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 64, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_69())
    sub_automata.append(_BuildAutomaton_70())
    sub_automata.append(_BuildAutomaton_71())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 56, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterMode._Automaton = _BuildAutomaton_68()




ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeName'), stStringModeName, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 80, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate'), stDateModificationDate, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 81, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeComment'), stStringModeComment, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 82, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeProtectionSwitch'), stBoolModeProtectionSwitch, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 83, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SensitivityOverride'), stBoolSensitivityOverride, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 84, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind'), stEnumPriority, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 85, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GpAssigned'), stBoolGpAssigned, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 86, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GpPooled'), stBoolGpPooled, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 87, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GpOrPoolNumber'), stIntGpOrPoolNumber, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 88, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JammerStatus'), stBoolJammerStatus, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 89, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 90, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 91, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 92, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 93, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 94, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 95, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint'), stBoolDigitalVideoTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 96, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint'), stBoolChannelVideoTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 97, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint'), stBoolChannelAudioTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 98, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RfBlankingVideoTestPoint'), stBoolRfBlankingVideoTestPoint, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 99, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SiteId'), stIntSiteId, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 100, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 101, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalModeId'), stIntExternalModeId, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 102, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode'), stBoolPgpDefaultMode, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 103, 6)))

ctEmitterModeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode'), stBoolPgpDropTrackMode, scope=ctEmitterModeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 104, 6)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 80, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 81, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 81, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 82, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeComment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 82, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 83, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeProtectionSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 83, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 84, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SensitivityOverride')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 84, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 85, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 85, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 86, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GpAssigned')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 86, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 87, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GpPooled')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 87, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 88, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GpOrPoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 88, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 89, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JammerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 89, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 90, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 90, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 91, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 91, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 92, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 92, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 93, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 93, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 94, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 94, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 95, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 95, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 96, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 96, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 97, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 98, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 98, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 99, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RfBlankingVideoTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 99, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 100, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SiteId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 100, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 101, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 101, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 102, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalModeId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 102, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 103, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 103, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 104, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 104, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 81, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 82, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 83, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 84, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 85, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 86, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 87, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 88, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 89, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 90, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 91, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 92, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 93, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 94, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 95, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 96, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 97, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 98, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 99, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 100, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 101, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 102, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 103, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 104, 6))
    counters.add(cc_23)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_73())
    sub_automata.append(_BuildAutomaton_74())
    sub_automata.append(_BuildAutomaton_75())
    sub_automata.append(_BuildAutomaton_76())
    sub_automata.append(_BuildAutomaton_77())
    sub_automata.append(_BuildAutomaton_78())
    sub_automata.append(_BuildAutomaton_79())
    sub_automata.append(_BuildAutomaton_80())
    sub_automata.append(_BuildAutomaton_81())
    sub_automata.append(_BuildAutomaton_82())
    sub_automata.append(_BuildAutomaton_83())
    sub_automata.append(_BuildAutomaton_84())
    sub_automata.append(_BuildAutomaton_85())
    sub_automata.append(_BuildAutomaton_86())
    sub_automata.append(_BuildAutomaton_87())
    sub_automata.append(_BuildAutomaton_88())
    sub_automata.append(_BuildAutomaton_89())
    sub_automata.append(_BuildAutomaton_90())
    sub_automata.append(_BuildAutomaton_91())
    sub_automata.append(_BuildAutomaton_92())
    sub_automata.append(_BuildAutomaton_93())
    sub_automata.append(_BuildAutomaton_94())
    sub_automata.append(_BuildAutomaton_95())
    sub_automata.append(_BuildAutomaton_96())
    sub_automata.append(_BuildAutomaton_97())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 79, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterModeHeader._Automaton = _BuildAutomaton_72()




ctGeneratorList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Generator'), ctGenerator, scope=ctGeneratorList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 110, 6)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=32, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 109, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Generator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGeneratorList._Automaton = _BuildAutomaton_98()




ctEmitterSubmodeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmode'), ctEmitterSubmode, scope=ctEmitterSubmodeList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 133, 6)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 132, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmodeList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 133, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmitterSubmodeList._Automaton = _BuildAutomaton_99()




ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), stIntGeneratorNumber, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 139, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorName'), stStringGeneratorName, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 140, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorKind'), stEnumGeneratorKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 141, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorComment'), stStringGeneratorComment, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 142, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind'), stEnumPriority, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 143, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriCrystalValue'), stDoublePriCrystalValue, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 144, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FreqChannelization'), stDoubleFreqChannelization, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 145, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriodActive'), stBoolModeTransitionPeriodActive, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 146, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriod'), stDoubleModeTransitionPeriod, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 147, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideActive'), stBoolIntDurOverrideActive, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 148, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideKind'), stEnumIntDurOverrideKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 149, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideTime'), stDoubleIntDurOverrideTime, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 150, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverridePulses'), stIntIntDurOverridePulses, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 151, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTime'), stDoubleDelayTime, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 152, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterStatus'), stBoolDelayTimeJitterStatus, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 153, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterLimit'), stDoubleDelayTimeJitterLimit, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 154, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterDstrbKind'), stStringDelayTimeJitterDstrbKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 155, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterResSwitch'), stBoolDelayTimeJitterResSwitch, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 156, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModStatus'), stBoolDelayTimeModStatus, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 157, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPatternKind'), stTextDelayTimeModPatternKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 158, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModAmp'), stDoubleDelayTimeModAmp, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 159, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodKind'), stEnumDelayTimeModPeriodKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 160, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodPulses'), stIntDelayTimeModPeriodPulses, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 161, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriod'), stDoubleDelayTimeModPeriod, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 162, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodSync'), stBoolDelayTimeModPeriodSync, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 163, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterStatus'), stBoolSecDtJitterStatus, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 164, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterLimit'), stDoubleSecDtJitterLimit, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 165, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterDstrbKind'), stStringSecDtJitterDstrbKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 166, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtModStatus'), stBoolSecDtModStatus, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 167, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPatternKind'), stTextSecDtModPatternKind, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 168, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtModAmp'), stDoubleSecDtModAmp, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 169, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPeriod'), stDoubleSecDtModPeriod, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 170, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RfBlanking'), stBoolRfBlanking, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 171, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TestPointChannelNumber'), stIntTestPointChannelNumber, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 172, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 173, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 174, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 175, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 176, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 177, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 178, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint'), stBoolDigitalVideoTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 179, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint'), stBoolChannelVideoTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 180, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint'), stBoolChannelAudioTestPoint, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 181, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSequence'), ctPriSequence, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 183, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySequence'), ctFrequencySequence, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 184, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSequence'), ctScanSequence, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 185, 6)))

ctGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseSequence'), ctPulseSequence, scope=ctGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 186, 6)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 139, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 139, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 140, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 140, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 141, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 141, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 142, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorComment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 142, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 143, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriorityKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 143, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 144, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriCrystalValue')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 144, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 145, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FreqChannelization')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 145, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 146, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriodActive')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 147, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModeTransitionPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 147, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 148, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideActive')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 148, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 149, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 149, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 150, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverrideTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 150, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 151, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntDurOverridePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 151, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 152, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 152, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 153, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 153, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 154, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 154, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 155, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 155, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 156, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeJitterResSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 156, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 157, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 157, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 158, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 158, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 159, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 159, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 160, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 160, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 161, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 161, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 162, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 162, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 163, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DelayTimeModPeriodSync')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 163, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 164, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 164, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 165, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 165, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_128
    del _BuildAutomaton_128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 166, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 166, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_129
    del _BuildAutomaton_129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 167, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 167, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_130
    del _BuildAutomaton_130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 168, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 168, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_131
    del _BuildAutomaton_131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 169, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 169, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_132
    del _BuildAutomaton_132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 170, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecDtModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 170, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_133
    del _BuildAutomaton_133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 171, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RfBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 171, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_134
    del _BuildAutomaton_134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 172, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TestPointChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 172, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_135
    del _BuildAutomaton_135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 173, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 173, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_136
    del _BuildAutomaton_136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 174, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 174, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_137
    del _BuildAutomaton_137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 175, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 175, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_138
    del _BuildAutomaton_138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 176, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 176, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_139
    del _BuildAutomaton_139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 177, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 177, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_140
    del _BuildAutomaton_140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 178, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 178, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_141
    del _BuildAutomaton_141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 179, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DigitalVideoTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 179, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_142
    del _BuildAutomaton_142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 180, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelVideoTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 180, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_143
    del _BuildAutomaton_143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 181, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelAudioTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 181, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_144
    del _BuildAutomaton_144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 183, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSequence')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 183, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_145
    del _BuildAutomaton_145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 184, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySequence')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 184, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_146
    del _BuildAutomaton_146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 185, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSequence')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 185, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_147
    del _BuildAutomaton_147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 186, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseSequence')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 186, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 139, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 140, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 141, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 142, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 143, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 144, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 145, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 146, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 147, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 148, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 149, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 150, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 151, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 152, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 153, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 154, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 155, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 156, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 157, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 158, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 159, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 160, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 161, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 162, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 163, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 164, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 165, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 166, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 167, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 168, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 169, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 170, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 171, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 172, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 173, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 174, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 175, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 176, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 177, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 178, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 179, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 180, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 181, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 183, 6))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 184, 6))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 185, 6))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 186, 6))
    counters.add(cc_46)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_101())
    sub_automata.append(_BuildAutomaton_102())
    sub_automata.append(_BuildAutomaton_103())
    sub_automata.append(_BuildAutomaton_104())
    sub_automata.append(_BuildAutomaton_105())
    sub_automata.append(_BuildAutomaton_106())
    sub_automata.append(_BuildAutomaton_107())
    sub_automata.append(_BuildAutomaton_108())
    sub_automata.append(_BuildAutomaton_109())
    sub_automata.append(_BuildAutomaton_110())
    sub_automata.append(_BuildAutomaton_111())
    sub_automata.append(_BuildAutomaton_112())
    sub_automata.append(_BuildAutomaton_113())
    sub_automata.append(_BuildAutomaton_114())
    sub_automata.append(_BuildAutomaton_115())
    sub_automata.append(_BuildAutomaton_116())
    sub_automata.append(_BuildAutomaton_117())
    sub_automata.append(_BuildAutomaton_118())
    sub_automata.append(_BuildAutomaton_119())
    sub_automata.append(_BuildAutomaton_120())
    sub_automata.append(_BuildAutomaton_121())
    sub_automata.append(_BuildAutomaton_122())
    sub_automata.append(_BuildAutomaton_123())
    sub_automata.append(_BuildAutomaton_124())
    sub_automata.append(_BuildAutomaton_125())
    sub_automata.append(_BuildAutomaton_126())
    sub_automata.append(_BuildAutomaton_127())
    sub_automata.append(_BuildAutomaton_128())
    sub_automata.append(_BuildAutomaton_129())
    sub_automata.append(_BuildAutomaton_130())
    sub_automata.append(_BuildAutomaton_131())
    sub_automata.append(_BuildAutomaton_132())
    sub_automata.append(_BuildAutomaton_133())
    sub_automata.append(_BuildAutomaton_134())
    sub_automata.append(_BuildAutomaton_135())
    sub_automata.append(_BuildAutomaton_136())
    sub_automata.append(_BuildAutomaton_137())
    sub_automata.append(_BuildAutomaton_138())
    sub_automata.append(_BuildAutomaton_139())
    sub_automata.append(_BuildAutomaton_140())
    sub_automata.append(_BuildAutomaton_141())
    sub_automata.append(_BuildAutomaton_142())
    sub_automata.append(_BuildAutomaton_143())
    sub_automata.append(_BuildAutomaton_144())
    sub_automata.append(_BuildAutomaton_145())
    sub_automata.append(_BuildAutomaton_146())
    sub_automata.append(_BuildAutomaton_147())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 138, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGenerator._Automaton = _BuildAutomaton_100()




ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentSingle'), ctPriSegmentSingle, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 193, 6)))

ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDwell'), ctPriSegmentDwell, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 194, 6)))

ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentPeriodic'), ctPriSegmentPeriodic, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 195, 6)))

ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentStaggered'), ctPriSegmentStaggered, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 196, 6)))

ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDiscreteJitter'), ctPriSegmentDiscreteJitter, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 197, 6)))

ctPriSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentCw'), ctPriSegmentCw, scope=ctPriSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 198, 6)))

def _BuildAutomaton_148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_148
    del _BuildAutomaton_148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 191, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 193, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 194, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 195, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 196, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 197, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 198, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentSingle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 193, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 194, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentPeriodic')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 195, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentStaggered')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 196, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentDiscreteJitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 197, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriSegmentCw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 198, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSequence._Automaton = _BuildAutomaton_148()




ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 204, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 205, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriState'), stBoolComplexPriState, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 206, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriEntryId'), stStringComplexPriEntryId, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 207, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pri'), stDoublePri, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 208, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), stBoolJitterStatus, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 209, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPri, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 210, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), stStringJitterDstrbKind, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 211, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), stBoolJitterResSwitch, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 212, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState'), stBoolClockedPriJitterState, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 213, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion'), stDoubleClockedPriJitterExcursion, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 214, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance'), stDoubleClockedPriJitterVariance, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 215, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 216, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), stDoubleMissingPulseFactor, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 217, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 218, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 219, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 220, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 221, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 222, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 223, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 224, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), stBoolEarSequenceTriggerState, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 225, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), stBoolGeneratorTriggerState, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 226, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), stIntSynchronizedGeneratorNumber, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 227, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), stBoolTerminalSegment, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 228, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), stBoolSecJitterStatus, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 229, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), stDoubleSecJitterLimit, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 230, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), stStringSecJitterDstrbKind, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 231, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), stBoolSecModStatus, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 232, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), stTextSecModPatternKind, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 233, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), stDoubleSecModAmp, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 234, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), stDoubleSecModPeriod, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 235, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 236, 6)))

ctPriSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 237, 6)))

def _BuildAutomaton_150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_150
    del _BuildAutomaton_150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 204, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 204, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_151
    del _BuildAutomaton_151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 205, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 205, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_152
    del _BuildAutomaton_152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 206, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 206, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_153
    del _BuildAutomaton_153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 207, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ComplexPriEntryId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 207, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_154
    del _BuildAutomaton_154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 208, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 208, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_155
    del _BuildAutomaton_155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 209, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 209, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_156
    del _BuildAutomaton_156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 210, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 210, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_157
    del _BuildAutomaton_157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 211, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 211, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_158
    del _BuildAutomaton_158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 212, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 212, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_159
    del _BuildAutomaton_159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 213, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 213, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_160
    del _BuildAutomaton_160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 214, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 214, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_161
    del _BuildAutomaton_161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 215, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 215, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_162
    del _BuildAutomaton_162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 216, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 216, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_163
    del _BuildAutomaton_163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 217, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 217, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_164
    del _BuildAutomaton_164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 218, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 218, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_165
    del _BuildAutomaton_165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 219, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 219, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_166
    del _BuildAutomaton_166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 220, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 220, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_167
    del _BuildAutomaton_167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 221, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 221, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_168
    del _BuildAutomaton_168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 222, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 222, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_169
    del _BuildAutomaton_169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 223, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 223, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_170
    del _BuildAutomaton_170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 224, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 224, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_171
    del _BuildAutomaton_171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 225, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 225, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_172
    del _BuildAutomaton_172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 226, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 226, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_173
    del _BuildAutomaton_173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 227, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 227, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_174
    del _BuildAutomaton_174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 228, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 228, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_175
    del _BuildAutomaton_175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 229, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 229, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_176
    del _BuildAutomaton_176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 230, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 230, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_177
    del _BuildAutomaton_177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 231, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 231, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_178
    del _BuildAutomaton_178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 232, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 232, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_179
    del _BuildAutomaton_179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 233, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 233, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_180
    del _BuildAutomaton_180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 234, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 234, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_181
    del _BuildAutomaton_181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 235, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_182
    del _BuildAutomaton_182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 236, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 236, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_183
    del _BuildAutomaton_183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 237, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 237, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_149
    del _BuildAutomaton_149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 204, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 205, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 206, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 207, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 208, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 209, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 210, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 211, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 212, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 213, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 214, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 215, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 216, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 217, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 218, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 219, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 220, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 221, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 222, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 223, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 224, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 225, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 226, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 227, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 228, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 229, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 230, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 231, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 232, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 233, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 234, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 235, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 236, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 237, 6))
    counters.add(cc_33)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_150())
    sub_automata.append(_BuildAutomaton_151())
    sub_automata.append(_BuildAutomaton_152())
    sub_automata.append(_BuildAutomaton_153())
    sub_automata.append(_BuildAutomaton_154())
    sub_automata.append(_BuildAutomaton_155())
    sub_automata.append(_BuildAutomaton_156())
    sub_automata.append(_BuildAutomaton_157())
    sub_automata.append(_BuildAutomaton_158())
    sub_automata.append(_BuildAutomaton_159())
    sub_automata.append(_BuildAutomaton_160())
    sub_automata.append(_BuildAutomaton_161())
    sub_automata.append(_BuildAutomaton_162())
    sub_automata.append(_BuildAutomaton_163())
    sub_automata.append(_BuildAutomaton_164())
    sub_automata.append(_BuildAutomaton_165())
    sub_automata.append(_BuildAutomaton_166())
    sub_automata.append(_BuildAutomaton_167())
    sub_automata.append(_BuildAutomaton_168())
    sub_automata.append(_BuildAutomaton_169())
    sub_automata.append(_BuildAutomaton_170())
    sub_automata.append(_BuildAutomaton_171())
    sub_automata.append(_BuildAutomaton_172())
    sub_automata.append(_BuildAutomaton_173())
    sub_automata.append(_BuildAutomaton_174())
    sub_automata.append(_BuildAutomaton_175())
    sub_automata.append(_BuildAutomaton_176())
    sub_automata.append(_BuildAutomaton_177())
    sub_automata.append(_BuildAutomaton_178())
    sub_automata.append(_BuildAutomaton_179())
    sub_automata.append(_BuildAutomaton_180())
    sub_automata.append(_BuildAutomaton_181())
    sub_automata.append(_BuildAutomaton_182())
    sub_automata.append(_BuildAutomaton_183())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 203, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentSingle._Automaton = _BuildAutomaton_149()




ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 243, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 244, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pri'), stDoublePri, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 245, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 246, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 247, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 248, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation'), stDoubleDwellVariation, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 249, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 250, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses'), stIntDwellVariationPulses, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 251, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), stBoolJitterStatus, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 252, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPri, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 253, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), stStringJitterDstrbKind, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 254, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), stBoolJitterResSwitch, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 255, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 256, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), stDoubleMissingPulseFactor, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 257, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 258, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 259, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 260, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 261, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 262, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 263, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 264, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), stBoolEarSequenceTriggerState, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 265, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), stBoolGeneratorTriggerState, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 266, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), stIntSynchronizedGeneratorNumber, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 267, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), stBoolTerminalSegment, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 268, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), stBoolSecJitterStatus, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 269, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), stDoubleSecJitterLimit, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 270, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), stStringSecJitterDstrbKind, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 271, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), stBoolSecModStatus, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 272, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), stTextSecModPatternKind, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 273, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), stDoubleSecModAmp, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 274, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), stDoubleSecModPeriod, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 275, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 276, 6)))

ctPriSegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 277, 6)))

def _BuildAutomaton_185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_185
    del _BuildAutomaton_185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 243, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 243, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_186
    del _BuildAutomaton_186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 244, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 244, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_187
    del _BuildAutomaton_187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 245, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 245, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_188
    del _BuildAutomaton_188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 246, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 246, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_189
    del _BuildAutomaton_189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 247, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 247, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_190
    del _BuildAutomaton_190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 248, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 248, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_191
    del _BuildAutomaton_191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 249, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 249, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_192
    del _BuildAutomaton_192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 250, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 250, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_193
    del _BuildAutomaton_193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 251, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 251, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_194
    del _BuildAutomaton_194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 252, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 252, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_195
    del _BuildAutomaton_195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 253, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 253, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_196
    del _BuildAutomaton_196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 254, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 254, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_197
    del _BuildAutomaton_197
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 255, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 255, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_198
    del _BuildAutomaton_198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 256, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 256, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_199
    del _BuildAutomaton_199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 257, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 257, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_200
    del _BuildAutomaton_200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 258, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 258, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_201
    del _BuildAutomaton_201
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 259, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 259, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_202
    del _BuildAutomaton_202
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 260, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 260, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_203
    del _BuildAutomaton_203
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 261, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 261, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_204
    del _BuildAutomaton_204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 262, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 262, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_205
    del _BuildAutomaton_205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 263, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 263, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_206
    del _BuildAutomaton_206
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 264, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 264, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_207
    del _BuildAutomaton_207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 265, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 265, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_208
    del _BuildAutomaton_208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 266, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 266, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_209
    del _BuildAutomaton_209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 267, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 267, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_210
    del _BuildAutomaton_210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 268, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 268, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_211
    del _BuildAutomaton_211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 269, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 269, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_212
    del _BuildAutomaton_212
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 270, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 270, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_213
    del _BuildAutomaton_213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 271, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 271, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_214
    del _BuildAutomaton_214
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 272, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 272, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_215
    del _BuildAutomaton_215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 273, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 273, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_216
    del _BuildAutomaton_216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 274, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 274, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_217
    del _BuildAutomaton_217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 275, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 275, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_218
    del _BuildAutomaton_218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 276, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 276, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_219
    del _BuildAutomaton_219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 277, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 277, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_184
    del _BuildAutomaton_184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 243, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 244, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 245, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 246, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 247, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 248, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 249, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 250, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 251, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 252, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 253, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 254, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 255, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 256, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 257, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 258, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 259, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 260, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 261, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 262, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 263, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 264, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 265, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 266, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 267, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 268, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 269, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 270, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 271, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 272, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 273, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 274, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 275, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 276, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 277, 6))
    counters.add(cc_34)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_185())
    sub_automata.append(_BuildAutomaton_186())
    sub_automata.append(_BuildAutomaton_187())
    sub_automata.append(_BuildAutomaton_188())
    sub_automata.append(_BuildAutomaton_189())
    sub_automata.append(_BuildAutomaton_190())
    sub_automata.append(_BuildAutomaton_191())
    sub_automata.append(_BuildAutomaton_192())
    sub_automata.append(_BuildAutomaton_193())
    sub_automata.append(_BuildAutomaton_194())
    sub_automata.append(_BuildAutomaton_195())
    sub_automata.append(_BuildAutomaton_196())
    sub_automata.append(_BuildAutomaton_197())
    sub_automata.append(_BuildAutomaton_198())
    sub_automata.append(_BuildAutomaton_199())
    sub_automata.append(_BuildAutomaton_200())
    sub_automata.append(_BuildAutomaton_201())
    sub_automata.append(_BuildAutomaton_202())
    sub_automata.append(_BuildAutomaton_203())
    sub_automata.append(_BuildAutomaton_204())
    sub_automata.append(_BuildAutomaton_205())
    sub_automata.append(_BuildAutomaton_206())
    sub_automata.append(_BuildAutomaton_207())
    sub_automata.append(_BuildAutomaton_208())
    sub_automata.append(_BuildAutomaton_209())
    sub_automata.append(_BuildAutomaton_210())
    sub_automata.append(_BuildAutomaton_211())
    sub_automata.append(_BuildAutomaton_212())
    sub_automata.append(_BuildAutomaton_213())
    sub_automata.append(_BuildAutomaton_214())
    sub_automata.append(_BuildAutomaton_215())
    sub_automata.append(_BuildAutomaton_216())
    sub_automata.append(_BuildAutomaton_217())
    sub_automata.append(_BuildAutomaton_218())
    sub_automata.append(_BuildAutomaton_219())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 242, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentDwell._Automaton = _BuildAutomaton_184()




ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 283, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 284, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pri'), stDoublePri, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 285, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), stBoolModStatus, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 286, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPatternKind'), stTextModPatternKind, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 287, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModAmp'), stDoubleModAmpPri, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 288, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind'), stEnumModPeriodKind, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 289, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses'), stIntModPeriodPulses, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 290, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod'), stDoubleModPeriod, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 291, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync'), stBoolModPeriodSync, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 292, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), stBoolJitterStatus, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 293, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPri, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 294, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), stStringJitterDstrbKind, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 295, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), stBoolJitterResSwitch, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 296, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState'), stBoolClockedPriJitterState, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 297, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion'), stDoubleClockedPriJitterExcursion, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 298, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance'), stDoubleClockedPriJitterVariance, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 299, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 300, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), stDoubleMissingPulseFactor, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 301, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 302, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 303, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 304, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 305, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 306, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 307, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 308, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), stBoolEarSequenceTriggerState, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 309, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), stBoolGeneratorTriggerState, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 310, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), stIntSynchronizedGeneratorNumber, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 311, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), stBoolTerminalSegment, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 312, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), stBoolSecJitterStatus, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 313, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), stDoubleSecJitterLimit, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 314, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), stStringSecJitterDstrbKind, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 315, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), stBoolSecModStatus, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 316, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), stTextSecModPatternKind, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 317, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), stDoubleSecModAmp, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 318, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), stDoubleSecModPeriod, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 319, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 320, 6)))

ctPriSegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 321, 6)))

def _BuildAutomaton_221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_221
    del _BuildAutomaton_221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 283, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 283, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_222
    del _BuildAutomaton_222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 284, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 284, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_223
    del _BuildAutomaton_223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 285, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 285, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_224
    del _BuildAutomaton_224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 286, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 286, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_225
    del _BuildAutomaton_225
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 287, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 287, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_226
    del _BuildAutomaton_226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 288, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 288, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_227
    del _BuildAutomaton_227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 289, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_228
    del _BuildAutomaton_228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 290, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 290, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_229
    del _BuildAutomaton_229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 291, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 291, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_230
    del _BuildAutomaton_230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 292, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 292, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_231
    del _BuildAutomaton_231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 293, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 293, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_232
    del _BuildAutomaton_232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 294, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 294, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_233
    del _BuildAutomaton_233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 295, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 295, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_234
    del _BuildAutomaton_234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 296, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 296, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_235
    del _BuildAutomaton_235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 297, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 297, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_236
    del _BuildAutomaton_236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 298, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterExcursion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 298, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_237
    del _BuildAutomaton_237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 299, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClockedPriJitterVariance')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 299, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_238
    del _BuildAutomaton_238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 300, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_239
    del _BuildAutomaton_239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 301, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 301, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_240
    del _BuildAutomaton_240
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 302, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 302, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_241
    del _BuildAutomaton_241
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 303, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 303, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_242
    del _BuildAutomaton_242
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 304, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 304, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_243
    del _BuildAutomaton_243
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 305, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 305, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_244
    del _BuildAutomaton_244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 306, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 306, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_245
    del _BuildAutomaton_245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 307, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_246
    del _BuildAutomaton_246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 308, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 308, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_247
    del _BuildAutomaton_247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 309, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 309, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_248
    del _BuildAutomaton_248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 310, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 310, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_249
    del _BuildAutomaton_249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 311, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 311, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_250
    del _BuildAutomaton_250
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 312, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 312, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_251
    del _BuildAutomaton_251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 313, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 313, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_252
    del _BuildAutomaton_252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 314, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 314, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_253
    del _BuildAutomaton_253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 315, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 315, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_254
    del _BuildAutomaton_254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 316, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 316, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_255
    del _BuildAutomaton_255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 317, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 317, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_256
    del _BuildAutomaton_256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 318, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 318, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_257
    del _BuildAutomaton_257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 319, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 319, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_258
    del _BuildAutomaton_258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 320, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 320, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_259
    del _BuildAutomaton_259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 321, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 321, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_220
    del _BuildAutomaton_220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 283, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 284, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 285, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 286, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 287, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 288, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 289, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 290, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 291, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 292, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 293, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 294, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 295, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 296, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 297, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 298, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 299, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 300, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 301, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 302, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 303, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 304, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 305, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 306, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 307, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 308, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 309, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 310, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 311, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 312, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 313, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 314, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 315, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 316, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 317, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 318, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 319, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 320, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 321, 6))
    counters.add(cc_38)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_221())
    sub_automata.append(_BuildAutomaton_222())
    sub_automata.append(_BuildAutomaton_223())
    sub_automata.append(_BuildAutomaton_224())
    sub_automata.append(_BuildAutomaton_225())
    sub_automata.append(_BuildAutomaton_226())
    sub_automata.append(_BuildAutomaton_227())
    sub_automata.append(_BuildAutomaton_228())
    sub_automata.append(_BuildAutomaton_229())
    sub_automata.append(_BuildAutomaton_230())
    sub_automata.append(_BuildAutomaton_231())
    sub_automata.append(_BuildAutomaton_232())
    sub_automata.append(_BuildAutomaton_233())
    sub_automata.append(_BuildAutomaton_234())
    sub_automata.append(_BuildAutomaton_235())
    sub_automata.append(_BuildAutomaton_236())
    sub_automata.append(_BuildAutomaton_237())
    sub_automata.append(_BuildAutomaton_238())
    sub_automata.append(_BuildAutomaton_239())
    sub_automata.append(_BuildAutomaton_240())
    sub_automata.append(_BuildAutomaton_241())
    sub_automata.append(_BuildAutomaton_242())
    sub_automata.append(_BuildAutomaton_243())
    sub_automata.append(_BuildAutomaton_244())
    sub_automata.append(_BuildAutomaton_245())
    sub_automata.append(_BuildAutomaton_246())
    sub_automata.append(_BuildAutomaton_247())
    sub_automata.append(_BuildAutomaton_248())
    sub_automata.append(_BuildAutomaton_249())
    sub_automata.append(_BuildAutomaton_250())
    sub_automata.append(_BuildAutomaton_251())
    sub_automata.append(_BuildAutomaton_252())
    sub_automata.append(_BuildAutomaton_253())
    sub_automata.append(_BuildAutomaton_254())
    sub_automata.append(_BuildAutomaton_255())
    sub_automata.append(_BuildAutomaton_256())
    sub_automata.append(_BuildAutomaton_257())
    sub_automata.append(_BuildAutomaton_258())
    sub_automata.append(_BuildAutomaton_259())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 282, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentPeriodic._Automaton = _BuildAutomaton_220()




ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 327, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 328, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment'), stBoolTerminalSegment, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 329, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment'), stIntAssociatedFrequencySegment, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 330, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment'), stIntAssociatedPulseSegment, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 331, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 332, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 333, 6)))

ctPriSegmentStaggered._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), ctStaggeredSeriesPriSegmentList, scope=ctPriSegmentStaggered, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 334, 6)))

def _BuildAutomaton_261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_261
    del _BuildAutomaton_261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 327, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 327, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_262
    del _BuildAutomaton_262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 328, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 328, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_263
    del _BuildAutomaton_263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 329, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerminalSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 329, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_264
    del _BuildAutomaton_264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 330, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 330, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_265
    del _BuildAutomaton_265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 331, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_266
    del _BuildAutomaton_266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 332, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 332, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_267
    del _BuildAutomaton_267
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 333, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 333, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_268
    del _BuildAutomaton_268
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 334, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentStaggered._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Subsegments')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 334, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_260
    del _BuildAutomaton_260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 327, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 328, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 329, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 330, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 331, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 332, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 333, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 334, 6))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_261())
    sub_automata.append(_BuildAutomaton_262())
    sub_automata.append(_BuildAutomaton_263())
    sub_automata.append(_BuildAutomaton_264())
    sub_automata.append(_BuildAutomaton_265())
    sub_automata.append(_BuildAutomaton_266())
    sub_automata.append(_BuildAutomaton_267())
    sub_automata.append(_BuildAutomaton_268())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 326, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentStaggered._Automaton = _BuildAutomaton_260()




ctStaggeredSeriesPriSegmentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StaggeredSeriesPriSegment'), ctStaggeredSeriesPriSegment, scope=ctStaggeredSeriesPriSegmentList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 340, 6)))

def _BuildAutomaton_269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_269
    del _BuildAutomaton_269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 339, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegmentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StaggeredSeriesPriSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 340, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctStaggeredSeriesPriSegmentList._Automaton = _BuildAutomaton_269()




ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pri'), stDoublePri, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 346, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus'), stBoolJitterStatus, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 347, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPri, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 348, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind'), stStringJitterDstrbKind, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 349, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch'), stBoolJitterResSwitch, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 350, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 351, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 352, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 353, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 354, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), stDoubleMissingPulseFactor, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 355, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 356, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 357, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 358, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 359, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 360, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 361, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 362, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), stBoolEarSequenceTriggerState, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 363, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), stBoolGeneratorTriggerState, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 364, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), stIntSynchronizedGeneratorNumber, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 365, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus'), stBoolSecJitterStatus, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 366, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit'), stDoubleSecJitterLimit, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 367, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind'), stStringSecJitterDstrbKind, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 368, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus'), stBoolSecModStatus, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 369, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind'), stTextSecModPatternKind, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 370, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp'), stDoubleSecModAmp, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 371, 6)))

ctStaggeredSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod'), stDoubleSecModPeriod, scope=ctStaggeredSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 372, 6)))

def _BuildAutomaton_271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_271
    del _BuildAutomaton_271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 346, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 346, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_272
    del _BuildAutomaton_272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 347, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 347, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_273
    del _BuildAutomaton_273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 348, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 348, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_274
    del _BuildAutomaton_274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 349, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 349, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_275
    del _BuildAutomaton_275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 350, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterResSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 350, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_276
    del _BuildAutomaton_276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 351, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 351, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_277
    del _BuildAutomaton_277
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 352, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 352, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_278
    del _BuildAutomaton_278
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 353, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 353, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_279
    del _BuildAutomaton_279
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 354, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 354, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_280
    del _BuildAutomaton_280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 355, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 355, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_281
    del _BuildAutomaton_281
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 356, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 356, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_282
    del _BuildAutomaton_282
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 357, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 357, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_283
    del _BuildAutomaton_283
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 358, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 358, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_284
    del _BuildAutomaton_284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 359, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 359, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_285
    del _BuildAutomaton_285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 360, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 360, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_286
    del _BuildAutomaton_286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 361, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 361, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_287
    del _BuildAutomaton_287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 362, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 362, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_288
    del _BuildAutomaton_288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 363, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 363, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_289
    del _BuildAutomaton_289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 364, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 364, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_290
    del _BuildAutomaton_290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 365, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 365, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_291
    del _BuildAutomaton_291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 366, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 366, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_292
    del _BuildAutomaton_292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 367, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 367, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_293
    del _BuildAutomaton_293
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 368, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecJitterDstrbKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 368, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_294
    del _BuildAutomaton_294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 369, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 369, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_295
    del _BuildAutomaton_295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 370, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPatternKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 370, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_296
    del _BuildAutomaton_296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 371, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 371, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_297
    del _BuildAutomaton_297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 372, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctStaggeredSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SecModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 372, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_270
    del _BuildAutomaton_270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 346, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 347, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 348, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 349, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 350, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 351, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 352, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 353, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 354, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 355, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 356, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 357, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 358, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 359, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 360, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 361, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 362, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 363, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 364, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 365, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 366, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 367, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 368, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 369, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 370, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 371, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 372, 6))
    counters.add(cc_26)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_271())
    sub_automata.append(_BuildAutomaton_272())
    sub_automata.append(_BuildAutomaton_273())
    sub_automata.append(_BuildAutomaton_274())
    sub_automata.append(_BuildAutomaton_275())
    sub_automata.append(_BuildAutomaton_276())
    sub_automata.append(_BuildAutomaton_277())
    sub_automata.append(_BuildAutomaton_278())
    sub_automata.append(_BuildAutomaton_279())
    sub_automata.append(_BuildAutomaton_280())
    sub_automata.append(_BuildAutomaton_281())
    sub_automata.append(_BuildAutomaton_282())
    sub_automata.append(_BuildAutomaton_283())
    sub_automata.append(_BuildAutomaton_284())
    sub_automata.append(_BuildAutomaton_285())
    sub_automata.append(_BuildAutomaton_286())
    sub_automata.append(_BuildAutomaton_287())
    sub_automata.append(_BuildAutomaton_288())
    sub_automata.append(_BuildAutomaton_289())
    sub_automata.append(_BuildAutomaton_290())
    sub_automata.append(_BuildAutomaton_291())
    sub_automata.append(_BuildAutomaton_292())
    sub_automata.append(_BuildAutomaton_293())
    sub_automata.append(_BuildAutomaton_294())
    sub_automata.append(_BuildAutomaton_295())
    sub_automata.append(_BuildAutomaton_296())
    sub_automata.append(_BuildAutomaton_297())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 345, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctStaggeredSeriesPriSegment._Automaton = _BuildAutomaton_270()




ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 378, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 379, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment'), stIntAssociatedFrequencySegment, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 380, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment'), stIntAssociatedPulseSegment, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 381, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 382, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 383, 6)))

ctPriSegmentDiscreteJitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), ctDiscreteJitterSeriesPriSegmentList, scope=ctPriSegmentDiscreteJitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 384, 6)))

def _BuildAutomaton_299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_299
    del _BuildAutomaton_299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 378, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 378, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_300
    del _BuildAutomaton_300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 379, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 379, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_301
    del _BuildAutomaton_301
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 380, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssociatedFrequencySegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 380, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_302
    del _BuildAutomaton_302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 381, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AssociatedPulseSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 381, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_303
    del _BuildAutomaton_303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 382, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 382, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_304
    del _BuildAutomaton_304
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 383, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 383, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_305
    del _BuildAutomaton_305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 384, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentDiscreteJitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Subsegments')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 384, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_298
    del _BuildAutomaton_298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 378, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 379, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 380, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 381, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 382, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 383, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 384, 6))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_299())
    sub_automata.append(_BuildAutomaton_300())
    sub_automata.append(_BuildAutomaton_301())
    sub_automata.append(_BuildAutomaton_302())
    sub_automata.append(_BuildAutomaton_303())
    sub_automata.append(_BuildAutomaton_304())
    sub_automata.append(_BuildAutomaton_305())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 377, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentDiscreteJitter._Automaton = _BuildAutomaton_298()




ctDiscreteJitterSeriesPriSegmentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteJitterSeriesPriSegment'), ctDiscreteJitterSeriesPriSegment, scope=ctDiscreteJitterSeriesPriSegmentList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 390, 6)))

def _BuildAutomaton_306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_306
    del _BuildAutomaton_306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 389, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegmentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteJitterSeriesPriSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 390, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDiscreteJitterSeriesPriSegmentList._Automaton = _BuildAutomaton_306()




ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Pri'), stDoublePri, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 396, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 397, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 398, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 399, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 400, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor'), stDoubleMissingPulseFactor, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 401, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint'), stBoolPriTestPoint, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 402, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2'), stBoolPriTestPoint2, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 403, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3'), stBoolPriTestPoint3, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 404, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4'), stBoolPriTestPoint4, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 405, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 406, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 407, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 408, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState'), stBoolEarSequenceTriggerState, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 409, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState'), stBoolGeneratorTriggerState, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 410, 6)))

ctDiscreteJitterSeriesPriSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator'), stIntSynchronizedGeneratorNumber, scope=ctDiscreteJitterSeriesPriSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 411, 6)))

def _BuildAutomaton_308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_308
    del _BuildAutomaton_308
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 396, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Pri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 396, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_309
    del _BuildAutomaton_309
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 397, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 397, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_310
    del _BuildAutomaton_310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 398, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 398, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_311
    del _BuildAutomaton_311
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 399, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 399, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_312
    del _BuildAutomaton_312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 400, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 400, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_313
    del _BuildAutomaton_313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 401, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MissingPulseFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 401, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_314
    del _BuildAutomaton_314
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 402, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 402, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_315
    del _BuildAutomaton_315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 403, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint2')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 403, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_316
    del _BuildAutomaton_316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 404, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint3')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 404, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_317
    del _BuildAutomaton_317
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 405, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTestPoint4')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 405, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_318
    del _BuildAutomaton_318
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 406, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 406, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_319
    del _BuildAutomaton_319
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 407, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 407, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_320
    del _BuildAutomaton_320
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 408, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 408, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_321
    del _BuildAutomaton_321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 409, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarSequenceTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 409, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_322
    del _BuildAutomaton_322
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 410, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorTriggerState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 410, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_323
    del _BuildAutomaton_323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 411, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteJitterSeriesPriSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SynchronizedGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 411, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_307
    del _BuildAutomaton_307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 396, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 397, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 398, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 399, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 400, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 401, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 402, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 403, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 404, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 405, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 406, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 407, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 408, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 409, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 410, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 411, 6))
    counters.add(cc_15)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_308())
    sub_automata.append(_BuildAutomaton_309())
    sub_automata.append(_BuildAutomaton_310())
    sub_automata.append(_BuildAutomaton_311())
    sub_automata.append(_BuildAutomaton_312())
    sub_automata.append(_BuildAutomaton_313())
    sub_automata.append(_BuildAutomaton_314())
    sub_automata.append(_BuildAutomaton_315())
    sub_automata.append(_BuildAutomaton_316())
    sub_automata.append(_BuildAutomaton_317())
    sub_automata.append(_BuildAutomaton_318())
    sub_automata.append(_BuildAutomaton_319())
    sub_automata.append(_BuildAutomaton_320())
    sub_automata.append(_BuildAutomaton_321())
    sub_automata.append(_BuildAutomaton_322())
    sub_automata.append(_BuildAutomaton_323())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 395, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDiscreteJitterSeriesPriSegment._Automaton = _BuildAutomaton_307()




ctPriSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPriSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 417, 6)))

ctPriSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPriSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 418, 6)))

ctPriSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPriSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 419, 6)))

ctPriSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPriSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 420, 6)))

def _BuildAutomaton_325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_325
    del _BuildAutomaton_325
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 417, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 417, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_326
    del _BuildAutomaton_326
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 418, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 418, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_327
    del _BuildAutomaton_327
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 419, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 419, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_328
    del _BuildAutomaton_328
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 420, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPriSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 420, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_324
    del _BuildAutomaton_324
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 417, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 418, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 419, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 420, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_325())
    sub_automata.append(_BuildAutomaton_326())
    sub_automata.append(_BuildAutomaton_327())
    sub_automata.append(_BuildAutomaton_328())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 416, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPriSegmentCw._Automaton = _BuildAutomaton_324()




ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentAssociated'), ctFrequencySegmentAssociated, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 426, 6)))

ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSingle'), ctFrequencySegmentSingle, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 427, 6)))

ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDwell'), ctFrequencySegmentDwell, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 428, 6)))

ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentPeriodic'), ctFrequencySegmentPeriodic, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 429, 6)))

ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSeries'), ctFrequencySegmentSeries, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 430, 6)))

ctFrequencySequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDiscreteAgility'), ctFrequencySegmentDiscreteAgility, scope=ctFrequencySequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 431, 6)))

def _BuildAutomaton_329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_329
    del _BuildAutomaton_329
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 425, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 426, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 427, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 428, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 429, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 430, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 431, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentAssociated')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 426, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSingle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 427, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 428, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentPeriodic')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 429, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentSeries')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 430, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySegmentDiscreteAgility')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 431, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySequence._Automaton = _BuildAutomaton_329()




ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 437, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 438, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MasterGenerator'), stIntMasterGeneratorNumber, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 439, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOffset'), stDoubleFrequencyOffset, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 440, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 441, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 442, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 443, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 444, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 445, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 446, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 447, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 448, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 449, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 450, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 451, 6)))

ctFrequencySegmentAssociated._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentAssociated, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 452, 6)))

def _BuildAutomaton_331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_331
    del _BuildAutomaton_331
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 437, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 437, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_332
    del _BuildAutomaton_332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 438, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 438, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_333
    del _BuildAutomaton_333
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 439, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MasterGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 439, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_334
    del _BuildAutomaton_334
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 440, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 440, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_335
    del _BuildAutomaton_335
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 441, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 441, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_336
    del _BuildAutomaton_336
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 442, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 442, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_337
    del _BuildAutomaton_337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 443, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 443, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_338
    del _BuildAutomaton_338
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 444, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 444, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_339
    del _BuildAutomaton_339
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 445, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 445, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_340
    del _BuildAutomaton_340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 446, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 446, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_341
    del _BuildAutomaton_341
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 447, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 447, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_342
    del _BuildAutomaton_342
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 448, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 448, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_343
    del _BuildAutomaton_343
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 449, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 449, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_344
    del _BuildAutomaton_344
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 450, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 450, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_345
    del _BuildAutomaton_345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 451, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 451, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_346
    del _BuildAutomaton_346
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 452, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentAssociated._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 452, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_330
    del _BuildAutomaton_330
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 437, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 438, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 439, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 440, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 441, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 442, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 443, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 444, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 445, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 446, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 447, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 448, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 449, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 450, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 451, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 452, 6))
    counters.add(cc_15)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_331())
    sub_automata.append(_BuildAutomaton_332())
    sub_automata.append(_BuildAutomaton_333())
    sub_automata.append(_BuildAutomaton_334())
    sub_automata.append(_BuildAutomaton_335())
    sub_automata.append(_BuildAutomaton_336())
    sub_automata.append(_BuildAutomaton_337())
    sub_automata.append(_BuildAutomaton_338())
    sub_automata.append(_BuildAutomaton_339())
    sub_automata.append(_BuildAutomaton_340())
    sub_automata.append(_BuildAutomaton_341())
    sub_automata.append(_BuildAutomaton_342())
    sub_automata.append(_BuildAutomaton_343())
    sub_automata.append(_BuildAutomaton_344())
    sub_automata.append(_BuildAutomaton_345())
    sub_automata.append(_BuildAutomaton_346())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 436, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentAssociated._Automaton = _BuildAutomaton_330()




ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 458, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 459, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), stDoubleFrequency, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 460, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 461, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 462, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 463, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 464, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 465, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 466, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 467, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), stBoolAgilityStatus, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 468, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), stDoubleAgilityLimit, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 469, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), stStringAgilityPatternName, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 470, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), stBoolAgilityResolutionSwitch, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 471, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 472, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 473, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 474, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 475, 6)))

ctFrequencySegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 476, 6)))

def _BuildAutomaton_348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_348
    del _BuildAutomaton_348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 458, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 458, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_349
    del _BuildAutomaton_349
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 459, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 459, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_350
    del _BuildAutomaton_350
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 460, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 460, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_351
    del _BuildAutomaton_351
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 461, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 461, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_352
    del _BuildAutomaton_352
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 462, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 462, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_353
    del _BuildAutomaton_353
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 463, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 463, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_354
    del _BuildAutomaton_354
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 464, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 464, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_355
    del _BuildAutomaton_355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 465, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 465, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_356
    del _BuildAutomaton_356
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 466, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 466, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_357
    del _BuildAutomaton_357
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 467, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 467, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_358
    del _BuildAutomaton_358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 468, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 468, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_359
    del _BuildAutomaton_359
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 469, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 469, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_360
    del _BuildAutomaton_360
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 470, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 470, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_361
    del _BuildAutomaton_361
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 471, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 471, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_362
    del _BuildAutomaton_362
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 472, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 472, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_363 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_363
    del _BuildAutomaton_363
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 473, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 473, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_364 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_364
    del _BuildAutomaton_364
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 474, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 474, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_365 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_365
    del _BuildAutomaton_365
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 475, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 475, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_366 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_366
    del _BuildAutomaton_366
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 476, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 476, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_347
    del _BuildAutomaton_347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 458, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 459, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 460, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 461, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 462, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 463, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 464, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 465, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 466, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 467, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 468, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 469, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 470, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 471, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 472, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 473, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 474, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 475, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 476, 6))
    counters.add(cc_18)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_348())
    sub_automata.append(_BuildAutomaton_349())
    sub_automata.append(_BuildAutomaton_350())
    sub_automata.append(_BuildAutomaton_351())
    sub_automata.append(_BuildAutomaton_352())
    sub_automata.append(_BuildAutomaton_353())
    sub_automata.append(_BuildAutomaton_354())
    sub_automata.append(_BuildAutomaton_355())
    sub_automata.append(_BuildAutomaton_356())
    sub_automata.append(_BuildAutomaton_357())
    sub_automata.append(_BuildAutomaton_358())
    sub_automata.append(_BuildAutomaton_359())
    sub_automata.append(_BuildAutomaton_360())
    sub_automata.append(_BuildAutomaton_361())
    sub_automata.append(_BuildAutomaton_362())
    sub_automata.append(_BuildAutomaton_363())
    sub_automata.append(_BuildAutomaton_364())
    sub_automata.append(_BuildAutomaton_365())
    sub_automata.append(_BuildAutomaton_366())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 457, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentSingle._Automaton = _BuildAutomaton_347()




ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 482, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 483, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), stDoubleFrequency, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 484, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 485, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 486, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 487, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 488, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 489, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 490, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 491, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 492, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 493, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 494, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation'), stDoubleDwellVariation, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 495, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 496, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses'), stIntDwellVariationPulses, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 497, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), stBoolAgilityStatus, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 498, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), stDoubleAgilityLimit, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 499, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), stStringAgilityPatternName, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 500, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), stBoolAgilityResolutionSwitch, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 501, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 502, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 503, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 504, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 505, 6)))

ctFrequencySegmentDwell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentDwell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 506, 6)))

def _BuildAutomaton_368 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_368
    del _BuildAutomaton_368
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 482, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 482, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_369 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_369
    del _BuildAutomaton_369
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 483, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 483, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_370 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_370
    del _BuildAutomaton_370
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 484, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 484, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_371 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_371
    del _BuildAutomaton_371
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 485, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 485, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_372 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_372
    del _BuildAutomaton_372
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 486, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 486, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_373 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_373
    del _BuildAutomaton_373
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 487, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 487, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_374 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_374
    del _BuildAutomaton_374
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 488, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 488, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_375 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_375
    del _BuildAutomaton_375
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 489, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 489, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_376 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_376
    del _BuildAutomaton_376
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 490, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 490, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_377 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_377
    del _BuildAutomaton_377
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 491, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 491, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_378 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_378
    del _BuildAutomaton_378
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 492, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 492, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_379 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_379
    del _BuildAutomaton_379
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 493, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 493, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_380 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_380
    del _BuildAutomaton_380
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 494, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 494, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_381 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_381
    del _BuildAutomaton_381
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 495, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellVariation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 495, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_382 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_382
    del _BuildAutomaton_382
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 496, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 496, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_383 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_383
    del _BuildAutomaton_383
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 497, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellVariationPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 497, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_384 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_384
    del _BuildAutomaton_384
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 498, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 498, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_385 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_385
    del _BuildAutomaton_385
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 499, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 499, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_386 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_386
    del _BuildAutomaton_386
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 500, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 500, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_387 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_387
    del _BuildAutomaton_387
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 501, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 501, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_388 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_388
    del _BuildAutomaton_388
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 502, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 502, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_389 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_389
    del _BuildAutomaton_389
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 503, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 503, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_390 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_390
    del _BuildAutomaton_390
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 504, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 504, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_391 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_391
    del _BuildAutomaton_391
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 505, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 505, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_392 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_392
    del _BuildAutomaton_392
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 506, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDwell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 506, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_367 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_367
    del _BuildAutomaton_367
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 482, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 483, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 484, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 485, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 486, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 487, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 488, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 489, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 490, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 491, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 492, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 493, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 494, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 495, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 496, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 497, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 498, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 499, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 500, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 501, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 502, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 503, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 504, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 505, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 506, 6))
    counters.add(cc_24)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_368())
    sub_automata.append(_BuildAutomaton_369())
    sub_automata.append(_BuildAutomaton_370())
    sub_automata.append(_BuildAutomaton_371())
    sub_automata.append(_BuildAutomaton_372())
    sub_automata.append(_BuildAutomaton_373())
    sub_automata.append(_BuildAutomaton_374())
    sub_automata.append(_BuildAutomaton_375())
    sub_automata.append(_BuildAutomaton_376())
    sub_automata.append(_BuildAutomaton_377())
    sub_automata.append(_BuildAutomaton_378())
    sub_automata.append(_BuildAutomaton_379())
    sub_automata.append(_BuildAutomaton_380())
    sub_automata.append(_BuildAutomaton_381())
    sub_automata.append(_BuildAutomaton_382())
    sub_automata.append(_BuildAutomaton_383())
    sub_automata.append(_BuildAutomaton_384())
    sub_automata.append(_BuildAutomaton_385())
    sub_automata.append(_BuildAutomaton_386())
    sub_automata.append(_BuildAutomaton_387())
    sub_automata.append(_BuildAutomaton_388())
    sub_automata.append(_BuildAutomaton_389())
    sub_automata.append(_BuildAutomaton_390())
    sub_automata.append(_BuildAutomaton_391())
    sub_automata.append(_BuildAutomaton_392())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 481, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentDwell._Automaton = _BuildAutomaton_367()




ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 512, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 513, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), stDoubleFrequency, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 514, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 515, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 516, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 517, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 518, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 519, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 520, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 521, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), stBoolAgilityStatus, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 522, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), stDoubleAgilityLimit, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 523, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), stStringAgilityPatternName, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 524, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), stBoolAgilityResolutionSwitch, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 525, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), stBoolModStatus, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 526, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModAmp'), stDoubleModAmpFrequency, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 527, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPatternName'), stTextModPatternKind, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 528, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind'), stEnumModPeriodKind, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 529, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses'), stIntModPeriodPulses, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 530, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod'), stDoubleModPeriod, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 531, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync'), stBoolModPeriodSync, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 532, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 533, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 534, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 535, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 536, 6)))

ctFrequencySegmentPeriodic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentPeriodic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 537, 6)))

def _BuildAutomaton_394 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_394
    del _BuildAutomaton_394
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 512, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 512, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_395 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_395
    del _BuildAutomaton_395
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 513, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 513, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_396 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_396
    del _BuildAutomaton_396
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 514, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 514, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_397 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_397
    del _BuildAutomaton_397
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 515, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 515, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_398 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_398
    del _BuildAutomaton_398
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 516, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 516, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_399 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_399
    del _BuildAutomaton_399
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 517, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 517, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_400 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_400
    del _BuildAutomaton_400
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 518, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 518, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_401 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_401
    del _BuildAutomaton_401
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 519, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 519, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_402 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_402
    del _BuildAutomaton_402
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 520, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 520, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_403 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_403
    del _BuildAutomaton_403
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 521, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 521, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_404 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_404
    del _BuildAutomaton_404
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 522, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 522, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_405 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_405
    del _BuildAutomaton_405
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 523, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 523, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_406 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_406
    del _BuildAutomaton_406
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 524, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 524, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_407 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_407
    del _BuildAutomaton_407
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 525, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 525, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_408 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_408
    del _BuildAutomaton_408
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 526, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 526, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_409 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_409
    del _BuildAutomaton_409
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 527, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModAmp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 527, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_410 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_410
    del _BuildAutomaton_410
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 528, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 528, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_411 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_411
    del _BuildAutomaton_411
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 529, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 529, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_412 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_412
    del _BuildAutomaton_412
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 530, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 530, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_413 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_413
    del _BuildAutomaton_413
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 531, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 531, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_414 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_414
    del _BuildAutomaton_414
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 532, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModPeriodSync')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 532, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_415 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_415
    del _BuildAutomaton_415
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 533, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 533, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_416 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_416
    del _BuildAutomaton_416
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 534, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 534, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_417 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_417
    del _BuildAutomaton_417
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 535, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 535, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_418 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_418
    del _BuildAutomaton_418
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 536, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 536, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_419 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_419
    del _BuildAutomaton_419
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 537, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentPeriodic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 537, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_393 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_393
    del _BuildAutomaton_393
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 512, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 513, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 514, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 515, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 516, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 517, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 518, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 519, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 520, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 521, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 522, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 523, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 524, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 525, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 526, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 527, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 528, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 529, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 530, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 531, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 532, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 533, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 534, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 535, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 536, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 537, 6))
    counters.add(cc_25)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_394())
    sub_automata.append(_BuildAutomaton_395())
    sub_automata.append(_BuildAutomaton_396())
    sub_automata.append(_BuildAutomaton_397())
    sub_automata.append(_BuildAutomaton_398())
    sub_automata.append(_BuildAutomaton_399())
    sub_automata.append(_BuildAutomaton_400())
    sub_automata.append(_BuildAutomaton_401())
    sub_automata.append(_BuildAutomaton_402())
    sub_automata.append(_BuildAutomaton_403())
    sub_automata.append(_BuildAutomaton_404())
    sub_automata.append(_BuildAutomaton_405())
    sub_automata.append(_BuildAutomaton_406())
    sub_automata.append(_BuildAutomaton_407())
    sub_automata.append(_BuildAutomaton_408())
    sub_automata.append(_BuildAutomaton_409())
    sub_automata.append(_BuildAutomaton_410())
    sub_automata.append(_BuildAutomaton_411())
    sub_automata.append(_BuildAutomaton_412())
    sub_automata.append(_BuildAutomaton_413())
    sub_automata.append(_BuildAutomaton_414())
    sub_automata.append(_BuildAutomaton_415())
    sub_automata.append(_BuildAutomaton_416())
    sub_automata.append(_BuildAutomaton_417())
    sub_automata.append(_BuildAutomaton_418())
    sub_automata.append(_BuildAutomaton_419())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 511, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentPeriodic._Automaton = _BuildAutomaton_393()




ctFrequencySegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 543, 6)))

ctFrequencySegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 544, 6)))

ctFrequencySegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 545, 6)))

ctFrequencySegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 546, 6)))

ctFrequencySegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), ctSeriesFrequencySegmentList, scope=ctFrequencySegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 547, 6)))

def _BuildAutomaton_421 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_421
    del _BuildAutomaton_421
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 543, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 543, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_422 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_422
    del _BuildAutomaton_422
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 544, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 544, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_423 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_423
    del _BuildAutomaton_423
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 545, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 545, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_424 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_424
    del _BuildAutomaton_424
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 546, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 546, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_425 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_425
    del _BuildAutomaton_425
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 547, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Subsegments')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 547, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_420 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_420
    del _BuildAutomaton_420
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 543, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 544, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 545, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 546, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 547, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_421())
    sub_automata.append(_BuildAutomaton_422())
    sub_automata.append(_BuildAutomaton_423())
    sub_automata.append(_BuildAutomaton_424())
    sub_automata.append(_BuildAutomaton_425())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 542, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentSeries._Automaton = _BuildAutomaton_420()




ctSeriesFrequencySegmentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SeriesFrequencySegment'), ctSeriesFrequencySegment, scope=ctSeriesFrequencySegmentList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 553, 6)))

def _BuildAutomaton_426 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_426
    del _BuildAutomaton_426
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 552, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegmentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SeriesFrequencySegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 553, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSeriesFrequencySegmentList._Automaton = _BuildAutomaton_426()




ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), stDoubleFrequency, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 559, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 560, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 561, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 562, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 563, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 564, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 565, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 566, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 567, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 568, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 569, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus'), stBoolAgilityStatus, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 570, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit'), stDoubleAgilityLimit, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 571, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName'), stStringAgilityPatternName, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 572, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch'), stBoolAgilityResolutionSwitch, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 573, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 574, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 575, 6)))

ctSeriesFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctSeriesFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 576, 6)))

def _BuildAutomaton_428 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_428
    del _BuildAutomaton_428
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 559, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 559, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_429 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_429
    del _BuildAutomaton_429
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 560, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 560, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_430 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_430
    del _BuildAutomaton_430
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 561, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 561, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_431 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_431
    del _BuildAutomaton_431
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 562, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 562, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_432 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_432
    del _BuildAutomaton_432
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 563, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 563, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_433 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_433
    del _BuildAutomaton_433
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 564, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 564, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_434 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_434
    del _BuildAutomaton_434
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 565, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 565, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_435 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_435
    del _BuildAutomaton_435
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 566, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 566, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_436 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_436
    del _BuildAutomaton_436
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 567, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 567, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_437 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_437
    del _BuildAutomaton_437
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 568, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 568, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_438 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_438
    del _BuildAutomaton_438
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 569, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 569, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_439 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_439
    del _BuildAutomaton_439
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 570, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 570, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_440 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_440
    del _BuildAutomaton_440
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 571, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 571, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_441 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_441
    del _BuildAutomaton_441
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 572, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 572, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_442 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_442
    del _BuildAutomaton_442
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 573, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AgilityResolutionSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 573, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_443 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_443
    del _BuildAutomaton_443
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 574, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 574, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_444 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_444
    del _BuildAutomaton_444
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 575, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 575, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_445 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_445
    del _BuildAutomaton_445
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 576, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 576, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_427 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_427
    del _BuildAutomaton_427
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 559, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 560, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 561, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 562, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 563, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 564, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 565, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 566, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 567, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 568, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 569, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 570, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 571, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 572, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 573, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 574, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 575, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 576, 6))
    counters.add(cc_17)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_428())
    sub_automata.append(_BuildAutomaton_429())
    sub_automata.append(_BuildAutomaton_430())
    sub_automata.append(_BuildAutomaton_431())
    sub_automata.append(_BuildAutomaton_432())
    sub_automata.append(_BuildAutomaton_433())
    sub_automata.append(_BuildAutomaton_434())
    sub_automata.append(_BuildAutomaton_435())
    sub_automata.append(_BuildAutomaton_436())
    sub_automata.append(_BuildAutomaton_437())
    sub_automata.append(_BuildAutomaton_438())
    sub_automata.append(_BuildAutomaton_439())
    sub_automata.append(_BuildAutomaton_440())
    sub_automata.append(_BuildAutomaton_441())
    sub_automata.append(_BuildAutomaton_442())
    sub_automata.append(_BuildAutomaton_443())
    sub_automata.append(_BuildAutomaton_444())
    sub_automata.append(_BuildAutomaton_445())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 558, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSeriesFrequencySegment._Automaton = _BuildAutomaton_427()




ctFrequencySegmentDiscreteAgility._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctFrequencySegmentDiscreteAgility, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 582, 6)))

ctFrequencySegmentDiscreteAgility._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctFrequencySegmentDiscreteAgility, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 583, 6)))

ctFrequencySegmentDiscreteAgility._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctFrequencySegmentDiscreteAgility, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 584, 6)))

ctFrequencySegmentDiscreteAgility._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctFrequencySegmentDiscreteAgility, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 585, 6)))

ctFrequencySegmentDiscreteAgility._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), ctDiscreteAgilityFrequencySegmentList, scope=ctFrequencySegmentDiscreteAgility, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 586, 6)))

def _BuildAutomaton_447 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_447
    del _BuildAutomaton_447
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 582, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDiscreteAgility._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 582, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_448 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_448
    del _BuildAutomaton_448
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 583, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDiscreteAgility._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 583, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_449 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_449
    del _BuildAutomaton_449
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 584, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDiscreteAgility._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 584, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_450 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_450
    del _BuildAutomaton_450
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 585, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDiscreteAgility._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 585, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_451 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_451
    del _BuildAutomaton_451
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 586, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencySegmentDiscreteAgility._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Subsegments')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 586, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_446 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_446
    del _BuildAutomaton_446
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 582, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 583, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 584, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 585, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 586, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_447())
    sub_automata.append(_BuildAutomaton_448())
    sub_automata.append(_BuildAutomaton_449())
    sub_automata.append(_BuildAutomaton_450())
    sub_automata.append(_BuildAutomaton_451())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 581, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencySegmentDiscreteAgility._Automaton = _BuildAutomaton_446()




ctDiscreteAgilityFrequencySegmentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAgilityFrequencySegment'), ctDiscreteAgilityFrequencySegment, scope=ctDiscreteAgilityFrequencySegmentList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 592, 6)))

def _BuildAutomaton_452 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_452
    del _BuildAutomaton_452
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 591, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegmentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAgilityFrequencySegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 592, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDiscreteAgilityFrequencySegmentList._Automaton = _BuildAutomaton_452()




ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 598, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 599, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 600, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), stDoubleFrequency, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 601, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource'), stEnumFrequencySource, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 602, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind'), stEnumPowerLevelKind, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 603, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus'), stBoolPooledStatus, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 604, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber'), stIntPoolNumber, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 605, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber'), stIntChannelNumber, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 606, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus'), stBoolDedicatedChannelStatus, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 607, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber'), stIntVirtualNumber, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 608, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 609, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 610, 6)))

ctDiscreteAgilityFrequencySegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctDiscreteAgilityFrequencySegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 611, 6)))

def _BuildAutomaton_454 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_454
    del _BuildAutomaton_454
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 598, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 598, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_455 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_455
    del _BuildAutomaton_455
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 599, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 599, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_456 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_456
    del _BuildAutomaton_456
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 600, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 600, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_457 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_457
    del _BuildAutomaton_457
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 601, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 601, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_458 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_458
    del _BuildAutomaton_458
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 602, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencySource')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 602, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_459 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_459
    del _BuildAutomaton_459
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 603, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PowerLevelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 603, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_460 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_460
    del _BuildAutomaton_460
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 604, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PooledStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 604, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_461 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_461
    del _BuildAutomaton_461
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 605, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PoolNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 605, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_462 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_462
    del _BuildAutomaton_462
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 606, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ChannelNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 606, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_463 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_463
    del _BuildAutomaton_463
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 607, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DedicatedChannelStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 607, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_464 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_464
    del _BuildAutomaton_464
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 608, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VirtualNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 608, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_465 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_465
    del _BuildAutomaton_465
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 609, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 609, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_466 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_466
    del _BuildAutomaton_466
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 610, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 610, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_467 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_467
    del _BuildAutomaton_467
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 611, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDiscreteAgilityFrequencySegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 611, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_453 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_453
    del _BuildAutomaton_453
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 598, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 599, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 600, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 601, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 602, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 603, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 604, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 605, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 606, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 607, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 608, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 609, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 610, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 611, 6))
    counters.add(cc_13)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_454())
    sub_automata.append(_BuildAutomaton_455())
    sub_automata.append(_BuildAutomaton_456())
    sub_automata.append(_BuildAutomaton_457())
    sub_automata.append(_BuildAutomaton_458())
    sub_automata.append(_BuildAutomaton_459())
    sub_automata.append(_BuildAutomaton_460())
    sub_automata.append(_BuildAutomaton_461())
    sub_automata.append(_BuildAutomaton_462())
    sub_automata.append(_BuildAutomaton_463())
    sub_automata.append(_BuildAutomaton_464())
    sub_automata.append(_BuildAutomaton_465())
    sub_automata.append(_BuildAutomaton_466())
    sub_automata.append(_BuildAutomaton_467())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 597, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDiscreteAgilityFrequencySegment._Automaton = _BuildAutomaton_453()




ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentAzEl'), ctScanSegmentAzEl, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 618, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentConical'), ctScanSegmentConical, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 619, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentElectronic'), ctScanSegmentElectronic, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 620, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentHelical'), ctScanSegmentHelical, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 621, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentSpiral'), ctScanSegmentSpiral, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 622, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentInterleavedRaster'), ctScanSegmentInterleavedRaster, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 623, 6)))

ctScanSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentNonInterleavedRaster'), ctScanSegmentNonInterleavedRaster, scope=ctScanSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 624, 6)))

def _BuildAutomaton_468 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_468
    del _BuildAutomaton_468
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 616, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 618, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 619, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 620, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 621, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 622, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 623, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 624, 6))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentAzEl')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 618, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentConical')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 619, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentElectronic')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 620, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentHelical')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 621, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentSpiral')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 622, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentInterleavedRaster')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 623, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanSegmentNonInterleavedRaster')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 624, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSequence._Automaton = _BuildAutomaton_468()




ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 630, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 631, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanKind'), stEnumAzScanKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 632, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackingSwitch'), stBoolAzSutTrackingSwitch, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 633, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzTrackingSwitch'), stBoolAzTrackingSwitch, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 634, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), stDoubleAzTrackOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 635, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzTrackPlatform'), stIntAzTrackPlatformNumber, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 636, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), stDoubleAzPointAngle, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 637, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSectorWidth'), stDoubleAzSectorWidth, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 638, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset'), stDoubleAzInitialBeamOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 639, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanPeriod'), stDoubleAzScanPeriod, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 640, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzPeriodSynchronization'), stBoolAzPeriodSynchronization, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 641, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzDirection'), stEnumAzScanDirection, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 642, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanMotion'), stEnumAzScanMotion, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 643, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzFlybackTime'), stDoubleAzFlybackTime, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 644, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanReset'), stBoolAzScanReset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 645, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzMasterGenerator'), stIntAzMasterGeneratorNumber, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 646, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzMasterOffset'), stDoubleAzMasterOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 647, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzExitCondition'), stBoolAzExitCondition, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 648, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanKind'), stEnumElScanKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 649, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackingSwitch'), stBoolElSutTrackingSwitch, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 650, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElTrackingSwitch'), stBoolElTrackingSwitch, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 651, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), stDoubleElTrackOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 652, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElTrackPlatform'), stIntElTrackPlatformNumber, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 653, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), stDoubleElPointAngle, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 654, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSectorWidth'), stDoubleElSectorWidth, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 655, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElInitialBeamOffset'), stDoubleElInitialBeamOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 656, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanPeriod'), stDoubleElScanPeriod, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 657, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElPeriodSynchronization'), stBoolElPeriodSynchronization, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 658, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElDirection'), stEnumElScanDirection, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 659, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanMotion'), stEnumElScanMotion, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 660, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElFlybackTime'), stDoubleElFlybackTime, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 661, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanReset'), stBoolElScanReset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 662, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElMasterGenerator'), stIntElMasterGeneratorNumber, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 663, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElMasterOffset'), stDoubleElMasterOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 664, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElExitCondition'), stBoolElExitCondition, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 665, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 666, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 667, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), stBoolPalmerStatus, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 668, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), stDoublePalmerInitialOffset, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 669, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), stDoublePalmerSquintAngle, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 670, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), stDoublePalmerRate, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 671, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 672, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 673, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerExitCondition'), stBoolPalmerExitCondition, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 674, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 675, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 676, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 677, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 678, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 679, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 680, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 681, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 682, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 683, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 684, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 685, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 686, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 687, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 688, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 689, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 690, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 691, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthFrequencyTrigger'), stBoolAzimuthFrequencyTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 692, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPriTrigger'), stBoolAzimuthPriTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 693, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPulseTrigger'), stBoolAzimuthPulseTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 694, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationFrequencyTrigger'), stBoolElevationFrequencyTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 695, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationPriTrigger'), stBoolElevationPriTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 696, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationPulseTrigger'), stBoolElevationPulseTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 697, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellFrequencyTrigger'), stBoolDwellFrequencyTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 698, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellPriTrigger'), stBoolDwellPriTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 699, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellPulseTrigger'), stBoolDwellPulseTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 700, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerFrequencyTrigger'), stBoolPalmerFrequencyTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 701, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerPriTrigger'), stBoolPalmerPriTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 702, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerPulseTrigger'), stBoolPalmerPulseTrigger, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 703, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 704, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 705, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 706, 6)))

ctScanSegmentAzEl._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentAzEl, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 707, 6)))

def _BuildAutomaton_470 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_470
    del _BuildAutomaton_470
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 630, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 630, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_471 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_471
    del _BuildAutomaton_471
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 631, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 631, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_472 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_472
    del _BuildAutomaton_472
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 632, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 632, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_473 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_473
    del _BuildAutomaton_473
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 633, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackingSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 633, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_474 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_474
    del _BuildAutomaton_474
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 634, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzTrackingSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 634, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_475 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_475
    del _BuildAutomaton_475
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 635, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 635, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_476 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_476
    del _BuildAutomaton_476
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 636, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 636, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_477 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_477
    del _BuildAutomaton_477
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 637, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 637, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_478 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_478
    del _BuildAutomaton_478
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 638, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSectorWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 638, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_479 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_479
    del _BuildAutomaton_479
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 639, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 639, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_480 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_480
    del _BuildAutomaton_480
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 640, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 640, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_481 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_481
    del _BuildAutomaton_481
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 641, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzPeriodSynchronization')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 641, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_482 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_482
    del _BuildAutomaton_482
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 642, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 642, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_483 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_483
    del _BuildAutomaton_483
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 643, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 643, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_484 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_484
    del _BuildAutomaton_484
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 644, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 644, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_485 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_485
    del _BuildAutomaton_485
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 645, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanReset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 645, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_486 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_486
    del _BuildAutomaton_486
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 646, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzMasterGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 646, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_487 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_487
    del _BuildAutomaton_487
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 647, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzMasterOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 647, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_488 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_488
    del _BuildAutomaton_488
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 648, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzExitCondition')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 648, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_489 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_489
    del _BuildAutomaton_489
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 649, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 649, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_490 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_490
    del _BuildAutomaton_490
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 650, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackingSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 650, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_491 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_491
    del _BuildAutomaton_491
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 651, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElTrackingSwitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 651, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_492 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_492
    del _BuildAutomaton_492
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 652, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 652, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_493 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_493
    del _BuildAutomaton_493
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 653, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 653, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_494 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_494
    del _BuildAutomaton_494
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 654, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 654, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_495 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_495
    del _BuildAutomaton_495
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 655, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSectorWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 655, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_496 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_496
    del _BuildAutomaton_496
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 656, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElInitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 656, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_497 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_497
    del _BuildAutomaton_497
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 657, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 657, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_498 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_498
    del _BuildAutomaton_498
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 658, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElPeriodSynchronization')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 658, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_499 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_499
    del _BuildAutomaton_499
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 659, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 659, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_500 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_500
    del _BuildAutomaton_500
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 660, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 660, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_501 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_501
    del _BuildAutomaton_501
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 661, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 661, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_502 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_502
    del _BuildAutomaton_502
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 662, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanReset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 662, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_503 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_503
    del _BuildAutomaton_503
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 663, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElMasterGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 663, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_504 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_504
    del _BuildAutomaton_504
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 664, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElMasterOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 664, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_505 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_505
    del _BuildAutomaton_505
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 665, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElExitCondition')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 665, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_506 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_506
    del _BuildAutomaton_506
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 666, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 666, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_507 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_507
    del _BuildAutomaton_507
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 667, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 667, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_508 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_508
    del _BuildAutomaton_508
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 668, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 668, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_509 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_509
    del _BuildAutomaton_509
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 669, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 669, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_510 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_510
    del _BuildAutomaton_510
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 670, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 670, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_511 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_511
    del _BuildAutomaton_511
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 671, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 671, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_512 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_512
    del _BuildAutomaton_512
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 672, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 672, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_513 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_513
    del _BuildAutomaton_513
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 673, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 673, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_514 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_514
    del _BuildAutomaton_514
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 674, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerExitCondition')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 674, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_515 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_515
    del _BuildAutomaton_515
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 675, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 675, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_516 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_516
    del _BuildAutomaton_516
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 676, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 676, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_517 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_517
    del _BuildAutomaton_517
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 677, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 677, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_518 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_518
    del _BuildAutomaton_518
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 678, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 678, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_519 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_519
    del _BuildAutomaton_519
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 679, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 679, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_520 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_520
    del _BuildAutomaton_520
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 680, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 680, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_521 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_521
    del _BuildAutomaton_521
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 681, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 681, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_522 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_522
    del _BuildAutomaton_522
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 682, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 682, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_523 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_523
    del _BuildAutomaton_523
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 683, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 683, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_524 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_524
    del _BuildAutomaton_524
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 684, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 684, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_525 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_525
    del _BuildAutomaton_525
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 685, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 685, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_526 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_526
    del _BuildAutomaton_526
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 686, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 686, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_527 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_527
    del _BuildAutomaton_527
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 687, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 687, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_528 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_528
    del _BuildAutomaton_528
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 688, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 688, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_529 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_529
    del _BuildAutomaton_529
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 689, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 689, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_530 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_530
    del _BuildAutomaton_530
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 690, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 690, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_531 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_531
    del _BuildAutomaton_531
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 691, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 691, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_532 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_532
    del _BuildAutomaton_532
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 692, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 692, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_533 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_533
    del _BuildAutomaton_533
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 693, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 693, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_534 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_534
    del _BuildAutomaton_534
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 694, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 694, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_535 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_535
    del _BuildAutomaton_535
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 695, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 695, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_536 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_536
    del _BuildAutomaton_536
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 696, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 696, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_537 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_537
    del _BuildAutomaton_537
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 697, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 697, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_538 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_538
    del _BuildAutomaton_538
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 698, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 698, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_539 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_539
    del _BuildAutomaton_539
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 699, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 699, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_540 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_540
    del _BuildAutomaton_540
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 700, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 700, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_541 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_541
    del _BuildAutomaton_541
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 701, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 701, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_542 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_542
    del _BuildAutomaton_542
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 702, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 702, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_543 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_543
    del _BuildAutomaton_543
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 703, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 703, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_544 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_544
    del _BuildAutomaton_544
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 704, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 704, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_545 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_545
    del _BuildAutomaton_545
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 705, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 705, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_546 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_546
    del _BuildAutomaton_546
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 706, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 706, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_547 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_547
    del _BuildAutomaton_547
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 707, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentAzEl._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 707, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_469 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_469
    del _BuildAutomaton_469
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 630, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 631, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 632, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 633, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 634, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 635, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 636, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 637, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 638, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 639, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 640, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 641, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 642, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 643, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 644, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 645, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 646, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 647, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 648, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 649, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 650, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 651, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 652, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 653, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 654, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 655, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 656, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 657, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 658, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 659, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 660, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 661, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 662, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 663, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 664, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 665, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 666, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 667, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 668, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 669, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 670, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 671, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 672, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 673, 6))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 674, 6))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 675, 6))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 676, 6))
    counters.add(cc_46)
    cc_47 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 677, 6))
    counters.add(cc_47)
    cc_48 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 678, 6))
    counters.add(cc_48)
    cc_49 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 679, 6))
    counters.add(cc_49)
    cc_50 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 680, 6))
    counters.add(cc_50)
    cc_51 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 681, 6))
    counters.add(cc_51)
    cc_52 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 682, 6))
    counters.add(cc_52)
    cc_53 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 683, 6))
    counters.add(cc_53)
    cc_54 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 684, 6))
    counters.add(cc_54)
    cc_55 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 685, 6))
    counters.add(cc_55)
    cc_56 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 686, 6))
    counters.add(cc_56)
    cc_57 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 687, 6))
    counters.add(cc_57)
    cc_58 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 688, 6))
    counters.add(cc_58)
    cc_59 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 689, 6))
    counters.add(cc_59)
    cc_60 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 690, 6))
    counters.add(cc_60)
    cc_61 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 691, 6))
    counters.add(cc_61)
    cc_62 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 692, 6))
    counters.add(cc_62)
    cc_63 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 693, 6))
    counters.add(cc_63)
    cc_64 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 694, 6))
    counters.add(cc_64)
    cc_65 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 695, 6))
    counters.add(cc_65)
    cc_66 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 696, 6))
    counters.add(cc_66)
    cc_67 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 697, 6))
    counters.add(cc_67)
    cc_68 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 698, 6))
    counters.add(cc_68)
    cc_69 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 699, 6))
    counters.add(cc_69)
    cc_70 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 700, 6))
    counters.add(cc_70)
    cc_71 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 701, 6))
    counters.add(cc_71)
    cc_72 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 702, 6))
    counters.add(cc_72)
    cc_73 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 703, 6))
    counters.add(cc_73)
    cc_74 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 704, 6))
    counters.add(cc_74)
    cc_75 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 705, 6))
    counters.add(cc_75)
    cc_76 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 706, 6))
    counters.add(cc_76)
    cc_77 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 707, 6))
    counters.add(cc_77)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_470())
    sub_automata.append(_BuildAutomaton_471())
    sub_automata.append(_BuildAutomaton_472())
    sub_automata.append(_BuildAutomaton_473())
    sub_automata.append(_BuildAutomaton_474())
    sub_automata.append(_BuildAutomaton_475())
    sub_automata.append(_BuildAutomaton_476())
    sub_automata.append(_BuildAutomaton_477())
    sub_automata.append(_BuildAutomaton_478())
    sub_automata.append(_BuildAutomaton_479())
    sub_automata.append(_BuildAutomaton_480())
    sub_automata.append(_BuildAutomaton_481())
    sub_automata.append(_BuildAutomaton_482())
    sub_automata.append(_BuildAutomaton_483())
    sub_automata.append(_BuildAutomaton_484())
    sub_automata.append(_BuildAutomaton_485())
    sub_automata.append(_BuildAutomaton_486())
    sub_automata.append(_BuildAutomaton_487())
    sub_automata.append(_BuildAutomaton_488())
    sub_automata.append(_BuildAutomaton_489())
    sub_automata.append(_BuildAutomaton_490())
    sub_automata.append(_BuildAutomaton_491())
    sub_automata.append(_BuildAutomaton_492())
    sub_automata.append(_BuildAutomaton_493())
    sub_automata.append(_BuildAutomaton_494())
    sub_automata.append(_BuildAutomaton_495())
    sub_automata.append(_BuildAutomaton_496())
    sub_automata.append(_BuildAutomaton_497())
    sub_automata.append(_BuildAutomaton_498())
    sub_automata.append(_BuildAutomaton_499())
    sub_automata.append(_BuildAutomaton_500())
    sub_automata.append(_BuildAutomaton_501())
    sub_automata.append(_BuildAutomaton_502())
    sub_automata.append(_BuildAutomaton_503())
    sub_automata.append(_BuildAutomaton_504())
    sub_automata.append(_BuildAutomaton_505())
    sub_automata.append(_BuildAutomaton_506())
    sub_automata.append(_BuildAutomaton_507())
    sub_automata.append(_BuildAutomaton_508())
    sub_automata.append(_BuildAutomaton_509())
    sub_automata.append(_BuildAutomaton_510())
    sub_automata.append(_BuildAutomaton_511())
    sub_automata.append(_BuildAutomaton_512())
    sub_automata.append(_BuildAutomaton_513())
    sub_automata.append(_BuildAutomaton_514())
    sub_automata.append(_BuildAutomaton_515())
    sub_automata.append(_BuildAutomaton_516())
    sub_automata.append(_BuildAutomaton_517())
    sub_automata.append(_BuildAutomaton_518())
    sub_automata.append(_BuildAutomaton_519())
    sub_automata.append(_BuildAutomaton_520())
    sub_automata.append(_BuildAutomaton_521())
    sub_automata.append(_BuildAutomaton_522())
    sub_automata.append(_BuildAutomaton_523())
    sub_automata.append(_BuildAutomaton_524())
    sub_automata.append(_BuildAutomaton_525())
    sub_automata.append(_BuildAutomaton_526())
    sub_automata.append(_BuildAutomaton_527())
    sub_automata.append(_BuildAutomaton_528())
    sub_automata.append(_BuildAutomaton_529())
    sub_automata.append(_BuildAutomaton_530())
    sub_automata.append(_BuildAutomaton_531())
    sub_automata.append(_BuildAutomaton_532())
    sub_automata.append(_BuildAutomaton_533())
    sub_automata.append(_BuildAutomaton_534())
    sub_automata.append(_BuildAutomaton_535())
    sub_automata.append(_BuildAutomaton_536())
    sub_automata.append(_BuildAutomaton_537())
    sub_automata.append(_BuildAutomaton_538())
    sub_automata.append(_BuildAutomaton_539())
    sub_automata.append(_BuildAutomaton_540())
    sub_automata.append(_BuildAutomaton_541())
    sub_automata.append(_BuildAutomaton_542())
    sub_automata.append(_BuildAutomaton_543())
    sub_automata.append(_BuildAutomaton_544())
    sub_automata.append(_BuildAutomaton_545())
    sub_automata.append(_BuildAutomaton_546())
    sub_automata.append(_BuildAutomaton_547())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 629, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentAzEl._Automaton = _BuildAutomaton_469()




ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 713, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 714, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), stDoubleInitialBeamOffset, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 715, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle'), stDoubleSquintAngle, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 716, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConicalModRate'), stDoubleConicalModRate, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 717, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 718, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind'), stEnumDirectionKind, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 719, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), stDoubleAzPointAngle, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 720, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), stDoubleElPointAngle, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 721, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform'), stIntTrackPlatformNumber, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 722, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), stDoubleAzTrackOffset, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 723, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), stDoubleElTrackOffset, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 724, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 725, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 726, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 727, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 728, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 729, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoubleDwellTime, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 730, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 731, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 732, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 733, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 734, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 735, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 736, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 737, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 738, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 739, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 740, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 741, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 742, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 743, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 744, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 745, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 746, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 747, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 748, 6)))

ctScanSegmentConical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentConical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 749, 6)))

def _BuildAutomaton_549 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_549
    del _BuildAutomaton_549
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 713, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 713, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_550 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_550
    del _BuildAutomaton_550
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 714, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 714, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_551 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_551
    del _BuildAutomaton_551
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 715, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 715, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_552 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_552
    del _BuildAutomaton_552
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 716, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 716, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_553 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_553
    del _BuildAutomaton_553
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 717, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConicalModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 717, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_554 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_554
    del _BuildAutomaton_554
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 718, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 718, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_555 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_555
    del _BuildAutomaton_555
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 719, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 719, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_556 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_556
    del _BuildAutomaton_556
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 720, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 720, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_557 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_557
    del _BuildAutomaton_557
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 721, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 721, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_558 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_558
    del _BuildAutomaton_558
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 722, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 722, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_559 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_559
    del _BuildAutomaton_559
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 723, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 723, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_560 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_560
    del _BuildAutomaton_560
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 724, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 724, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_561 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_561
    del _BuildAutomaton_561
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 725, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 725, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_562 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_562
    del _BuildAutomaton_562
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 726, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 726, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_563 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_563
    del _BuildAutomaton_563
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 727, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 727, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_564 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_564
    del _BuildAutomaton_564
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 728, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 728, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_565 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_565
    del _BuildAutomaton_565
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 729, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 729, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_566 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_566
    del _BuildAutomaton_566
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 730, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 730, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_567 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_567
    del _BuildAutomaton_567
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 731, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 731, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_568 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_568
    del _BuildAutomaton_568
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 732, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 732, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_569 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_569
    del _BuildAutomaton_569
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 733, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 733, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_570 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_570
    del _BuildAutomaton_570
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 734, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 734, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_571 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_571
    del _BuildAutomaton_571
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 735, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 735, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_572 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_572
    del _BuildAutomaton_572
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 736, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 736, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_573 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_573
    del _BuildAutomaton_573
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 737, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 737, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_574 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_574
    del _BuildAutomaton_574
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 738, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 738, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_575 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_575
    del _BuildAutomaton_575
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 739, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 739, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_576 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_576
    del _BuildAutomaton_576
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 740, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 740, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_577 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_577
    del _BuildAutomaton_577
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 741, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 741, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_578 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_578
    del _BuildAutomaton_578
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 742, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 742, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_579 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_579
    del _BuildAutomaton_579
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 743, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 743, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_580 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_580
    del _BuildAutomaton_580
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 744, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 744, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_581 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_581
    del _BuildAutomaton_581
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 745, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 745, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_582 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_582
    del _BuildAutomaton_582
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 746, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 746, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_583 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_583
    del _BuildAutomaton_583
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 747, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 747, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_584 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_584
    del _BuildAutomaton_584
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 748, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 748, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_585 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_585
    del _BuildAutomaton_585
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 749, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentConical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 749, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_548 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_548
    del _BuildAutomaton_548
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 713, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 714, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 715, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 716, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 717, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 718, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 719, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 720, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 721, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 722, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 723, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 724, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 725, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 726, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 727, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 728, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 729, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 730, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 731, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 732, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 733, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 734, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 735, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 736, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 737, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 738, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 739, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 740, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 741, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 742, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 743, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 744, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 745, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 746, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 747, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 748, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 749, 6))
    counters.add(cc_36)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_549())
    sub_automata.append(_BuildAutomaton_550())
    sub_automata.append(_BuildAutomaton_551())
    sub_automata.append(_BuildAutomaton_552())
    sub_automata.append(_BuildAutomaton_553())
    sub_automata.append(_BuildAutomaton_554())
    sub_automata.append(_BuildAutomaton_555())
    sub_automata.append(_BuildAutomaton_556())
    sub_automata.append(_BuildAutomaton_557())
    sub_automata.append(_BuildAutomaton_558())
    sub_automata.append(_BuildAutomaton_559())
    sub_automata.append(_BuildAutomaton_560())
    sub_automata.append(_BuildAutomaton_561())
    sub_automata.append(_BuildAutomaton_562())
    sub_automata.append(_BuildAutomaton_563())
    sub_automata.append(_BuildAutomaton_564())
    sub_automata.append(_BuildAutomaton_565())
    sub_automata.append(_BuildAutomaton_566())
    sub_automata.append(_BuildAutomaton_567())
    sub_automata.append(_BuildAutomaton_568())
    sub_automata.append(_BuildAutomaton_569())
    sub_automata.append(_BuildAutomaton_570())
    sub_automata.append(_BuildAutomaton_571())
    sub_automata.append(_BuildAutomaton_572())
    sub_automata.append(_BuildAutomaton_573())
    sub_automata.append(_BuildAutomaton_574())
    sub_automata.append(_BuildAutomaton_575())
    sub_automata.append(_BuildAutomaton_576())
    sub_automata.append(_BuildAutomaton_577())
    sub_automata.append(_BuildAutomaton_578())
    sub_automata.append(_BuildAutomaton_579())
    sub_automata.append(_BuildAutomaton_580())
    sub_automata.append(_BuildAutomaton_581())
    sub_automata.append(_BuildAutomaton_582())
    sub_automata.append(_BuildAutomaton_583())
    sub_automata.append(_BuildAutomaton_584())
    sub_automata.append(_BuildAutomaton_585())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 712, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentConical._Automaton = _BuildAutomaton_548()




ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 755, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 756, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Beams'), ctBeamList, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 757, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorKind'), stEnumInterruptGeneratorKind, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 758, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerators'), ctInterruptGeneratorList, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 759, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 760, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 761, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayState'), stBoolSwitchDelayState, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 762, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayKind'), stEnumSwitchDelayKind, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 763, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTime'), stDoubleSwitchDelayTime, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 764, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTimePulses'), stIntSwitchDwellTimePulses, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 765, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamListOrder'), stEnumBeamListOrder, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 766, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzReferencePoint'), stDoubleAzReferencePoint, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 767, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElReferencePoint'), stDoubleElReferencePoint, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 768, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzPlatformTrackRefOffset'), stDoubleAzPlatformTrackRefOffset, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 769, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElPlatformTrackRefOffset'), stDoubleElPlatformTrackRefOffset, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 770, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackRefOffset'), stDoubleAzSutTrackRefOffset, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 771, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackRefOffset'), stDoubleElSutTrackRefOffset, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 772, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 773, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 774, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 775, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 776, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 777, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 778, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 779, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 780, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 781, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 782, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 783, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 784, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 785, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 786, 6)))

ctScanSegmentElectronic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentElectronic, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 787, 6)))

def _BuildAutomaton_587 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_587
    del _BuildAutomaton_587
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 755, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 755, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_588 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_588
    del _BuildAutomaton_588
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 756, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 756, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_589 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_589
    del _BuildAutomaton_589
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 757, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Beams')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 757, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_590 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_590
    del _BuildAutomaton_590
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 758, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 758, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_591 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_591
    del _BuildAutomaton_591
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 759, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerators')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 759, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_592 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_592
    del _BuildAutomaton_592
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 760, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 760, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_593 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_593
    del _BuildAutomaton_593
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 761, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 761, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_594 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_594
    del _BuildAutomaton_594
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 762, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 762, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_595 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_595
    del _BuildAutomaton_595
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 763, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 763, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_596 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_596
    del _BuildAutomaton_596
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 764, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 764, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_597 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_597
    del _BuildAutomaton_597
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 765, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SwitchDelayTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 765, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_598 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_598
    del _BuildAutomaton_598
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 766, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamListOrder')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 766, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_599 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_599
    del _BuildAutomaton_599
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 767, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzReferencePoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 767, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_600 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_600
    del _BuildAutomaton_600
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 768, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElReferencePoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 768, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_601 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_601
    del _BuildAutomaton_601
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 769, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzPlatformTrackRefOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 769, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_602 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_602
    del _BuildAutomaton_602
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 770, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElPlatformTrackRefOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 770, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_603 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_603
    del _BuildAutomaton_603
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 771, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSutTrackRefOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 771, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_604 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_604
    del _BuildAutomaton_604
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 772, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSutTrackRefOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 772, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_605 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_605
    del _BuildAutomaton_605
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 773, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 773, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_606 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_606
    del _BuildAutomaton_606
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 774, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 774, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_607 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_607
    del _BuildAutomaton_607
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 775, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 775, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_608 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_608
    del _BuildAutomaton_608
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 776, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 776, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_609 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_609
    del _BuildAutomaton_609
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 777, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 777, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_610 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_610
    del _BuildAutomaton_610
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 778, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 778, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_611 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_611
    del _BuildAutomaton_611
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 779, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 779, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_612 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_612
    del _BuildAutomaton_612
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 780, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 780, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_613 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_613
    del _BuildAutomaton_613
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 781, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 781, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_614 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_614
    del _BuildAutomaton_614
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 782, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 782, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_615 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_615
    del _BuildAutomaton_615
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 783, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 783, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_616 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_616
    del _BuildAutomaton_616
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 784, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 784, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_617 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_617
    del _BuildAutomaton_617
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 785, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 785, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_618 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_618
    del _BuildAutomaton_618
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 786, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 786, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_619 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_619
    del _BuildAutomaton_619
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 787, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentElectronic._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 787, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_586 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_586
    del _BuildAutomaton_586
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 755, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 756, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 757, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 758, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 759, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 760, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 761, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 762, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 763, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 764, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 765, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 766, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 767, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 768, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 769, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 770, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 771, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 772, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 773, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 774, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 775, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 776, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 777, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 778, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 779, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 780, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 781, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 782, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 783, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 784, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 785, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 786, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 787, 6))
    counters.add(cc_32)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_587())
    sub_automata.append(_BuildAutomaton_588())
    sub_automata.append(_BuildAutomaton_589())
    sub_automata.append(_BuildAutomaton_590())
    sub_automata.append(_BuildAutomaton_591())
    sub_automata.append(_BuildAutomaton_592())
    sub_automata.append(_BuildAutomaton_593())
    sub_automata.append(_BuildAutomaton_594())
    sub_automata.append(_BuildAutomaton_595())
    sub_automata.append(_BuildAutomaton_596())
    sub_automata.append(_BuildAutomaton_597())
    sub_automata.append(_BuildAutomaton_598())
    sub_automata.append(_BuildAutomaton_599())
    sub_automata.append(_BuildAutomaton_600())
    sub_automata.append(_BuildAutomaton_601())
    sub_automata.append(_BuildAutomaton_602())
    sub_automata.append(_BuildAutomaton_603())
    sub_automata.append(_BuildAutomaton_604())
    sub_automata.append(_BuildAutomaton_605())
    sub_automata.append(_BuildAutomaton_606())
    sub_automata.append(_BuildAutomaton_607())
    sub_automata.append(_BuildAutomaton_608())
    sub_automata.append(_BuildAutomaton_609())
    sub_automata.append(_BuildAutomaton_610())
    sub_automata.append(_BuildAutomaton_611())
    sub_automata.append(_BuildAutomaton_612())
    sub_automata.append(_BuildAutomaton_613())
    sub_automata.append(_BuildAutomaton_614())
    sub_automata.append(_BuildAutomaton_615())
    sub_automata.append(_BuildAutomaton_616())
    sub_automata.append(_BuildAutomaton_617())
    sub_automata.append(_BuildAutomaton_618())
    sub_automata.append(_BuildAutomaton_619())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 754, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentElectronic._Automaton = _BuildAutomaton_586()




ctBeamList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Beam'), ctBeam, scope=ctBeamList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 793, 6)))

def _BuildAutomaton_620 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_620
    del _BuildAutomaton_620
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=4096, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 792, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeamList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Beam')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 793, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBeamList._Automaton = _BuildAutomaton_620()




ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDirectionKind'), stEnumBeamDirectionKind, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 799, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamAzPointAngle'), stDoubleBeamAzPointAngle, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 800, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamElPointAngle'), stDoubleBeamElPointAngle, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 801, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamTrackPlatform'), stIntTrackPlatformNumber, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 802, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamAzTrackOffset'), stDoubleBeamAzTrackOffset, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 803, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamElTrackOffset'), stDoubleBeamElTrackOffset, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 804, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellStatus'), stBoolBeamDwellStatus, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 805, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellKind'), stEnumBeamDwellKind, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 806, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTime'), stDoubleDwellTime, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 807, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariation'), stDoubleDwellVariation, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 808, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTimePulses'), stIntBeamDwellTimePulses, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 809, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariationPulses'), stIntDwellVariationPulses, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 810, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamAzimuthTestPoint'), stBoolBeamAzimuthTestPoint, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 811, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamElevationTestPoint'), stBoolBeamElevationTestPoint, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 812, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamFrequencyTrigger'), stBoolBeamFrequencyTrigger, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 813, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamPriTrigger'), stBoolBeamPriTrigger, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 814, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamPulseTrigger'), stBoolBeamPulseTrigger, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 815, 6)))

ctBeam._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BeamBlankingList'), stBoolBeamBlankingList, scope=ctBeam, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 816, 6)))

def _BuildAutomaton_622 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_622
    del _BuildAutomaton_622
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 799, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDirectionKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 799, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_623 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_623
    del _BuildAutomaton_623
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 800, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamAzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 800, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_624 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_624
    del _BuildAutomaton_624
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 801, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 801, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_625 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_625
    del _BuildAutomaton_625
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 802, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 802, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_626 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_626
    del _BuildAutomaton_626
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 803, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamAzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 803, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_627 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_627
    del _BuildAutomaton_627
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 804, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 804, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_628 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_628
    del _BuildAutomaton_628
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 805, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 805, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_629 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_629
    del _BuildAutomaton_629
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 806, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 806, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_630 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_630
    del _BuildAutomaton_630
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 807, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 807, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_631 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_631
    del _BuildAutomaton_631
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 808, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 808, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_632 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_632
    del _BuildAutomaton_632
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 809, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 809, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_633 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_633
    del _BuildAutomaton_633
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 810, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamDwellVariationPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 810, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_634 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_634
    del _BuildAutomaton_634
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 811, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamAzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 811, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_635 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_635
    del _BuildAutomaton_635
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 812, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 812, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_636 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_636
    del _BuildAutomaton_636
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 813, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 813, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_637 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_637
    del _BuildAutomaton_637
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 814, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 814, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_638 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_638
    del _BuildAutomaton_638
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 815, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 815, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_639 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_639
    del _BuildAutomaton_639
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 816, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBeam._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BeamBlankingList')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 816, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_621 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_621
    del _BuildAutomaton_621
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 799, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 800, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 801, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 802, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 803, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 804, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 805, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 806, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 807, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 808, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 809, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 810, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 811, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 812, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 813, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 814, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 815, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 816, 6))
    counters.add(cc_17)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_622())
    sub_automata.append(_BuildAutomaton_623())
    sub_automata.append(_BuildAutomaton_624())
    sub_automata.append(_BuildAutomaton_625())
    sub_automata.append(_BuildAutomaton_626())
    sub_automata.append(_BuildAutomaton_627())
    sub_automata.append(_BuildAutomaton_628())
    sub_automata.append(_BuildAutomaton_629())
    sub_automata.append(_BuildAutomaton_630())
    sub_automata.append(_BuildAutomaton_631())
    sub_automata.append(_BuildAutomaton_632())
    sub_automata.append(_BuildAutomaton_633())
    sub_automata.append(_BuildAutomaton_634())
    sub_automata.append(_BuildAutomaton_635())
    sub_automata.append(_BuildAutomaton_636())
    sub_automata.append(_BuildAutomaton_637())
    sub_automata.append(_BuildAutomaton_638())
    sub_automata.append(_BuildAutomaton_639())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 798, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBeam._Automaton = _BuildAutomaton_621()




ctInterruptGeneratorList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerator'), ctInterruptGenerator, scope=ctInterruptGeneratorList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 822, 6)))

def _BuildAutomaton_640 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_640
    del _BuildAutomaton_640
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=31, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 821, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGeneratorList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 822, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctInterruptGeneratorList._Automaton = _BuildAutomaton_640()




ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorGenNumber'), stIntGeneratorNumber, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 828, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorInterruptActive'), stBoolInterruptGeneratorInterruptActive, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 829, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDuration'), stDoubleInterruptGeneratorDuration, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 830, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisit'), stDoubleInterruptGeneratorRevisit, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 831, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTime'), stDoubleInterruptGeneratorStartTime, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 832, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDurationPulses'), stIntInterruptGeneratorDurationPulses, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 833, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisitPulses'), stIntInterruptGeneratorRevisitPulses, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 834, 6)))

ctInterruptGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTimePulses'), stIntInterruptGeneratorStartTimePulses, scope=ctInterruptGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 835, 6)))

def _BuildAutomaton_642 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_642
    del _BuildAutomaton_642
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 828, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorGenNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 828, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_643 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_643
    del _BuildAutomaton_643
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 829, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorInterruptActive')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 829, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_644 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_644
    del _BuildAutomaton_644
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 830, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 830, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_645 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_645
    del _BuildAutomaton_645
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 831, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 831, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_646 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_646
    del _BuildAutomaton_646
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 832, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 832, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_647 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_647
    del _BuildAutomaton_647
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 833, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorDurationPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 833, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_648 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_648
    del _BuildAutomaton_648
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 834, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorRevisitPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 834, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_649 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_649
    del _BuildAutomaton_649
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 835, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterruptGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterruptGeneratorStartTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 835, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_641 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_641
    del _BuildAutomaton_641
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 828, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 829, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 830, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 831, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 832, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 833, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 834, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 835, 6))
    counters.add(cc_7)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_642())
    sub_automata.append(_BuildAutomaton_643())
    sub_automata.append(_BuildAutomaton_644())
    sub_automata.append(_BuildAutomaton_645())
    sub_automata.append(_BuildAutomaton_646())
    sub_automata.append(_BuildAutomaton_647())
    sub_automata.append(_BuildAutomaton_648())
    sub_automata.append(_BuildAutomaton_649())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 827, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctInterruptGenerator._Automaton = _BuildAutomaton_641()




ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 841, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 842, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzStartAngle'), stDoubleAzStartAngle, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 843, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElStartAngle'), stDoubleElStartAngle, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 844, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanDirection'), stEnumAzScanDirection, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 845, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanDirection'), stEnumElScanDirection, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 846, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfElevationLevels'), stIntNumberOfElevationLevels, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 847, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SectorWidth'), stDoubleHelicalSectorWidth, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 848, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset'), stDoubleAzInitialBeamOffset, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 849, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanPeriod'), stDoubleHelicalScanPeriod, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 850, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), stEnumScanMotion, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 851, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime'), stDoubleFlybackTime, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 852, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 853, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 854, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), stBoolPalmerStatus, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 855, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), stDoublePalmerInitialOffset, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 856, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), stDoublePalmerSquintAngle, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 857, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), stDoublePalmerRate, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 858, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 859, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 860, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 861, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 862, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 863, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 864, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 865, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 866, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 867, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 868, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 869, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 870, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 871, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 872, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 873, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 874, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 875, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 876, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 877, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 878, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 879, 6)))

ctScanSegmentHelical._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentHelical, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 880, 6)))

def _BuildAutomaton_651 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_651
    del _BuildAutomaton_651
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 841, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 841, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_652 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_652
    del _BuildAutomaton_652
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 842, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 842, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_653 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_653
    del _BuildAutomaton_653
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 843, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzStartAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 843, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_654 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_654
    del _BuildAutomaton_654
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 844, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElStartAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 844, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_655 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_655
    del _BuildAutomaton_655
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 845, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 845, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_656 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_656
    del _BuildAutomaton_656
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 846, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 846, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_657 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_657
    del _BuildAutomaton_657
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 847, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfElevationLevels')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 847, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_658 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_658
    del _BuildAutomaton_658
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 848, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SectorWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 848, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_659 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_659
    del _BuildAutomaton_659
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 849, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzInitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 849, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_660 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_660
    del _BuildAutomaton_660
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 850, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 850, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_661 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_661
    del _BuildAutomaton_661
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 851, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 851, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_662 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_662
    del _BuildAutomaton_662
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 852, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 852, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_663 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_663
    del _BuildAutomaton_663
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 853, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 853, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_664 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_664
    del _BuildAutomaton_664
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 854, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 854, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_665 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_665
    del _BuildAutomaton_665
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 855, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 855, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_666 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_666
    del _BuildAutomaton_666
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 856, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 856, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_667 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_667
    del _BuildAutomaton_667
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 857, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 857, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_668 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_668
    del _BuildAutomaton_668
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 858, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 858, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_669 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_669
    del _BuildAutomaton_669
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 859, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 859, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_670 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_670
    del _BuildAutomaton_670
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 860, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 860, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_671 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_671
    del _BuildAutomaton_671
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 861, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 861, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_672 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_672
    del _BuildAutomaton_672
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 862, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 862, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_673 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_673
    del _BuildAutomaton_673
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 863, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 863, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_674 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_674
    del _BuildAutomaton_674
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 864, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 864, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_675 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_675
    del _BuildAutomaton_675
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 865, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 865, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_676 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_676
    del _BuildAutomaton_676
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 866, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 866, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_677 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_677
    del _BuildAutomaton_677
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 867, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 867, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_678 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_678
    del _BuildAutomaton_678
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 868, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 868, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_679 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_679
    del _BuildAutomaton_679
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 869, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 869, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_680 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_680
    del _BuildAutomaton_680
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 870, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 870, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_681 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_681
    del _BuildAutomaton_681
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 871, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 871, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_682 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_682
    del _BuildAutomaton_682
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 872, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 872, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_683 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_683
    del _BuildAutomaton_683
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 873, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 873, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_684 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_684
    del _BuildAutomaton_684
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 874, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 874, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_685 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_685
    del _BuildAutomaton_685
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 875, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 875, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_686 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_686
    del _BuildAutomaton_686
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 876, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 876, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_687 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_687
    del _BuildAutomaton_687
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 877, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 877, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_688 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_688
    del _BuildAutomaton_688
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 878, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 878, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_689 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_689
    del _BuildAutomaton_689
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 879, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 879, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_690 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_690
    del _BuildAutomaton_690
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 880, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentHelical._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 880, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_650 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_650
    del _BuildAutomaton_650
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 841, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 842, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 843, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 844, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 845, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 846, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 847, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 848, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 849, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 850, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 851, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 852, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 853, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 854, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 855, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 856, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 857, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 858, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 859, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 860, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 861, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 862, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 863, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 864, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 865, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 866, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 867, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 868, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 869, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 870, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 871, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 872, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 873, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 874, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 875, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 876, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 877, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 878, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 879, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 880, 6))
    counters.add(cc_39)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_651())
    sub_automata.append(_BuildAutomaton_652())
    sub_automata.append(_BuildAutomaton_653())
    sub_automata.append(_BuildAutomaton_654())
    sub_automata.append(_BuildAutomaton_655())
    sub_automata.append(_BuildAutomaton_656())
    sub_automata.append(_BuildAutomaton_657())
    sub_automata.append(_BuildAutomaton_658())
    sub_automata.append(_BuildAutomaton_659())
    sub_automata.append(_BuildAutomaton_660())
    sub_automata.append(_BuildAutomaton_661())
    sub_automata.append(_BuildAutomaton_662())
    sub_automata.append(_BuildAutomaton_663())
    sub_automata.append(_BuildAutomaton_664())
    sub_automata.append(_BuildAutomaton_665())
    sub_automata.append(_BuildAutomaton_666())
    sub_automata.append(_BuildAutomaton_667())
    sub_automata.append(_BuildAutomaton_668())
    sub_automata.append(_BuildAutomaton_669())
    sub_automata.append(_BuildAutomaton_670())
    sub_automata.append(_BuildAutomaton_671())
    sub_automata.append(_BuildAutomaton_672())
    sub_automata.append(_BuildAutomaton_673())
    sub_automata.append(_BuildAutomaton_674())
    sub_automata.append(_BuildAutomaton_675())
    sub_automata.append(_BuildAutomaton_676())
    sub_automata.append(_BuildAutomaton_677())
    sub_automata.append(_BuildAutomaton_678())
    sub_automata.append(_BuildAutomaton_679())
    sub_automata.append(_BuildAutomaton_680())
    sub_automata.append(_BuildAutomaton_681())
    sub_automata.append(_BuildAutomaton_682())
    sub_automata.append(_BuildAutomaton_683())
    sub_automata.append(_BuildAutomaton_684())
    sub_automata.append(_BuildAutomaton_685())
    sub_automata.append(_BuildAutomaton_686())
    sub_automata.append(_BuildAutomaton_687())
    sub_automata.append(_BuildAutomaton_688())
    sub_automata.append(_BuildAutomaton_689())
    sub_automata.append(_BuildAutomaton_690())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 840, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentHelical._Automaton = _BuildAutomaton_650()




ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 886, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 887, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), stDoubleInitialBeamOffset, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 888, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle'), stDoubleSquintAngle, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 889, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpiralModulationRate'), stDoubleSpiralModulationRate, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 890, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 891, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRevolutions'), stIntNumberOfRevolutions, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 892, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), stEnumScanMotion, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 893, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime'), stDoubleFlybackTime, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 894, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpiralDirection'), stEnumSpiralDirection, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 895, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind'), stEnumDirectionKind, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 896, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle'), stDoubleAzPointAngle, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 897, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle'), stDoubleElPointAngle, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 898, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform'), stIntTrackPlatformNumber, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 899, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset'), stDoubleAzTrackOffset, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 900, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset'), stDoubleElTrackOffset, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 901, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 902, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 903, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 904, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 905, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 906, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 907, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 908, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 909, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 910, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 911, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 912, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 913, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 914, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 915, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 916, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 917, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 918, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 919, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 920, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 921, 6)))

ctScanSegmentSpiral._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentSpiral, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 922, 6)))

def _BuildAutomaton_692 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_692
    del _BuildAutomaton_692
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 886, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 886, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_693 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_693
    del _BuildAutomaton_693
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 887, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 887, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_694 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_694
    del _BuildAutomaton_694
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 888, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 888, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_695 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_695
    del _BuildAutomaton_695
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 889, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 889, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_696 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_696
    del _BuildAutomaton_696
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 890, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpiralModulationRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 890, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_697 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_697
    del _BuildAutomaton_697
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 891, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 891, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_698 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_698
    del _BuildAutomaton_698
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 892, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfRevolutions')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 892, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_699 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_699
    del _BuildAutomaton_699
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 893, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 893, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_700 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_700
    del _BuildAutomaton_700
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 894, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 894, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_701 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_701
    del _BuildAutomaton_701
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 895, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpiralDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 895, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_702 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_702
    del _BuildAutomaton_702
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 896, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DirectionKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 896, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_703 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_703
    del _BuildAutomaton_703
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 897, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 897, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_704 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_704
    del _BuildAutomaton_704
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 898, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 898, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_705 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_705
    del _BuildAutomaton_705
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 899, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 899, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_706 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_706
    del _BuildAutomaton_706
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 900, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 900, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_707 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_707
    del _BuildAutomaton_707
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 901, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 901, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_708 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_708
    del _BuildAutomaton_708
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 902, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 902, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_709 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_709
    del _BuildAutomaton_709
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 903, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 903, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_710 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_710
    del _BuildAutomaton_710
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 904, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 904, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_711 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_711
    del _BuildAutomaton_711
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 905, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 905, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_712 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_712
    del _BuildAutomaton_712
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 906, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 906, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_713 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_713
    del _BuildAutomaton_713
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 907, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 907, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_714 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_714
    del _BuildAutomaton_714
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 908, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 908, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_715 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_715
    del _BuildAutomaton_715
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 909, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 909, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_716 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_716
    del _BuildAutomaton_716
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 910, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 910, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_717 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_717
    del _BuildAutomaton_717
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 911, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 911, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_718 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_718
    del _BuildAutomaton_718
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 912, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 912, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_719 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_719
    del _BuildAutomaton_719
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 913, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 913, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_720 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_720
    del _BuildAutomaton_720
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 914, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 914, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_721 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_721
    del _BuildAutomaton_721
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 915, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 915, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_722 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_722
    del _BuildAutomaton_722
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 916, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 916, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_723 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_723
    del _BuildAutomaton_723
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 917, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 917, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_724 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_724
    del _BuildAutomaton_724
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 918, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 918, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_725 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_725
    del _BuildAutomaton_725
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 919, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 919, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_726 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_726
    del _BuildAutomaton_726
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 920, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 920, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_727 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_727
    del _BuildAutomaton_727
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 921, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 921, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_728 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_728
    del _BuildAutomaton_728
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 922, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentSpiral._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 922, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_691 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_691
    del _BuildAutomaton_691
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 886, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 887, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 888, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 889, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 890, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 891, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 892, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 893, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 894, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 895, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 896, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 897, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 898, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 899, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 900, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 901, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 902, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 903, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 904, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 905, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 906, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 907, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 908, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 909, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 910, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 911, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 912, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 913, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 914, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 915, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 916, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 917, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 918, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 919, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 920, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 921, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 922, 6))
    counters.add(cc_36)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_692())
    sub_automata.append(_BuildAutomaton_693())
    sub_automata.append(_BuildAutomaton_694())
    sub_automata.append(_BuildAutomaton_695())
    sub_automata.append(_BuildAutomaton_696())
    sub_automata.append(_BuildAutomaton_697())
    sub_automata.append(_BuildAutomaton_698())
    sub_automata.append(_BuildAutomaton_699())
    sub_automata.append(_BuildAutomaton_700())
    sub_automata.append(_BuildAutomaton_701())
    sub_automata.append(_BuildAutomaton_702())
    sub_automata.append(_BuildAutomaton_703())
    sub_automata.append(_BuildAutomaton_704())
    sub_automata.append(_BuildAutomaton_705())
    sub_automata.append(_BuildAutomaton_706())
    sub_automata.append(_BuildAutomaton_707())
    sub_automata.append(_BuildAutomaton_708())
    sub_automata.append(_BuildAutomaton_709())
    sub_automata.append(_BuildAutomaton_710())
    sub_automata.append(_BuildAutomaton_711())
    sub_automata.append(_BuildAutomaton_712())
    sub_automata.append(_BuildAutomaton_713())
    sub_automata.append(_BuildAutomaton_714())
    sub_automata.append(_BuildAutomaton_715())
    sub_automata.append(_BuildAutomaton_716())
    sub_automata.append(_BuildAutomaton_717())
    sub_automata.append(_BuildAutomaton_718())
    sub_automata.append(_BuildAutomaton_719())
    sub_automata.append(_BuildAutomaton_720())
    sub_automata.append(_BuildAutomaton_721())
    sub_automata.append(_BuildAutomaton_722())
    sub_automata.append(_BuildAutomaton_723())
    sub_automata.append(_BuildAutomaton_724())
    sub_automata.append(_BuildAutomaton_725())
    sub_automata.append(_BuildAutomaton_726())
    sub_automata.append(_BuildAutomaton_727())
    sub_automata.append(_BuildAutomaton_728())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 885, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentSpiral._Automaton = _BuildAutomaton_691()




ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 928, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 929, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation'), stEnumRasterOrientation, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 930, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection'), stEnumInitialBarDirection, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 931, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), stDoubleInitialBeamOffset, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 932, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate'), stDoubleBarScanRate, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 933, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate'), stDoubleBarTransitRate, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 934, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus'), stBoolRasterFlybackStatus, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 935, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime'), stDoubleRasterFlybackTime, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 936, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion'), stEnumScanMotion, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 937, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime'), stDoubleFlybackTime, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 938, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind'), stEnumBarDirectionKind, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 939, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle'), stDoubleBarAzPointAngle, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 940, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle'), stDoubleBarElPointAngle, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 941, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform'), stIntBarTrackPlatformNumber, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 942, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset'), stDoubleBarAzTrackOffset, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 943, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset'), stDoubleBarElTrackOffset, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 944, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Bars'), ctBarList, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 945, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus'), stBoolInterbarBlankingStatus, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 946, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 947, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 948, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), stBoolPalmerStatus, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 949, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), stDoublePalmerInitialOffset, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 950, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), stDoublePalmerSquintAngle, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 951, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), stDoublePalmerRate, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 952, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 953, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 954, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 955, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 956, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 957, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 958, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 959, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 960, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 961, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 962, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 963, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 964, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 965, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 966, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 967, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 968, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 969, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 970, 6)))

ctScanSegmentInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 971, 6)))

def _BuildAutomaton_730 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_730
    del _BuildAutomaton_730
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 928, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 928, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_731 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_731
    del _BuildAutomaton_731
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 929, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 929, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_732 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_732
    del _BuildAutomaton_732
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 930, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 930, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_733 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_733
    del _BuildAutomaton_733
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 931, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 931, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_734 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_734
    del _BuildAutomaton_734
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 932, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 932, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_735 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_735
    del _BuildAutomaton_735
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 933, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 933, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_736 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_736
    del _BuildAutomaton_736
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 934, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 934, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_737 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_737
    del _BuildAutomaton_737
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 935, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 935, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_738 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_738
    del _BuildAutomaton_738
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 936, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 936, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_739 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_739
    del _BuildAutomaton_739
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 937, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 937, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_740 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_740
    del _BuildAutomaton_740
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 938, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 938, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_741 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_741
    del _BuildAutomaton_741
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 939, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 939, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_742 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_742
    del _BuildAutomaton_742
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 940, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 940, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_743 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_743
    del _BuildAutomaton_743
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 941, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 941, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_744 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_744
    del _BuildAutomaton_744
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 942, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 942, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_745 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_745
    del _BuildAutomaton_745
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 943, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 943, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_746 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_746
    del _BuildAutomaton_746
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 944, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 944, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_747 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_747
    del _BuildAutomaton_747
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 945, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Bars')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 945, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_748 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_748
    del _BuildAutomaton_748
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 946, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 946, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_749 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_749
    del _BuildAutomaton_749
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 947, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 947, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_750 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_750
    del _BuildAutomaton_750
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 948, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 948, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_751 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_751
    del _BuildAutomaton_751
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 949, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 949, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_752 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_752
    del _BuildAutomaton_752
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 950, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 950, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_753 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_753
    del _BuildAutomaton_753
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 951, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 951, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_754 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_754
    del _BuildAutomaton_754
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 952, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 952, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_755 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_755
    del _BuildAutomaton_755
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 953, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 953, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_756 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_756
    del _BuildAutomaton_756
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 954, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 954, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_757 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_757
    del _BuildAutomaton_757
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 955, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 955, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_758 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_758
    del _BuildAutomaton_758
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 956, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 956, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_759 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_759
    del _BuildAutomaton_759
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 957, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 957, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_760 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_760
    del _BuildAutomaton_760
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 958, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 958, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_761 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_761
    del _BuildAutomaton_761
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 959, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 959, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_762 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_762
    del _BuildAutomaton_762
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 960, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 960, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_763 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_763
    del _BuildAutomaton_763
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 961, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 961, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_764 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_764
    del _BuildAutomaton_764
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 962, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 962, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_765 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_765
    del _BuildAutomaton_765
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 963, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 963, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_766 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_766
    del _BuildAutomaton_766
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 964, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 964, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_767 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_767
    del _BuildAutomaton_767
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 965, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 965, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_768 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_768
    del _BuildAutomaton_768
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 966, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 966, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_769 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_769
    del _BuildAutomaton_769
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 967, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 967, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_770 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_770
    del _BuildAutomaton_770
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 968, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 968, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_771 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_771
    del _BuildAutomaton_771
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 969, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 969, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_772 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_772
    del _BuildAutomaton_772
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 970, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 970, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_773 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_773
    del _BuildAutomaton_773
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 971, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 971, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_729 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_729
    del _BuildAutomaton_729
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 928, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 929, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 930, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 931, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 932, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 933, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 934, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 935, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 936, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 937, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 938, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 939, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 940, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 941, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 942, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 943, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 944, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 945, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 946, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 947, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 948, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 949, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 950, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 951, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 952, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 953, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 954, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 955, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 956, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 957, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 958, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 959, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 960, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 961, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 962, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 963, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 964, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 965, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 966, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 967, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 968, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 969, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 970, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 971, 6))
    counters.add(cc_43)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_730())
    sub_automata.append(_BuildAutomaton_731())
    sub_automata.append(_BuildAutomaton_732())
    sub_automata.append(_BuildAutomaton_733())
    sub_automata.append(_BuildAutomaton_734())
    sub_automata.append(_BuildAutomaton_735())
    sub_automata.append(_BuildAutomaton_736())
    sub_automata.append(_BuildAutomaton_737())
    sub_automata.append(_BuildAutomaton_738())
    sub_automata.append(_BuildAutomaton_739())
    sub_automata.append(_BuildAutomaton_740())
    sub_automata.append(_BuildAutomaton_741())
    sub_automata.append(_BuildAutomaton_742())
    sub_automata.append(_BuildAutomaton_743())
    sub_automata.append(_BuildAutomaton_744())
    sub_automata.append(_BuildAutomaton_745())
    sub_automata.append(_BuildAutomaton_746())
    sub_automata.append(_BuildAutomaton_747())
    sub_automata.append(_BuildAutomaton_748())
    sub_automata.append(_BuildAutomaton_749())
    sub_automata.append(_BuildAutomaton_750())
    sub_automata.append(_BuildAutomaton_751())
    sub_automata.append(_BuildAutomaton_752())
    sub_automata.append(_BuildAutomaton_753())
    sub_automata.append(_BuildAutomaton_754())
    sub_automata.append(_BuildAutomaton_755())
    sub_automata.append(_BuildAutomaton_756())
    sub_automata.append(_BuildAutomaton_757())
    sub_automata.append(_BuildAutomaton_758())
    sub_automata.append(_BuildAutomaton_759())
    sub_automata.append(_BuildAutomaton_760())
    sub_automata.append(_BuildAutomaton_761())
    sub_automata.append(_BuildAutomaton_762())
    sub_automata.append(_BuildAutomaton_763())
    sub_automata.append(_BuildAutomaton_764())
    sub_automata.append(_BuildAutomaton_765())
    sub_automata.append(_BuildAutomaton_766())
    sub_automata.append(_BuildAutomaton_767())
    sub_automata.append(_BuildAutomaton_768())
    sub_automata.append(_BuildAutomaton_769())
    sub_automata.append(_BuildAutomaton_770())
    sub_automata.append(_BuildAutomaton_771())
    sub_automata.append(_BuildAutomaton_772())
    sub_automata.append(_BuildAutomaton_773())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 927, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentInterleavedRaster._Automaton = _BuildAutomaton_729()




ctBarList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Bar'), ctBar, scope=ctBarList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 977, 6)))

def _BuildAutomaton_774 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_774
    del _BuildAutomaton_774
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=100, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 976, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBarList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Bar')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 977, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBarList._Automaton = _BuildAutomaton_774()




ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarWidth'), stDoubleBarWidth, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 983, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarOffset'), stDoubleBarOffset, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 984, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarFrequencyTrigger'), stBoolBarFrequencyTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 985, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarPriTrigger'), stBoolBarPriTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 986, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarPulseTrigger'), stBoolBarPulseTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 987, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarScanTrigger'), stBoolBarScanTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 988, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarFrequencyTrigger'), stBoolInterbarFrequencyTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 989, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarPriTrigger'), stBoolInterbarPriTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 990, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarPulseTrigger'), stBoolInterbarPulseTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 991, 6)))

ctBar._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarScanTrigger'), stBoolInterbarScanTrigger, scope=ctBar, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 992, 6)))

def _BuildAutomaton_776 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_776
    del _BuildAutomaton_776
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 983, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 983, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_777 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_777
    del _BuildAutomaton_777
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 984, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 984, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_778 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_778
    del _BuildAutomaton_778
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 985, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 985, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_779 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_779
    del _BuildAutomaton_779
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 986, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 986, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_780 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_780
    del _BuildAutomaton_780
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 987, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 987, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_781 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_781
    del _BuildAutomaton_781
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 988, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 988, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_782 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_782
    del _BuildAutomaton_782
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 989, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarFrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 989, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_783 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_783
    del _BuildAutomaton_783
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 990, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarPriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 990, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_784 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_784
    del _BuildAutomaton_784
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 991, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarPulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 991, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_785 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_785
    del _BuildAutomaton_785
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 992, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBar._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 992, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_775 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_775
    del _BuildAutomaton_775
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 983, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 984, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 985, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 986, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 987, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 988, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 989, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 990, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 991, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 992, 6))
    counters.add(cc_9)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_776())
    sub_automata.append(_BuildAutomaton_777())
    sub_automata.append(_BuildAutomaton_778())
    sub_automata.append(_BuildAutomaton_779())
    sub_automata.append(_BuildAutomaton_780())
    sub_automata.append(_BuildAutomaton_781())
    sub_automata.append(_BuildAutomaton_782())
    sub_automata.append(_BuildAutomaton_783())
    sub_automata.append(_BuildAutomaton_784())
    sub_automata.append(_BuildAutomaton_785())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 982, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBar._Automaton = _BuildAutomaton_775()




ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 998, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 999, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation'), stEnumRasterOrientation, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1000, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection'), stEnumInitialBarDirection, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1001, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarDirection'), stEnumInterbarDirection, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1002, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NumberOfBars'), stIntNumberOfBars, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1003, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarWidth'), stDoubleBarWidth, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1004, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset'), stDoubleInitialBeamOffset, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1005, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoverageAngle'), stDoubleCoverageAngle, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1006, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate'), stDoubleBarScanRate, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1007, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate'), stDoubleBarTransitRate, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1008, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus'), stBoolRasterFlybackStatus, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1009, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime'), stDoubleRasterFlybackTime, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1010, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarScanMotion'), stEnumBarScanMotion, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1011, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime'), stDoubleFlybackTime, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1012, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BidirectionReturnOnSameBar'), stBoolBidirectionReturnOnSameBar, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1013, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus'), stBoolInterbarBlankingStatus, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1014, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind'), stEnumBarDirectionKind, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1015, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle'), stDoubleBarAzPointAngle, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1016, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle'), stDoubleBarElPointAngle, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1017, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform'), stIntTrackPlatformNumber, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1018, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset'), stDoubleBarAzTrackOffset, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1019, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset'), stDoubleBarElTrackOffset, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1020, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel'), stBoolCoupledAxisMotionModel, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1021, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking'), stBoolScanBlanking, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1022, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus'), stBoolPalmerStatus, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1023, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset'), stDoublePalmerInitialOffset, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1024, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle'), stDoublePalmerSquintAngle, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1025, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate'), stDoublePalmerRate, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1026, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate'), stDoublePolarizationModRate, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1027, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation'), stBoolAntennaRotation, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1028, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape'), stTextAzScanShape, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1029, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth'), stDoubleAzBeamwidth, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1030, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio'), stDoubleAzSidelobeRatio, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1031, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape'), stTextElScanShape, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1032, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth'), stDoubleElBeamwidth, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1033, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio'), stDoubleElSidelobeRatio, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1034, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind'), stEnumAntennaModelKind, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1035, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind'), stEnumPolarizationModelKind, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1036, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta'), stDoubleVhPhaseDelta, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1037, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio'), stDoubleVhPolRatio, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1038, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind'), stEnumPolarizationKind, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1039, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName'), stTextAzElPatternName, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1040, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling'), stBoolEllipticalAxisScaling, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1041, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TriggerType'), stEnumTriggerType, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1042, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1043, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1044, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger'), stBoolPulseTrigger, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1045, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndOfRasterTriggerStatus'), stBoolEndOfRasterTriggerStatus, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1046, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint'), stBoolAzimuthTestPoint, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1047, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint'), stBoolElevationTestPoint, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1048, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1049, 6)))

ctScanSegmentNonInterleavedRaster._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctScanSegmentNonInterleavedRaster, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1050, 6)))

def _BuildAutomaton_787 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_787
    del _BuildAutomaton_787
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 998, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 998, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_788 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_788
    del _BuildAutomaton_788
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 999, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 999, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_789 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_789
    del _BuildAutomaton_789
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1000, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterOrientation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1000, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_790 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_790
    del _BuildAutomaton_790
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1001, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBarDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1001, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_791 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_791
    del _BuildAutomaton_791
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1002, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1002, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_792 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_792
    del _BuildAutomaton_792
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1003, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NumberOfBars')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1003, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_793 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_793
    del _BuildAutomaton_793
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1004, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1004, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_794 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_794
    del _BuildAutomaton_794
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1005, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InitialBeamOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1005, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_795 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_795
    del _BuildAutomaton_795
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1006, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoverageAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1006, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_796 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_796
    del _BuildAutomaton_796
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1007, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarScanRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1007, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_797 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_797
    del _BuildAutomaton_797
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1008, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarTransitRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1008, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_798 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_798
    del _BuildAutomaton_798
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1009, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1009, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_799 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_799
    del _BuildAutomaton_799
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1010, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RasterFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1010, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_800 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_800
    del _BuildAutomaton_800
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1011, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarScanMotion')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1011, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_801 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_801
    del _BuildAutomaton_801
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1012, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarFlybackTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1012, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_802 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_802
    del _BuildAutomaton_802
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1013, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BidirectionReturnOnSameBar')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1013, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_803 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_803
    del _BuildAutomaton_803
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1014, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterbarBlankingStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1014, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_804 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_804
    del _BuildAutomaton_804
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1015, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarDirectionKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1015, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_805 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_805
    del _BuildAutomaton_805
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1016, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarAzPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1016, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_806 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_806
    del _BuildAutomaton_806
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1017, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarElPointAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1017, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_807 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_807
    del _BuildAutomaton_807
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1018, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarTrackPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1018, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_808 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_808
    del _BuildAutomaton_808
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1019, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarAzTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1019, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_809 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_809
    del _BuildAutomaton_809
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1020, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BarElTrackOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1020, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_810 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_810
    del _BuildAutomaton_810
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1021, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledAxisMotionModel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1021, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_811 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_811
    del _BuildAutomaton_811
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1022, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanBlanking')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1022, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_812 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_812
    del _BuildAutomaton_812
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1023, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1023, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_813 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_813
    del _BuildAutomaton_813
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1024, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerInitialOffset')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1024, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_814 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_814
    del _BuildAutomaton_814
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1025, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerSquintAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1025, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_815 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_815
    del _BuildAutomaton_815
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1026, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PalmerRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1026, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_816 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_816
    del _BuildAutomaton_816
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1027, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1027, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_817 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_817
    del _BuildAutomaton_817
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1028, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaRotation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1028, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_818 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_818
    del _BuildAutomaton_818
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1029, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1029, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_819 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_819
    del _BuildAutomaton_819
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1030, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1030, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_820 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_820
    del _BuildAutomaton_820
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1031, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1031, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_821 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_821
    del _BuildAutomaton_821
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1032, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElScanShape')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1032, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_822 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_822
    del _BuildAutomaton_822
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1033, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElBeamwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1033, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_823 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_823
    del _BuildAutomaton_823
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1034, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElSidelobeRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1034, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_824 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_824
    del _BuildAutomaton_824
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1035, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AntennaModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1035, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_825 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_825
    del _BuildAutomaton_825
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1036, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationModelKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1036, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_826 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_826
    del _BuildAutomaton_826
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1037, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPhaseDelta')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1037, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_827 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_827
    del _BuildAutomaton_827
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1038, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VhPolRatio')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1038, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_828 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_828
    del _BuildAutomaton_828
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1039, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PolarizationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1039, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_829 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_829
    del _BuildAutomaton_829
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1040, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzElPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1040, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_830 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_830
    del _BuildAutomaton_830
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1041, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EllipticalAxisScaling')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1041, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_831 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_831
    del _BuildAutomaton_831
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1042, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TriggerType')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1042, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_832 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_832
    del _BuildAutomaton_832
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1043, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1043, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_833 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_833
    del _BuildAutomaton_833
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1044, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1044, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_834 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_834
    del _BuildAutomaton_834
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1045, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1045, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_835 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_835
    del _BuildAutomaton_835
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1046, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndOfRasterTriggerStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1046, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_836 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_836
    del _BuildAutomaton_836
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1047, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzimuthTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1047, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_837 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_837
    del _BuildAutomaton_837
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1048, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElevationTestPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1048, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_838 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_838
    del _BuildAutomaton_838
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1049, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1049, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_839 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_839
    del _BuildAutomaton_839
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1050, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScanSegmentNonInterleavedRaster._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1050, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_786 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_786
    del _BuildAutomaton_786
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 998, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 999, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1000, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1001, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1002, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1003, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1004, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1005, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1006, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1007, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1008, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1009, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1010, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1011, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1012, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1013, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1014, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1015, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1016, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1017, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1018, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1019, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1020, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1021, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1022, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1023, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1024, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1025, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1026, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1027, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1028, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1029, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1030, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1031, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1032, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1033, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1034, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1035, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1036, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1037, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1038, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1039, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1040, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1041, 6))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1042, 6))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1043, 6))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1044, 6))
    counters.add(cc_46)
    cc_47 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1045, 6))
    counters.add(cc_47)
    cc_48 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1046, 6))
    counters.add(cc_48)
    cc_49 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1047, 6))
    counters.add(cc_49)
    cc_50 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1048, 6))
    counters.add(cc_50)
    cc_51 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1049, 6))
    counters.add(cc_51)
    cc_52 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1050, 6))
    counters.add(cc_52)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_787())
    sub_automata.append(_BuildAutomaton_788())
    sub_automata.append(_BuildAutomaton_789())
    sub_automata.append(_BuildAutomaton_790())
    sub_automata.append(_BuildAutomaton_791())
    sub_automata.append(_BuildAutomaton_792())
    sub_automata.append(_BuildAutomaton_793())
    sub_automata.append(_BuildAutomaton_794())
    sub_automata.append(_BuildAutomaton_795())
    sub_automata.append(_BuildAutomaton_796())
    sub_automata.append(_BuildAutomaton_797())
    sub_automata.append(_BuildAutomaton_798())
    sub_automata.append(_BuildAutomaton_799())
    sub_automata.append(_BuildAutomaton_800())
    sub_automata.append(_BuildAutomaton_801())
    sub_automata.append(_BuildAutomaton_802())
    sub_automata.append(_BuildAutomaton_803())
    sub_automata.append(_BuildAutomaton_804())
    sub_automata.append(_BuildAutomaton_805())
    sub_automata.append(_BuildAutomaton_806())
    sub_automata.append(_BuildAutomaton_807())
    sub_automata.append(_BuildAutomaton_808())
    sub_automata.append(_BuildAutomaton_809())
    sub_automata.append(_BuildAutomaton_810())
    sub_automata.append(_BuildAutomaton_811())
    sub_automata.append(_BuildAutomaton_812())
    sub_automata.append(_BuildAutomaton_813())
    sub_automata.append(_BuildAutomaton_814())
    sub_automata.append(_BuildAutomaton_815())
    sub_automata.append(_BuildAutomaton_816())
    sub_automata.append(_BuildAutomaton_817())
    sub_automata.append(_BuildAutomaton_818())
    sub_automata.append(_BuildAutomaton_819())
    sub_automata.append(_BuildAutomaton_820())
    sub_automata.append(_BuildAutomaton_821())
    sub_automata.append(_BuildAutomaton_822())
    sub_automata.append(_BuildAutomaton_823())
    sub_automata.append(_BuildAutomaton_824())
    sub_automata.append(_BuildAutomaton_825())
    sub_automata.append(_BuildAutomaton_826())
    sub_automata.append(_BuildAutomaton_827())
    sub_automata.append(_BuildAutomaton_828())
    sub_automata.append(_BuildAutomaton_829())
    sub_automata.append(_BuildAutomaton_830())
    sub_automata.append(_BuildAutomaton_831())
    sub_automata.append(_BuildAutomaton_832())
    sub_automata.append(_BuildAutomaton_833())
    sub_automata.append(_BuildAutomaton_834())
    sub_automata.append(_BuildAutomaton_835())
    sub_automata.append(_BuildAutomaton_836())
    sub_automata.append(_BuildAutomaton_837())
    sub_automata.append(_BuildAutomaton_838())
    sub_automata.append(_BuildAutomaton_839())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 997, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScanSegmentNonInterleavedRaster._Automaton = _BuildAutomaton_786()




ctPulseSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSingle'), ctPulseSegmentSingle, scope=ctPulseSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1057, 6)))

ctPulseSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSeries'), ctPulseSegmentSeries, scope=ctPulseSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1058, 6)))

ctPulseSequence._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentCw'), ctPulseSegmentCw, scope=ctPulseSequence, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1059, 6)))

def _BuildAutomaton_840 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_840
    del _BuildAutomaton_840
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1055, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1057, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1058, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1059, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSingle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1057, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentSeries')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1058, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSequence._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseSegmentCw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1059, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPulseSequence._Automaton = _BuildAutomaton_840()




ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1065, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1066, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Erp'), stDoubleErp, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1067, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), stDoubleTransmitAttenuation, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1068, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), stDoublePulseWidth, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1069, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1070, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1071, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoublePulseDwellTime, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1072, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1073, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus'), stBoolSlowRiseTimeStatus, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1074, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1075, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), stBoolNoiseBandwidthState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1076, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), stDoubleNoiseBandwidth, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1077, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), stBoolModStatus, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1078, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus'), stBoolInterpulseModulationStatus, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1079, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind'), stEnumInterpulseModulationKind, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1080, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage'), stDoubleInterpulseModPriPercentage, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1081, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName'), stStringJitterDstrbName, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1082, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPulse, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1083, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName'), stTextInterpulseModulationPatternName, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1084, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation'), stDoubleInterpulseModulationPeakDeviation, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1085, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind'), stEnumInterpulseModulationPeriodKind, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1086, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses'), stIntInterpulseModulationPeriodPulses, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1087, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod'), stDoubleInterpulseModulationPeriod, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1088, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync'), stBoolInterpulseModulationPriSync, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1089, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), stBoolIntrapulseModulationStatus, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1090, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), stBoolDiscreteAmplitudeState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1091, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), ctAmplitudeCellList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1092, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), stBoolDiscreteFrequencyState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1093, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), ctFrequencyCellList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1095, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), stBoolDiscretePhaseShiftState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1096, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), stEnumBiQuadPhaseMode, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1097, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), ctPhaseCellList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1099, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), stBoolLinearFrequencyState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1100, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), ctLinearFreqModList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1102, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), stBoolHfimState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1104, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), ctHfimCellList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1106, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), stBoolExternalIqState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1108, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), ctExternalIqPatternList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1110, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState'), stBoolPulseGroupState, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1112, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind'), stEnumPulseGroupKind, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1113, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), stDoubleBurstPri, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1114, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), stDoubleBurstPulseWidth, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1115, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell'), stDoubleBurstDwell, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1116, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri'), stDoubleBurstModBasePri, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1117, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName'), stTextBurstModPatternName, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1118, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation'), stDoubleBurstModDeviation, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1119, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth'), stDoubleBurstModPulseWidth, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1120, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod'), stDoubleBurstModPeriod, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1121, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell'), stDoubleBurstModDwell, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1122, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells'), ctBurstPulseCellList, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1124, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime'), stDoubleStaggerModDwellTimeSinglePulse, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1126, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1127, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1128, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1129, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1130, 6)))

ctPulseSegmentSingle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPulseSegmentSingle, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1131, 6)))

def _BuildAutomaton_842 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_842
    del _BuildAutomaton_842
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1065, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1065, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_843 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_843
    del _BuildAutomaton_843
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1066, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1066, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_844 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_844
    del _BuildAutomaton_844
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1067, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Erp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1067, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_845 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_845
    del _BuildAutomaton_845
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1068, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1068, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_846 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_846
    del _BuildAutomaton_846
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1069, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1069, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_847 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_847
    del _BuildAutomaton_847
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1070, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1070, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_848 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_848
    del _BuildAutomaton_848
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1071, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1071, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_849 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_849
    del _BuildAutomaton_849
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1072, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1072, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_850 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_850
    del _BuildAutomaton_850
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1073, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1073, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_851 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_851
    del _BuildAutomaton_851
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1074, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1074, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_852 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_852
    del _BuildAutomaton_852
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1075, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1075, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_853 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_853
    del _BuildAutomaton_853
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1076, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1076, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_854 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_854
    del _BuildAutomaton_854
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1077, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1077, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_855 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_855
    del _BuildAutomaton_855
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1078, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1078, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_856 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_856
    del _BuildAutomaton_856
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1079, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1079, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_857 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_857
    del _BuildAutomaton_857
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1080, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1080, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_858 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_858
    del _BuildAutomaton_858
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1081, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1081, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_859 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_859
    del _BuildAutomaton_859
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1082, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1082, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_860 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_860
    del _BuildAutomaton_860
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1083, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1083, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_861 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_861
    del _BuildAutomaton_861
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1084, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1084, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_862 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_862
    del _BuildAutomaton_862
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1085, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1085, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_863 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_863
    del _BuildAutomaton_863
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1086, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1086, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_864 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_864
    del _BuildAutomaton_864
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1087, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1087, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_865 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_865
    del _BuildAutomaton_865
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1088, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1088, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_866 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_866
    del _BuildAutomaton_866
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1089, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1089, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_867 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_867
    del _BuildAutomaton_867
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1090, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1090, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_868 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_868
    del _BuildAutomaton_868
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1091, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1091, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_869 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_869
    del _BuildAutomaton_869
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1092, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1092, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_870 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_870
    del _BuildAutomaton_870
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1093, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1093, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_871 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_871
    del _BuildAutomaton_871
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1095, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1095, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_872 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_872
    del _BuildAutomaton_872
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1096, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1096, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_873 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_873
    del _BuildAutomaton_873
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1097, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1097, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_874 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_874
    del _BuildAutomaton_874
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1099, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1099, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_875 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_875
    del _BuildAutomaton_875
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1100, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1100, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_876 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_876
    del _BuildAutomaton_876
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1102, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1102, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_877 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_877
    del _BuildAutomaton_877
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1104, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1104, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_878 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_878
    del _BuildAutomaton_878
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1106, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1106, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_879 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_879
    del _BuildAutomaton_879
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1108, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1108, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_880 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_880
    del _BuildAutomaton_880
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1110, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_881 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_881
    del _BuildAutomaton_881
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1112, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1112, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_882 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_882
    del _BuildAutomaton_882
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1113, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1113, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_883 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_883
    del _BuildAutomaton_883
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1114, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1114, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_884 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_884
    del _BuildAutomaton_884
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1115, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1115, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_885 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_885
    del _BuildAutomaton_885
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1116, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1116, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_886 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_886
    del _BuildAutomaton_886
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1117, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1117, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_887 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_887
    del _BuildAutomaton_887
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1118, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1118, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_888 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_888
    del _BuildAutomaton_888
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1119, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1119, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_889 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_889
    del _BuildAutomaton_889
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1120, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1120, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_890 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_890
    del _BuildAutomaton_890
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1121, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1121, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_891 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_891
    del _BuildAutomaton_891
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1122, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1122, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_892 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_892
    del _BuildAutomaton_892
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1124, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_893 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_893
    del _BuildAutomaton_893
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1126, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1126, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_894 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_894
    del _BuildAutomaton_894
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1127, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1127, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_895 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_895
    del _BuildAutomaton_895
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1128, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1128, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_896 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_896
    del _BuildAutomaton_896
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1129, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1129, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_897 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_897
    del _BuildAutomaton_897
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1130, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1130, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_898 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_898
    del _BuildAutomaton_898
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1131, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSingle._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1131, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_841 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_841
    del _BuildAutomaton_841
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1065, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1066, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1067, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1068, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1069, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1070, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1071, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1072, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1073, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1074, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1075, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1076, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1077, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1078, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1079, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1080, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1081, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1082, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1083, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1084, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1085, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1086, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1087, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1088, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1089, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1090, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1091, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1092, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1093, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1095, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1096, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1097, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1099, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1100, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1102, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1104, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1106, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1108, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1110, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1112, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1113, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1114, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1115, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1116, 6))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1117, 6))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1118, 6))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1119, 6))
    counters.add(cc_46)
    cc_47 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1120, 6))
    counters.add(cc_47)
    cc_48 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1121, 6))
    counters.add(cc_48)
    cc_49 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1122, 6))
    counters.add(cc_49)
    cc_50 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1124, 6))
    counters.add(cc_50)
    cc_51 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1126, 6))
    counters.add(cc_51)
    cc_52 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1127, 6))
    counters.add(cc_52)
    cc_53 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1128, 6))
    counters.add(cc_53)
    cc_54 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1129, 6))
    counters.add(cc_54)
    cc_55 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1130, 6))
    counters.add(cc_55)
    cc_56 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1131, 6))
    counters.add(cc_56)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_842())
    sub_automata.append(_BuildAutomaton_843())
    sub_automata.append(_BuildAutomaton_844())
    sub_automata.append(_BuildAutomaton_845())
    sub_automata.append(_BuildAutomaton_846())
    sub_automata.append(_BuildAutomaton_847())
    sub_automata.append(_BuildAutomaton_848())
    sub_automata.append(_BuildAutomaton_849())
    sub_automata.append(_BuildAutomaton_850())
    sub_automata.append(_BuildAutomaton_851())
    sub_automata.append(_BuildAutomaton_852())
    sub_automata.append(_BuildAutomaton_853())
    sub_automata.append(_BuildAutomaton_854())
    sub_automata.append(_BuildAutomaton_855())
    sub_automata.append(_BuildAutomaton_856())
    sub_automata.append(_BuildAutomaton_857())
    sub_automata.append(_BuildAutomaton_858())
    sub_automata.append(_BuildAutomaton_859())
    sub_automata.append(_BuildAutomaton_860())
    sub_automata.append(_BuildAutomaton_861())
    sub_automata.append(_BuildAutomaton_862())
    sub_automata.append(_BuildAutomaton_863())
    sub_automata.append(_BuildAutomaton_864())
    sub_automata.append(_BuildAutomaton_865())
    sub_automata.append(_BuildAutomaton_866())
    sub_automata.append(_BuildAutomaton_867())
    sub_automata.append(_BuildAutomaton_868())
    sub_automata.append(_BuildAutomaton_869())
    sub_automata.append(_BuildAutomaton_870())
    sub_automata.append(_BuildAutomaton_871())
    sub_automata.append(_BuildAutomaton_872())
    sub_automata.append(_BuildAutomaton_873())
    sub_automata.append(_BuildAutomaton_874())
    sub_automata.append(_BuildAutomaton_875())
    sub_automata.append(_BuildAutomaton_876())
    sub_automata.append(_BuildAutomaton_877())
    sub_automata.append(_BuildAutomaton_878())
    sub_automata.append(_BuildAutomaton_879())
    sub_automata.append(_BuildAutomaton_880())
    sub_automata.append(_BuildAutomaton_881())
    sub_automata.append(_BuildAutomaton_882())
    sub_automata.append(_BuildAutomaton_883())
    sub_automata.append(_BuildAutomaton_884())
    sub_automata.append(_BuildAutomaton_885())
    sub_automata.append(_BuildAutomaton_886())
    sub_automata.append(_BuildAutomaton_887())
    sub_automata.append(_BuildAutomaton_888())
    sub_automata.append(_BuildAutomaton_889())
    sub_automata.append(_BuildAutomaton_890())
    sub_automata.append(_BuildAutomaton_891())
    sub_automata.append(_BuildAutomaton_892())
    sub_automata.append(_BuildAutomaton_893())
    sub_automata.append(_BuildAutomaton_894())
    sub_automata.append(_BuildAutomaton_895())
    sub_automata.append(_BuildAutomaton_896())
    sub_automata.append(_BuildAutomaton_897())
    sub_automata.append(_BuildAutomaton_898())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1064, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPulseSegmentSingle._Automaton = _BuildAutomaton_841()




ctAmplitudeCellList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCell'), ctAmplitudeCell, scope=ctAmplitudeCellList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1137, 6)))

def _BuildAutomaton_899 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_899
    del _BuildAutomaton_899
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=256, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1136, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctAmplitudeCellList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1137, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctAmplitudeCellList._Automaton = _BuildAutomaton_899()




ctAmplitudeCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCellSize'), stDoubleAmplitudeCellSize, scope=ctAmplitudeCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1143, 6)))

ctAmplitudeCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Attenuation'), stDoubleAttenuation, scope=ctAmplitudeCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1144, 6)))

def _BuildAutomaton_901 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_901
    del _BuildAutomaton_901
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1143, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctAmplitudeCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCellSize')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1143, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_902 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_902
    del _BuildAutomaton_902
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1144, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctAmplitudeCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Attenuation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1144, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_900 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_900
    del _BuildAutomaton_900
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1143, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1144, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_901())
    sub_automata.append(_BuildAutomaton_902())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1142, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctAmplitudeCell._Automaton = _BuildAutomaton_900()




ctFrequencyCellList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCell'), ctFrequencyCell, scope=ctFrequencyCellList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1150, 6)))

def _BuildAutomaton_903 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_903
    del _BuildAutomaton_903
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=256, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1149, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencyCellList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1150, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencyCellList._Automaton = _BuildAutomaton_903()




ctFrequencyCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCellSize'), stDoubleFrequencyCellSize, scope=ctFrequencyCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1156, 6)))

ctFrequencyCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDeviation'), stDoubleFrequencyDeviation, scope=ctFrequencyCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1157, 6)))

def _BuildAutomaton_905 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_905
    del _BuildAutomaton_905
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1156, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencyCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCellSize')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1156, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_906 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_906
    del _BuildAutomaton_906
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1157, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctFrequencyCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1157, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_904 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_904
    del _BuildAutomaton_904
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1156, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1157, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_905())
    sub_automata.append(_BuildAutomaton_906())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1155, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctFrequencyCell._Automaton = _BuildAutomaton_904()




ctPhaseCellList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseCell'), ctPhaseCell, scope=ctPhaseCellList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1163, 6)))

def _BuildAutomaton_907 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_907
    del _BuildAutomaton_907
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=256, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1162, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPhaseCellList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseCell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1163, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPhaseCellList._Automaton = _BuildAutomaton_907()




ctPhaseCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseCellSize'), stDoublePhaseCellSize, scope=ctPhaseCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1169, 6)))

ctPhaseCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseShiftKind'), stEnumPhaseShiftKind, scope=ctPhaseCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1170, 6)))

def _BuildAutomaton_909 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_909
    del _BuildAutomaton_909
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1169, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPhaseCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseCellSize')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1169, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_910 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_910
    del _BuildAutomaton_910
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1170, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPhaseCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseShiftKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1170, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_908 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_908
    del _BuildAutomaton_908
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1169, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1170, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_909())
    sub_automata.append(_BuildAutomaton_910())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1168, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPhaseCell._Automaton = _BuildAutomaton_908()




ctLinearFreqModList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMod'), ctLinearFreqMod, scope=ctLinearFreqModList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1176, 6)))

def _BuildAutomaton_911 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_911
    del _BuildAutomaton_911
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=256, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1175, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLinearFreqModList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1176, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctLinearFreqModList._Automaton = _BuildAutomaton_911()




ctLinearFreqMod._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDeviation'), stDoubleLinearFreqDeviation, scope=ctLinearFreqMod, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1182, 6)))

ctLinearFreqMod._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDuration'), stDoubleLinearFreqDuration, scope=ctLinearFreqMod, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1183, 6)))

ctLinearFreqMod._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqResetFlag'), stBoolLinearFreqResetFlag, scope=ctLinearFreqMod, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1184, 6)))

def _BuildAutomaton_913 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_913
    del _BuildAutomaton_913
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1182, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLinearFreqMod._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1182, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_914 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_914
    del _BuildAutomaton_914
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1183, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLinearFreqMod._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1183, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_915 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_915
    del _BuildAutomaton_915
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1184, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLinearFreqMod._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqResetFlag')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1184, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_912 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_912
    del _BuildAutomaton_912
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1182, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1183, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1184, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_913())
    sub_automata.append(_BuildAutomaton_914())
    sub_automata.append(_BuildAutomaton_915())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1181, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctLinearFreqMod._Automaton = _BuildAutomaton_912()




ctHfimCellList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimCell'), ctHfimCell, scope=ctHfimCellList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1190, 6)))

def _BuildAutomaton_916 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_916
    del _BuildAutomaton_916
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1024, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1189, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHfimCellList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimCell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1190, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctHfimCellList._Automaton = _BuildAutomaton_916()




ctHfimCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimSize'), stDoubleHfimSize, scope=ctHfimCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1196, 6)))

ctHfimCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimSampleName'), stTextHfimSampleName, scope=ctHfimCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1197, 6)))

ctHfimCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimSamplePeriodKind'), stEnumHfimSamplePeriodKind, scope=ctHfimCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1198, 6)))

def _BuildAutomaton_918 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_918
    del _BuildAutomaton_918
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1196, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHfimCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimSize')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1196, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_919 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_919
    del _BuildAutomaton_919
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1197, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHfimCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimSampleName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1197, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_920 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_920
    del _BuildAutomaton_920
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1198, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHfimCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimSamplePeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1198, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_917 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_917
    del _BuildAutomaton_917
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1196, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1197, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1198, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_918())
    sub_automata.append(_BuildAutomaton_919())
    sub_automata.append(_BuildAutomaton_920())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1195, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctHfimCell._Automaton = _BuildAutomaton_917()




ctExternalIqPatternList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPattern'), ctExternalIqPattern, scope=ctExternalIqPatternList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1204, 6)))

def _BuildAutomaton_921 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_921
    del _BuildAutomaton_921
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1203, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPatternList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPattern')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1204, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctExternalIqPatternList._Automaton = _BuildAutomaton_921()




ctExternalIqPattern._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatternName'), stTextExternalIqPatternName, scope=ctExternalIqPattern, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1210, 6)))

ctExternalIqPattern._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqNumberOfSamples'), stUnsignedLongExternalIqNumberOfSamples, scope=ctExternalIqPattern, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1211, 6)))

ctExternalIqPattern._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqSampleRate'), stEnumExternalIqSampleRateKind, scope=ctExternalIqPattern, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1212, 6)))

ctExternalIqPattern._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqUpsampleData'), stBoolExternalIqUpsampleData, scope=ctExternalIqPattern, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1213, 6)))

ctExternalIqPattern._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqLoopPatternData'), stBoolExternalIqLoopPatternData, scope=ctExternalIqPattern, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1214, 6)))

def _BuildAutomaton_923 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_923
    del _BuildAutomaton_923
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1210, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPattern._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1210, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_924 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_924
    del _BuildAutomaton_924
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1211, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPattern._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqNumberOfSamples')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1211, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_925 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_925
    del _BuildAutomaton_925
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1212, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPattern._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqSampleRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1212, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_926 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_926
    del _BuildAutomaton_926
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1213, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPattern._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqUpsampleData')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1213, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_927 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_927
    del _BuildAutomaton_927
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1214, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctExternalIqPattern._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqLoopPatternData')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1214, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_922 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_922
    del _BuildAutomaton_922
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1210, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1211, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1212, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1213, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1214, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_923())
    sub_automata.append(_BuildAutomaton_924())
    sub_automata.append(_BuildAutomaton_925())
    sub_automata.append(_BuildAutomaton_926())
    sub_automata.append(_BuildAutomaton_927())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1209, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctExternalIqPattern._Automaton = _BuildAutomaton_922()




ctBurstPulseCellList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCell'), ctBurstPulseCell, scope=ctBurstPulseCellList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1220, 6)))

def _BuildAutomaton_928 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_928
    del _BuildAutomaton_928
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=128, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1219, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBurstPulseCellList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1220, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBurstPulseCellList._Automaton = _BuildAutomaton_928()




ctBurstPulseCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), stDoubleBurstPri, scope=ctBurstPulseCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1226, 6)))

ctBurstPulseCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), stDoubleBurstPulseWidth, scope=ctBurstPulseCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1227, 6)))

ctBurstPulseCell._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseDuration'), stDoubleBurstPulseDuration, scope=ctBurstPulseCell, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1228, 6)))

def _BuildAutomaton_930 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_930
    del _BuildAutomaton_930
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1226, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBurstPulseCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1226, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_931 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_931
    del _BuildAutomaton_931
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1227, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBurstPulseCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1227, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_932 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_932
    del _BuildAutomaton_932
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1228, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctBurstPulseCell._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1228, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_929 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_929
    del _BuildAutomaton_929
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1226, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1227, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1228, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_930())
    sub_automata.append(_BuildAutomaton_931())
    sub_automata.append(_BuildAutomaton_932())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1225, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctBurstPulseCell._Automaton = _BuildAutomaton_929()




ctPulseSegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPulseSegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1234, 6)))

ctPulseSegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPulseSegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1235, 6)))

ctPulseSegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPulseSegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1236, 6)))

ctPulseSegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPulseSegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1237, 6)))

ctPulseSegmentSeries._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Subsegments'), ctSeriesPulseSegmentList, scope=ctPulseSegmentSeries, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1238, 6)))

def _BuildAutomaton_934 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_934
    del _BuildAutomaton_934
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1234, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1234, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_935 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_935
    del _BuildAutomaton_935
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1235, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1235, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_936 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_936
    del _BuildAutomaton_936
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1236, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1236, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_937 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_937
    del _BuildAutomaton_937
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1237, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1237, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_938 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_938
    del _BuildAutomaton_938
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1238, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentSeries._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Subsegments')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1238, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_933 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_933
    del _BuildAutomaton_933
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1234, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1235, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1236, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1237, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1238, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_934())
    sub_automata.append(_BuildAutomaton_935())
    sub_automata.append(_BuildAutomaton_936())
    sub_automata.append(_BuildAutomaton_937())
    sub_automata.append(_BuildAutomaton_938())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1233, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPulseSegmentSeries._Automaton = _BuildAutomaton_933()




ctSeriesPulseSegmentList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SeriesPulseSegment'), ctSeriesPulseSegment, scope=ctSeriesPulseSegmentList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1244, 6)))

def _BuildAutomaton_939 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_939
    del _BuildAutomaton_939
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1243, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegmentList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SeriesPulseSegment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1244, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSeriesPulseSegmentList._Automaton = _BuildAutomaton_939()




ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Erp'), stDoubleErp, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1250, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), stDoubleTransmitAttenuation, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1251, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), stDoublePulseWidth, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1252, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus'), stBoolDwellStatus, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1253, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellKind'), stEnumDwellKind, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1254, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoublePulseDwellTime, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1255, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses'), stIntDwellTimePulses, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1256, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus'), stBoolSlowRiseTimeStatus, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1257, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1258, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), stBoolNoiseBandwidthState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1259, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), stDoubleNoiseBandwidth, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1260, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModStatus'), stBoolModStatus, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1261, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus'), stBoolInterpulseModulationStatus, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1262, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind'), stEnumInterpulseModulationKind, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1263, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage'), stDoubleInterpulseModPriPercentage, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1264, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName'), stStringJitterDstrbName, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1265, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit'), stDoubleJitterLimitPulse, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1266, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName'), stTextInterpulseModulationPatternName, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1267, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation'), stDoubleInterpulseModulationPeakDeviation, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1268, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind'), stEnumInterpulseModulationPeriodKind, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1269, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses'), stIntInterpulseModulationPeriodPulses, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1270, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod'), stDoubleInterpulseModulationPeriod, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1271, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync'), stBoolInterpulseModulationPriSync, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1272, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), stBoolIntrapulseModulationStatus, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1273, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), stBoolDiscreteAmplitudeState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1274, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), ctAmplitudeCellList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1276, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), stBoolDiscreteFrequencyState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1278, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), ctFrequencyCellList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1280, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), stBoolDiscretePhaseShiftState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1282, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), stEnumBiQuadPhaseMode, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1283, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), ctPhaseCellList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1285, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), stBoolLinearFrequencyState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1287, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), ctLinearFreqModList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1289, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), stBoolHfimState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1290, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), ctHfimCellList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1292, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), stBoolExternalIqState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1294, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), ctExternalIqPatternList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1296, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState'), stBoolPulseGroupState, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1298, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind'), stEnumPulseGroupKind, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1299, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPri'), stDoubleBurstPri, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1300, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth'), stDoubleBurstPulseWidth, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1301, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell'), stDoubleBurstDwell, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1302, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri'), stDoubleBurstModBasePri, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1303, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName'), stTextBurstModPatternName, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1304, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation'), stDoubleBurstModDeviation, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1305, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth'), stDoubleBurstModPulseWidth, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1306, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod'), stDoubleBurstModPeriod, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1307, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell'), stDoubleBurstModDwell, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1308, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells'), ctBurstPulseCellList, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1309, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime'), stDoubleStaggerModDwellTime, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1310, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1311, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1312, 6)))

ctSeriesPulseSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctSeriesPulseSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1313, 6)))

def _BuildAutomaton_941 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_941
    del _BuildAutomaton_941
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1250, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Erp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1250, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_942 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_942
    del _BuildAutomaton_942
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1251, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1251, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_943 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_943
    del _BuildAutomaton_943
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1252, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1252, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_944 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_944
    del _BuildAutomaton_944
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1253, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1253, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_945 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_945
    del _BuildAutomaton_945
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1254, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1254, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_946 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_946
    del _BuildAutomaton_946
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1255, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1255, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_947 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_947
    del _BuildAutomaton_947
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1256, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTimePulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1256, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_948 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_948
    del _BuildAutomaton_948
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1257, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SlowRiseTimeStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1257, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_949 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_949
    del _BuildAutomaton_949
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1258, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1258, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_950 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_950
    del _BuildAutomaton_950
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1259, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1259, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_951 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_951
    del _BuildAutomaton_951
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1260, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1260, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_952 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_952
    del _BuildAutomaton_952
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1261, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1261, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_953 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_953
    del _BuildAutomaton_953
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1262, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1262, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_954 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_954
    del _BuildAutomaton_954
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1263, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1263, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_955 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_955
    del _BuildAutomaton_955
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1264, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModPriPercentage')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1264, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_956 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_956
    del _BuildAutomaton_956
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1265, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterDstrbName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1265, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_957 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_957
    del _BuildAutomaton_957
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1266, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'JitterLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1266, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_958 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_958
    del _BuildAutomaton_958
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1267, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1267, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_959 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_959
    del _BuildAutomaton_959
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1268, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeakDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1268, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_960 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_960
    del _BuildAutomaton_960
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1269, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1269, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_961 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_961
    del _BuildAutomaton_961
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1270, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriodPulses')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1270, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_962 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_962
    del _BuildAutomaton_962
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1271, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1271, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_963 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_963
    del _BuildAutomaton_963
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1272, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterpulseModulationPriSync')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1272, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_964 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_964
    del _BuildAutomaton_964
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1273, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1273, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_965 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_965
    del _BuildAutomaton_965
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1274, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1274, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_966 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_966
    del _BuildAutomaton_966
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1276, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1276, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_967 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_967
    del _BuildAutomaton_967
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1278, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1278, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_968 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_968
    del _BuildAutomaton_968
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1280, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1280, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_969 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_969
    del _BuildAutomaton_969
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1282, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1282, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_970 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_970
    del _BuildAutomaton_970
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1283, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1283, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_971 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_971
    del _BuildAutomaton_971
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1285, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1285, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_972 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_972
    del _BuildAutomaton_972
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1287, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1287, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_973 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_973
    del _BuildAutomaton_973
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1289, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_974 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_974
    del _BuildAutomaton_974
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1290, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1290, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_975 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_975
    del _BuildAutomaton_975
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1292, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1292, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_976 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_976
    del _BuildAutomaton_976
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1294, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1294, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_977 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_977
    del _BuildAutomaton_977
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1296, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1296, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_978 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_978
    del _BuildAutomaton_978
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1298, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1298, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_979 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_979
    del _BuildAutomaton_979
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1299, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseGroupKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1299, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_980 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_980
    del _BuildAutomaton_980
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1300, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_981 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_981
    del _BuildAutomaton_981
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1301, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1301, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_982 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_982
    del _BuildAutomaton_982
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1302, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1302, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_983 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_983
    del _BuildAutomaton_983
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1303, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModBasePri')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1303, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_984 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_984
    del _BuildAutomaton_984
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1304, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPatternName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1304, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_985 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_985
    del _BuildAutomaton_985
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1305, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModDeviation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1305, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_986 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_986
    del _BuildAutomaton_986
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1306, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1306, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_987 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_987
    del _BuildAutomaton_987
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1307, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModPeriod')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_988 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_988
    del _BuildAutomaton_988
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1308, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstModDwell')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1308, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_989 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_989
    del _BuildAutomaton_989
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1309, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BurstPulseCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1309, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_990 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_990
    del _BuildAutomaton_990
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1310, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StaggerModDwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1310, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_991 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_991
    del _BuildAutomaton_991
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1311, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1311, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_992 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_992
    del _BuildAutomaton_992
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1312, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1312, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_993 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_993
    del _BuildAutomaton_993
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1313, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSeriesPulseSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1313, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_940 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_940
    del _BuildAutomaton_940
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1250, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1251, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1252, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1253, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1254, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1255, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1256, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1257, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1258, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1259, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1260, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1261, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1262, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1263, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1264, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1265, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1266, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1267, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1268, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1269, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1270, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1271, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1272, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1273, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1274, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1276, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1278, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1280, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1282, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1283, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1285, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1287, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1289, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1290, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1292, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1294, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1296, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1298, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1299, 6))
    counters.add(cc_38)
    cc_39 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1300, 6))
    counters.add(cc_39)
    cc_40 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1301, 6))
    counters.add(cc_40)
    cc_41 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1302, 6))
    counters.add(cc_41)
    cc_42 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1303, 6))
    counters.add(cc_42)
    cc_43 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1304, 6))
    counters.add(cc_43)
    cc_44 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1305, 6))
    counters.add(cc_44)
    cc_45 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1306, 6))
    counters.add(cc_45)
    cc_46 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1307, 6))
    counters.add(cc_46)
    cc_47 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1308, 6))
    counters.add(cc_47)
    cc_48 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1309, 6))
    counters.add(cc_48)
    cc_49 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1310, 6))
    counters.add(cc_49)
    cc_50 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1311, 6))
    counters.add(cc_50)
    cc_51 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1312, 6))
    counters.add(cc_51)
    cc_52 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1313, 6))
    counters.add(cc_52)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_941())
    sub_automata.append(_BuildAutomaton_942())
    sub_automata.append(_BuildAutomaton_943())
    sub_automata.append(_BuildAutomaton_944())
    sub_automata.append(_BuildAutomaton_945())
    sub_automata.append(_BuildAutomaton_946())
    sub_automata.append(_BuildAutomaton_947())
    sub_automata.append(_BuildAutomaton_948())
    sub_automata.append(_BuildAutomaton_949())
    sub_automata.append(_BuildAutomaton_950())
    sub_automata.append(_BuildAutomaton_951())
    sub_automata.append(_BuildAutomaton_952())
    sub_automata.append(_BuildAutomaton_953())
    sub_automata.append(_BuildAutomaton_954())
    sub_automata.append(_BuildAutomaton_955())
    sub_automata.append(_BuildAutomaton_956())
    sub_automata.append(_BuildAutomaton_957())
    sub_automata.append(_BuildAutomaton_958())
    sub_automata.append(_BuildAutomaton_959())
    sub_automata.append(_BuildAutomaton_960())
    sub_automata.append(_BuildAutomaton_961())
    sub_automata.append(_BuildAutomaton_962())
    sub_automata.append(_BuildAutomaton_963())
    sub_automata.append(_BuildAutomaton_964())
    sub_automata.append(_BuildAutomaton_965())
    sub_automata.append(_BuildAutomaton_966())
    sub_automata.append(_BuildAutomaton_967())
    sub_automata.append(_BuildAutomaton_968())
    sub_automata.append(_BuildAutomaton_969())
    sub_automata.append(_BuildAutomaton_970())
    sub_automata.append(_BuildAutomaton_971())
    sub_automata.append(_BuildAutomaton_972())
    sub_automata.append(_BuildAutomaton_973())
    sub_automata.append(_BuildAutomaton_974())
    sub_automata.append(_BuildAutomaton_975())
    sub_automata.append(_BuildAutomaton_976())
    sub_automata.append(_BuildAutomaton_977())
    sub_automata.append(_BuildAutomaton_978())
    sub_automata.append(_BuildAutomaton_979())
    sub_automata.append(_BuildAutomaton_980())
    sub_automata.append(_BuildAutomaton_981())
    sub_automata.append(_BuildAutomaton_982())
    sub_automata.append(_BuildAutomaton_983())
    sub_automata.append(_BuildAutomaton_984())
    sub_automata.append(_BuildAutomaton_985())
    sub_automata.append(_BuildAutomaton_986())
    sub_automata.append(_BuildAutomaton_987())
    sub_automata.append(_BuildAutomaton_988())
    sub_automata.append(_BuildAutomaton_989())
    sub_automata.append(_BuildAutomaton_990())
    sub_automata.append(_BuildAutomaton_991())
    sub_automata.append(_BuildAutomaton_992())
    sub_automata.append(_BuildAutomaton_993())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1249, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSeriesPulseSegment._Automaton = _BuildAutomaton_940()




ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber'), stIntSegmentNumber, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1319, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SegmentName'), stStringSegmentName, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1320, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Erp'), stDoubleErp, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1321, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation'), stDoubleTransmitAttenuation, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1322, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DwellTime'), stDoublePulseDwellTime, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1323, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState'), stBoolPulseInvisibleState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1324, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState'), stBoolNoiseBandwidthState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1325, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth'), stDoubleNoiseBandwidth, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1326, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus'), stBoolIntrapulseModulationStatus, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1327, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState'), stBoolDiscreteAmplitudeState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1328, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells'), ctAmplitudeCellList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1330, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState'), stBoolDiscreteFrequencyState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1331, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells'), ctFrequencyCellList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1333, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState'), stBoolDiscretePhaseShiftState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1335, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode'), stEnumBiQuadPhaseMode, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1336, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells'), ctPhaseCellList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1338, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState'), stBoolLinearFrequencyState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1340, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods'), ctLinearFreqModList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1342, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimState'), stBoolHfimState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1344, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HfimCells'), ctHfimCellList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1346, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState'), stBoolExternalIqState, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1348, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns'), ctExternalIqPatternList, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1350, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger'), stBoolFrequencyTrigger, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1352, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger'), stBoolPriTrigger, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1353, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger'), stBoolScanTrigger, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1354, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink'), stIntExternalLinkSegment, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1355, 6)))

ctPulseSegmentCw._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NormalLink'), stIntNormalLinkSegment, scope=ctPulseSegmentCw, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1356, 6)))

def _BuildAutomaton_995 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_995
    del _BuildAutomaton_995
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1319, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1319, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_996 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_996
    del _BuildAutomaton_996
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1320, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SegmentName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1320, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_997 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_997
    del _BuildAutomaton_997
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1321, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Erp')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1321, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_998 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_998
    del _BuildAutomaton_998
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1322, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TransmitAttenuation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1322, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_999 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_999
    del _BuildAutomaton_999
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1323, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DwellTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1323, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1000 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1000
    del _BuildAutomaton_1000
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1324, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInvisibleState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1324, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1001 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1001
    del _BuildAutomaton_1001
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1325, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidthState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1325, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1002 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1002
    del _BuildAutomaton_1002
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1326, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NoiseBandwidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1326, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1003 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1003
    del _BuildAutomaton_1003
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1327, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'IntrapulseModulationStatus')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1327, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1004 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1004
    del _BuildAutomaton_1004
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1328, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteAmplitudeState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1328, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1005 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1005
    del _BuildAutomaton_1005
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1330, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AmplitudeCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1330, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1006 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1006
    del _BuildAutomaton_1006
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1331, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscreteFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1007 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1007
    del _BuildAutomaton_1007
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1333, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1333, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1008 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1008
    del _BuildAutomaton_1008
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1335, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DiscretePhaseShiftState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1335, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1009 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1009
    del _BuildAutomaton_1009
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1336, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BiQuadPhaseMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1336, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1010 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1010
    del _BuildAutomaton_1010
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1338, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PhaseCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1338, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1011 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1011
    del _BuildAutomaton_1011
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1340, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFrequencyState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1340, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1012 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1012
    del _BuildAutomaton_1012
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1342, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LinearFreqMods')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1342, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1013 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1013
    del _BuildAutomaton_1013
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1344, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1344, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1014 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1014
    del _BuildAutomaton_1014
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1346, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HfimCells')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1346, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1015 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1015
    del _BuildAutomaton_1015
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1348, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1348, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1016 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1016
    del _BuildAutomaton_1016
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1350, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalIqPatterns')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1350, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1017 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1017
    del _BuildAutomaton_1017
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1352, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1352, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1018 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1018
    del _BuildAutomaton_1018
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1353, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PriTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1353, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1019 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1019
    del _BuildAutomaton_1019
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1354, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScanTrigger')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1354, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1020 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1020
    del _BuildAutomaton_1020
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1355, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1355, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1021 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1021
    del _BuildAutomaton_1021
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1356, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPulseSegmentCw._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NormalLink')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1356, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_994 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_994
    del _BuildAutomaton_994
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1319, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1320, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1321, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1322, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1323, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1324, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1325, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1326, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1327, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1328, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1330, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1331, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1333, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1335, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1336, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1338, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1340, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1342, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1344, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1346, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1348, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1350, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1352, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1353, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1354, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1355, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1356, 6))
    counters.add(cc_26)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_995())
    sub_automata.append(_BuildAutomaton_996())
    sub_automata.append(_BuildAutomaton_997())
    sub_automata.append(_BuildAutomaton_998())
    sub_automata.append(_BuildAutomaton_999())
    sub_automata.append(_BuildAutomaton_1000())
    sub_automata.append(_BuildAutomaton_1001())
    sub_automata.append(_BuildAutomaton_1002())
    sub_automata.append(_BuildAutomaton_1003())
    sub_automata.append(_BuildAutomaton_1004())
    sub_automata.append(_BuildAutomaton_1005())
    sub_automata.append(_BuildAutomaton_1006())
    sub_automata.append(_BuildAutomaton_1007())
    sub_automata.append(_BuildAutomaton_1008())
    sub_automata.append(_BuildAutomaton_1009())
    sub_automata.append(_BuildAutomaton_1010())
    sub_automata.append(_BuildAutomaton_1011())
    sub_automata.append(_BuildAutomaton_1012())
    sub_automata.append(_BuildAutomaton_1013())
    sub_automata.append(_BuildAutomaton_1014())
    sub_automata.append(_BuildAutomaton_1015())
    sub_automata.append(_BuildAutomaton_1016())
    sub_automata.append(_BuildAutomaton_1017())
    sub_automata.append(_BuildAutomaton_1018())
    sub_automata.append(_BuildAutomaton_1019())
    sub_automata.append(_BuildAutomaton_1020())
    sub_automata.append(_BuildAutomaton_1021())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1318, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPulseSegmentCw._Automaton = _BuildAutomaton_994()




ctEmitterSubmode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodeHeader'), ctEmitterSubmodeHeader, scope=ctEmitterSubmode, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1362, 6)))

ctEmitterSubmode._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumbers'), ctGeneratorNumberList, scope=ctEmitterSubmode, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1363, 6)))

def _BuildAutomaton_1023 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1023
    del _BuildAutomaton_1023
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmode._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterSubmodeHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1362, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1024 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1024
    del _BuildAutomaton_1024
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1363, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmode._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumbers')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1363, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1022 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1022
    del _BuildAutomaton_1022
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1363, 6))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1023())
    sub_automata.append(_BuildAutomaton_1024())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1361, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterSubmode._Automaton = _BuildAutomaton_1022()




ctEmitterSubmodeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubmodeId'), stIntSubmodeId, scope=ctEmitterSubmodeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1374, 6)))

ctEmitterSubmodeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SubmodeName'), stStringSubmodeName, scope=ctEmitterSubmodeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1375, 6)))

ctEmitterSubmodeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode'), stBoolPgpDefaultMode, scope=ctEmitterSubmodeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1376, 6)))

ctEmitterSubmodeHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode'), stBoolPgpDropTrackMode, scope=ctEmitterSubmodeHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1377, 6)))

def _BuildAutomaton_1026 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1026
    del _BuildAutomaton_1026
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmodeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubmodeId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1374, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1027 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1027
    del _BuildAutomaton_1027
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmodeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SubmodeName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1375, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1028 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1028
    del _BuildAutomaton_1028
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1376, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmodeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PgpDefaultMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1376, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1029 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1029
    del _BuildAutomaton_1029
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1377, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterSubmodeHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PgpDropTrackMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1377, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1025 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1025
    del _BuildAutomaton_1025
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1376, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1377, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1026())
    sub_automata.append(_BuildAutomaton_1027())
    sub_automata.append(_BuildAutomaton_1028())
    sub_automata.append(_BuildAutomaton_1029())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1373, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterSubmodeHeader._Automaton = _BuildAutomaton_1025()




ctGeneratorNumberList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber'), stIntSubmodeGeneratorNumber, scope=ctGeneratorNumberList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1383, 6)))

def _BuildAutomaton_1030 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1030
    del _BuildAutomaton_1030
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=32, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1382, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGeneratorNumberList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeneratorNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/modeDataR1-2.xsd', 1383, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGeneratorNumberList._Automaton = _BuildAutomaton_1030()




ctPlatformData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader'), ctPlatformHeader, scope=ctPlatformData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 41, 6)))

def _BuildAutomaton_1031 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1031
    del _BuildAutomaton_1031
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctPlatformData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 41, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctPlatformData._Automaton = _BuildAutomaton_1031()




ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UserPlatformNumber'), stIntUserPlatformNumber, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 48, 6)))

ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformId'), stStringPlatformId, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 49, 6)))

ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SymbolKind'), stTextSymbolKind, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 50, 6)))

ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ActivationTime'), stDoubleActivationTime, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 51, 6)))

ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpeedUnits'), stEnumSpeedUnits, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 52, 6)))

ctPlatformHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate'), stDateModificationDate, scope=ctPlatformHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 53, 6)))

def _BuildAutomaton_1033 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1033
    del _BuildAutomaton_1033
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UserPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 48, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1034 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1034
    del _BuildAutomaton_1034
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 49, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1035 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1035
    del _BuildAutomaton_1035
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 50, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SymbolKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 50, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1036 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1036
    del _BuildAutomaton_1036
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 51, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ActivationTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 51, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1037 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1037
    del _BuildAutomaton_1037
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 52, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpeedUnits')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1038 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1038
    del _BuildAutomaton_1038
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 53, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LastUpdateDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 53, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1032 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1032
    del _BuildAutomaton_1032
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 50, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 51, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 52, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 53, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1033())
    sub_automata.append(_BuildAutomaton_1034())
    sub_automata.append(_BuildAutomaton_1035())
    sub_automata.append(_BuildAutomaton_1036())
    sub_automata.append(_BuildAutomaton_1037())
    sub_automata.append(_BuildAutomaton_1038())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformDataR1-1.xsd', 47, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctPlatformHeader._Automaton = _BuildAutomaton_1032()




ctPlatformScriptEventList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformScriptEvent'), ctPlatformScriptEvent, scope=ctPlatformScriptEventList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 44, 6)))

def _BuildAutomaton_1039 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1039
    del _BuildAutomaton_1039
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 43, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformScriptEventList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformScriptEvent')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 44, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPlatformScriptEventList._Automaton = _BuildAutomaton_1039()




ctPlatformScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartTime'), stDoubleStartTime, scope=ctPlatformScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 51, 6)))

ctPlatformScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Deactivate'), stBoolDeactivate, scope=ctPlatformScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 52, 6)))

ctPlatformScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Segment'), ctPathSegment, scope=ctPlatformScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 53, 6)))

ctPlatformScriptEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intercept'), ctInterceptSegment, scope=ctPlatformScriptEvent, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 54, 6)))

def _BuildAutomaton_1041 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1041
    del _BuildAutomaton_1041
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 51, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 51, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1042 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1042
    del _BuildAutomaton_1042
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 52, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Deactivate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1043 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1043
    del _BuildAutomaton_1043
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 53, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Segment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 53, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1044 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1044
    del _BuildAutomaton_1044
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 54, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformScriptEvent._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intercept')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 54, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1040 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1040
    del _BuildAutomaton_1040
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 51, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 52, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 53, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 54, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1041())
    sub_automata.append(_BuildAutomaton_1042())
    sub_automata.append(_BuildAutomaton_1043())
    sub_automata.append(_BuildAutomaton_1044())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 50, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPlatformScriptEvent._Automaton = _BuildAutomaton_1040()




ctPathSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Point'), ctPointSegment, scope=ctPathSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 60, 6)))

ctPathSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Line'), ctLineSegment, scope=ctPathSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 61, 6)))

ctPathSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Arc'), ctArcSegment, scope=ctPathSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 62, 6)))

ctPathSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Compound'), ctCompoundSegment, scope=ctPathSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 63, 6)))

def _BuildAutomaton_1045 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1045
    del _BuildAutomaton_1045
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 59, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 60, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 61, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 62, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 63, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctPathSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Point')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctPathSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Line')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 61, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctPathSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Arc')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 62, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ctPathSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Compound')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 63, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPathSegment._Automaton = _BuildAutomaton_1045()




ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), stEnumAltitudeKind, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 69, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), stBoolFirstSegmentOnPath, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 70, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), ctPoint, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 71, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable'), stBoolCoupledMotionEnable, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 72, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), stDoubleStartRoll, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 73, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), stDoubleStartPitch, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 74, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), stDoubleStartYaw, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 75, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), stDoubleRollRate, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 76, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PitchRate'), stDoublePitchRate, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 77, 6)))

ctPointSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'YawRate'), stDoubleYawRate, scope=ctPointSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 78, 6)))

def _BuildAutomaton_1047 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1047
    del _BuildAutomaton_1047
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 69, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 69, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1048 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1048
    del _BuildAutomaton_1048
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 70, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 70, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1049 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1049
    del _BuildAutomaton_1049
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 71, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 71, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1050 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1050
    del _BuildAutomaton_1050
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 72, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 72, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1051 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1051
    del _BuildAutomaton_1051
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 73, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 73, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1052 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1052
    del _BuildAutomaton_1052
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 74, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1053 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1053
    del _BuildAutomaton_1053
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 75, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 75, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1054 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1054
    del _BuildAutomaton_1054
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 76, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RollRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 76, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1055 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1055
    del _BuildAutomaton_1055
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 77, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PitchRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 77, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1056 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1056
    del _BuildAutomaton_1056
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 78, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPointSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'YawRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 78, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1046 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1046
    del _BuildAutomaton_1046
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 69, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 70, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 71, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 72, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 73, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 74, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 75, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 76, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 77, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 78, 6))
    counters.add(cc_9)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1047())
    sub_automata.append(_BuildAutomaton_1048())
    sub_automata.append(_BuildAutomaton_1049())
    sub_automata.append(_BuildAutomaton_1050())
    sub_automata.append(_BuildAutomaton_1051())
    sub_automata.append(_BuildAutomaton_1052())
    sub_automata.append(_BuildAutomaton_1053())
    sub_automata.append(_BuildAutomaton_1054())
    sub_automata.append(_BuildAutomaton_1055())
    sub_automata.append(_BuildAutomaton_1056())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 68, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPointSegment._Automaton = _BuildAutomaton_1046()




ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), stEnumAltitudeKind, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 84, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), stBoolFirstSegmentOnPath, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 85, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), ctPoint, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 87, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), ctPoint, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 88, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable'), stBoolCoupledMotionEnable, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 89, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), stDoubleStartRoll, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 91, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), stDoubleStartPitch, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 92, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), stDoubleStartYaw, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 93, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), stDoubleEndRoll, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 95, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), stDoubleEndPitch, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 96, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), stDoubleEndYaw, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 97, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), stDoubleRollRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 99, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PitchRate'), stDoublePitchRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 100, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'YawRate'), stDoubleYawRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 101, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndRollRate'), stDoubleEndRollRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 103, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPitchRate'), stDoubleEndPitchRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 104, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndYawRate'), stDoubleEndYawRate, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 105, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), stDoubleStartSpeed, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 107, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), stDoubleEndSpeed, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 108, 6)))

ctLineSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), stEnumPitchKind, scope=ctLineSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 109, 6)))

def _BuildAutomaton_1058 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1058
    del _BuildAutomaton_1058
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 84, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 84, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1059 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1059
    del _BuildAutomaton_1059
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 85, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 85, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1060 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1060
    del _BuildAutomaton_1060
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 87, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 87, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1061 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1061
    del _BuildAutomaton_1061
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 88, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 88, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1062 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1062
    del _BuildAutomaton_1062
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 89, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CoupledMotionEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 89, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1063 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1063
    del _BuildAutomaton_1063
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 91, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 91, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1064 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1064
    del _BuildAutomaton_1064
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 92, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 92, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1065 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1065
    del _BuildAutomaton_1065
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 93, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 93, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1066 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1066
    del _BuildAutomaton_1066
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 95, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 95, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1067 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1067
    del _BuildAutomaton_1067
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 96, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 96, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1068 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1068
    del _BuildAutomaton_1068
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 97, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 97, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1069 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1069
    del _BuildAutomaton_1069
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 99, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RollRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 99, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1070 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1070
    del _BuildAutomaton_1070
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 100, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PitchRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 100, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1071 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1071
    del _BuildAutomaton_1071
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 101, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'YawRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 101, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1072 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1072
    del _BuildAutomaton_1072
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 103, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndRollRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 103, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1073 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1073
    del _BuildAutomaton_1073
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 104, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPitchRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 104, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1074 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1074
    del _BuildAutomaton_1074
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 105, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndYawRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1075 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1075
    del _BuildAutomaton_1075
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 107, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 107, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1076 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1076
    del _BuildAutomaton_1076
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 108, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 108, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1077 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1077
    del _BuildAutomaton_1077
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 109, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctLineSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PitchKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 109, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1057 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1057
    del _BuildAutomaton_1057
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 84, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 85, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 87, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 88, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 89, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 91, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 92, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 93, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 95, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 96, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 97, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 99, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 100, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 101, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 103, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 104, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 105, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 107, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 108, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 109, 6))
    counters.add(cc_19)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1058())
    sub_automata.append(_BuildAutomaton_1059())
    sub_automata.append(_BuildAutomaton_1060())
    sub_automata.append(_BuildAutomaton_1061())
    sub_automata.append(_BuildAutomaton_1062())
    sub_automata.append(_BuildAutomaton_1063())
    sub_automata.append(_BuildAutomaton_1064())
    sub_automata.append(_BuildAutomaton_1065())
    sub_automata.append(_BuildAutomaton_1066())
    sub_automata.append(_BuildAutomaton_1067())
    sub_automata.append(_BuildAutomaton_1068())
    sub_automata.append(_BuildAutomaton_1069())
    sub_automata.append(_BuildAutomaton_1070())
    sub_automata.append(_BuildAutomaton_1071())
    sub_automata.append(_BuildAutomaton_1072())
    sub_automata.append(_BuildAutomaton_1073())
    sub_automata.append(_BuildAutomaton_1074())
    sub_automata.append(_BuildAutomaton_1075())
    sub_automata.append(_BuildAutomaton_1076())
    sub_automata.append(_BuildAutomaton_1077())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 83, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctLineSegment._Automaton = _BuildAutomaton_1057()




ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), stEnumAltitudeKind, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 115, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), stBoolFirstSegmentOnPath, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 116, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), ctPoint, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 118, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CenterPoint'), ctPoint, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 119, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), ctPoint, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 120, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), stDoubleStartRoll, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 122, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), stDoubleStartPitch, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 123, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), stDoubleStartYaw, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 124, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), stDoubleEndRoll, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 126, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), stDoubleEndPitch, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 127, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), stDoubleEndYaw, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 128, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), stDoubleStartSpeed, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 130, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), stDoubleEndSpeed, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 131, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), stEnumPitchKind, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 133, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TurnKind'), stEnumTurnKind, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 134, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor'), stDoubleLoadFactor, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 136, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), stDoubleRollRate, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 138, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BankAngle'), stDoubleBankAngle, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 140, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Heading'), stDoubleHeading, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 141, 6)))

ctArcSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle'), stDoubleClimbAngle, scope=ctArcSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 142, 6)))

def _BuildAutomaton_1079 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1079
    del _BuildAutomaton_1079
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 115, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 115, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1080 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1080
    del _BuildAutomaton_1080
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 116, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 116, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1081 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1081
    del _BuildAutomaton_1081
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 118, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 118, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1082 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1082
    del _BuildAutomaton_1082
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 119, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CenterPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 119, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1083 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1083
    del _BuildAutomaton_1083
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 120, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 120, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1084 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1084
    del _BuildAutomaton_1084
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 122, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 122, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1085 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1085
    del _BuildAutomaton_1085
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 123, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 123, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1086 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1086
    del _BuildAutomaton_1086
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 124, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1087 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1087
    del _BuildAutomaton_1087
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 126, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 126, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1088 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1088
    del _BuildAutomaton_1088
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 127, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 127, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1089 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1089
    del _BuildAutomaton_1089
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 128, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 128, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1090 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1090
    del _BuildAutomaton_1090
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 130, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 130, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1091 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1091
    del _BuildAutomaton_1091
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 131, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 131, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1092 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1092
    del _BuildAutomaton_1092
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 133, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PitchKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 133, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1093 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1093
    del _BuildAutomaton_1093
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 134, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TurnKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 134, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1094 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1094
    del _BuildAutomaton_1094
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 136, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 136, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1095 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1095
    del _BuildAutomaton_1095
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 138, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RollRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 138, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1096 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1096
    del _BuildAutomaton_1096
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 140, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BankAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 140, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1097 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1097
    del _BuildAutomaton_1097
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 141, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Heading')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 141, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1098 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1098
    del _BuildAutomaton_1098
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 142, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctArcSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 142, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1078 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1078
    del _BuildAutomaton_1078
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 115, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 116, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 118, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 119, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 120, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 122, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 123, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 124, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 126, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 127, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 128, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 130, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 131, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 133, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 134, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 136, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 138, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 140, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 141, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 142, 6))
    counters.add(cc_19)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1079())
    sub_automata.append(_BuildAutomaton_1080())
    sub_automata.append(_BuildAutomaton_1081())
    sub_automata.append(_BuildAutomaton_1082())
    sub_automata.append(_BuildAutomaton_1083())
    sub_automata.append(_BuildAutomaton_1084())
    sub_automata.append(_BuildAutomaton_1085())
    sub_automata.append(_BuildAutomaton_1086())
    sub_automata.append(_BuildAutomaton_1087())
    sub_automata.append(_BuildAutomaton_1088())
    sub_automata.append(_BuildAutomaton_1089())
    sub_automata.append(_BuildAutomaton_1090())
    sub_automata.append(_BuildAutomaton_1091())
    sub_automata.append(_BuildAutomaton_1092())
    sub_automata.append(_BuildAutomaton_1093())
    sub_automata.append(_BuildAutomaton_1094())
    sub_automata.append(_BuildAutomaton_1095())
    sub_automata.append(_BuildAutomaton_1096())
    sub_automata.append(_BuildAutomaton_1097())
    sub_automata.append(_BuildAutomaton_1098())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 114, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctArcSegment._Automaton = _BuildAutomaton_1078()




ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind'), stEnumAltitudeKind, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 148, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath'), stBoolFirstSegmentOnPath, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 149, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPoint'), ctPoint, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 151, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPoint'), ctPoint, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 152, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartRoll'), stDoubleStartRoll, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 154, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartPitch'), stDoubleStartPitch, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 155, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartYaw'), stDoubleStartYaw, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 156, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndRoll'), stDoubleEndRoll, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 158, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndPitch'), stDoubleEndPitch, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 159, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndYaw'), stDoubleEndYaw, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 160, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed'), stDoubleStartSpeed, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 162, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed'), stDoubleEndSpeed, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 163, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PitchKind'), stEnumPitchKind, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 165, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TurnKind'), stEnumTurnKind, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 166, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor'), stDoubleLoadFactor, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 168, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RollRate'), stDoubleRollRate, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 170, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'BankAngle'), stDoubleBankAngle, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 172, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Heading'), stDoubleHeading, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 173, 6)))

ctCompoundSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle'), stDoubleClimbAngle, scope=ctCompoundSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 174, 6)))

def _BuildAutomaton_1100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1100
    del _BuildAutomaton_1100
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 148, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AltitudeKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 148, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1101
    del _BuildAutomaton_1101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 149, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FirstSegmentOnPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 149, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1102
    del _BuildAutomaton_1102
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 151, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 151, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1103
    del _BuildAutomaton_1103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 152, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPoint')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 152, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1104
    del _BuildAutomaton_1104
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 154, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 154, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1105
    del _BuildAutomaton_1105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 155, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 155, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1106
    del _BuildAutomaton_1106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 156, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 156, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1107
    del _BuildAutomaton_1107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 158, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndRoll')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 158, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1108
    del _BuildAutomaton_1108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 159, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndPitch')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 159, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1109
    del _BuildAutomaton_1109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 160, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndYaw')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 160, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1110
    del _BuildAutomaton_1110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 162, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'StartSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 162, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1111
    del _BuildAutomaton_1111
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 163, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EndSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 163, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1112
    del _BuildAutomaton_1112
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 165, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PitchKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 165, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1113
    del _BuildAutomaton_1113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 166, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TurnKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 166, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1114
    del _BuildAutomaton_1114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 168, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LoadFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 168, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1115
    del _BuildAutomaton_1115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 170, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RollRate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 170, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1116
    del _BuildAutomaton_1116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 172, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'BankAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 172, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1117
    del _BuildAutomaton_1117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 173, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Heading')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 173, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1118
    del _BuildAutomaton_1118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 174, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctCompoundSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ClimbAngle')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 174, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1099 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1099
    del _BuildAutomaton_1099
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 148, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 149, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 151, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 152, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 154, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 155, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 156, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 158, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 159, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 160, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 162, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 163, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 165, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 166, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 168, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 170, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 172, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 173, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 174, 6))
    counters.add(cc_18)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1100())
    sub_automata.append(_BuildAutomaton_1101())
    sub_automata.append(_BuildAutomaton_1102())
    sub_automata.append(_BuildAutomaton_1103())
    sub_automata.append(_BuildAutomaton_1104())
    sub_automata.append(_BuildAutomaton_1105())
    sub_automata.append(_BuildAutomaton_1106())
    sub_automata.append(_BuildAutomaton_1107())
    sub_automata.append(_BuildAutomaton_1108())
    sub_automata.append(_BuildAutomaton_1109())
    sub_automata.append(_BuildAutomaton_1110())
    sub_automata.append(_BuildAutomaton_1111())
    sub_automata.append(_BuildAutomaton_1112())
    sub_automata.append(_BuildAutomaton_1113())
    sub_automata.append(_BuildAutomaton_1114())
    sub_automata.append(_BuildAutomaton_1115())
    sub_automata.append(_BuildAutomaton_1116())
    sub_automata.append(_BuildAutomaton_1117())
    sub_automata.append(_BuildAutomaton_1118())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 147, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctCompoundSegment._Automaton = _BuildAutomaton_1099()




ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterceptKind'), stEnumInterceptKind, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 180, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetSutFlag'), stBoolTargetSutFlag, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 181, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TargetPlatformNumber'), stIntTargetPlatformNumber, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 182, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterceptEndAction'), stEnumEndActionKind, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 183, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterceptRange'), stDoubleRange, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 184, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ConstantSpeed'), stDoubleSpeed, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 185, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MaximumSpeed'), stDoubleSpeed, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 186, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InterceptDuration'), stDoubleDuration, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 187, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LimitDurationFlag'), stBoolLimitDurationFlag, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 188, 6)))

ctInterceptSegment._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DurationLimit'), stDoubleDuration, scope=ctInterceptSegment, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 189, 6)))

def _BuildAutomaton_1120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1120
    del _BuildAutomaton_1120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterceptKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 180, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1121
    del _BuildAutomaton_1121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 181, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetSutFlag')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 181, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1122
    del _BuildAutomaton_1122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 182, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TargetPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 182, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1123
    del _BuildAutomaton_1123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterceptEndAction')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 183, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1124
    del _BuildAutomaton_1124
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterceptRange')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 184, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1125
    del _BuildAutomaton_1125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 185, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ConstantSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 185, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1126
    del _BuildAutomaton_1126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 186, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MaximumSpeed')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 186, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1127
    del _BuildAutomaton_1127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 187, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InterceptDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 187, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1128 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1128
    del _BuildAutomaton_1128
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 188, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LimitDurationFlag')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 188, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1129 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1129
    del _BuildAutomaton_1129
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 189, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctInterceptSegment._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DurationLimit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 189, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1119
    del _BuildAutomaton_1119
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 181, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 182, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 185, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 186, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 187, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 188, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 189, 6))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1120())
    sub_automata.append(_BuildAutomaton_1121())
    sub_automata.append(_BuildAutomaton_1122())
    sub_automata.append(_BuildAutomaton_1123())
    sub_automata.append(_BuildAutomaton_1124())
    sub_automata.append(_BuildAutomaton_1125())
    sub_automata.append(_BuildAutomaton_1126())
    sub_automata.append(_BuildAutomaton_1127())
    sub_automata.append(_BuildAutomaton_1128())
    sub_automata.append(_BuildAutomaton_1129())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/platformScriptDataR1-1.xsd', 179, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctInterceptSegment._Automaton = _BuildAutomaton_1119()




ctScenarioData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader'), ctScenarioHeader, scope=ctScenarioData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 43, 6)))

def _BuildAutomaton_1130 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1130
    del _BuildAutomaton_1130
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 43, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 43, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScenarioData._Automaton = _BuildAutomaton_1130()




ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CreationDate'), stDateCreationDate, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 50, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate'), stDateModificationDate, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 51, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioRevision'), stIntScenarioRevision, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 52, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SoftwareReleaseOfLastHeaderEdit'), stIntSoftwareReleaseOfLastHeaderEdit, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 53, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DistanceUnits'), stEnumDistanceUnits, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 54, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EnvironmentKind'), stEnumEnvironmentKind, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 55, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Comment'), stStringCommentScenarioHeader, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 56, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumbers'), ctSutPlatformNumberList, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 57, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalSutFlag'), stBoolExternalSutFlag, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 58, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HorizonMaskingEnable'), stBoolHorizonMaskingEnable, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 59, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EarthRadiusFactor'), stDoubleEarthRadiusFactor, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 60, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataRecording'), ctDataRecording, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 61, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryEnable'), stBoolEmitterLibraryEnable, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 62, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryName'), stStringEmitterLibraryName, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 63, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryEnable'), stBoolScenarioElementLibraryEnable, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 64, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryName'), stTextScenarioElementLibraryName, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 65, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Terrain'), ctTerrain, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 66, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurfaceEffects'), ctSurfaceEffects, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 67, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PropagationEffects'), ctPropagationEffects, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 68, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SpacialAndDopplerEffects'), ctSpacialAndDopplerEffects, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 69, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'HardwareResourceOptimizations'), ctHardwareResourceOptimizations, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 70, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dpms'), ctDpmDataList, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 71, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavigationInterfaceSettings'), ctNavigationInterfaceSettings, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 72, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayData'), ctSituationDisplayDataList, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 73, 6)))

ctScenarioHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplaySettings'), ctGuiDisplaySettings, scope=ctScenarioHeader, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 74, 6)))

def _BuildAutomaton_1132 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1132
    del _BuildAutomaton_1132
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 50, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CreationDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 50, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1133 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1133
    del _BuildAutomaton_1133
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 51, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ModificationDate')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 51, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1134 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1134
    del _BuildAutomaton_1134
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 52, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioRevision')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1135 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1135
    del _BuildAutomaton_1135
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 53, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SoftwareReleaseOfLastHeaderEdit')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 53, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1136 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1136
    del _BuildAutomaton_1136
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 54, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DistanceUnits')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 54, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1137 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1137
    del _BuildAutomaton_1137
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 55, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EnvironmentKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 55, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1138 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1138
    del _BuildAutomaton_1138
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 56, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Comment')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 56, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1139 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1139
    del _BuildAutomaton_1139
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 57, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumbers')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 57, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1140 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1140
    del _BuildAutomaton_1140
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 58, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalSutFlag')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 58, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1141 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1141
    del _BuildAutomaton_1141
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 59, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HorizonMaskingEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 59, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1142 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1142
    del _BuildAutomaton_1142
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EarthRadiusFactor')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 60, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1143 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1143
    del _BuildAutomaton_1143
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 61, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataRecording')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 61, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1144 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1144
    del _BuildAutomaton_1144
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 62, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 62, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1145 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1145
    del _BuildAutomaton_1145
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 63, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterLibraryName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 63, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1146 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1146
    del _BuildAutomaton_1146
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 64, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 64, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1147 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1147
    del _BuildAutomaton_1147
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 65, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioElementLibraryName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 65, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1148 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1148
    del _BuildAutomaton_1148
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 66, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Terrain')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 66, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1149 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1149
    del _BuildAutomaton_1149
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 67, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SurfaceEffects')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 67, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1150 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1150
    del _BuildAutomaton_1150
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 68, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PropagationEffects')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 68, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1151 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1151
    del _BuildAutomaton_1151
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 69, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SpacialAndDopplerEffects')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 69, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1152 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1152
    del _BuildAutomaton_1152
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 70, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'HardwareResourceOptimizations')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 70, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1153 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1153
    del _BuildAutomaton_1153
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 71, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dpms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 71, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1154 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1154
    del _BuildAutomaton_1154
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 72, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavigationInterfaceSettings')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 72, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1155 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1155
    del _BuildAutomaton_1155
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 73, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayData')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 73, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1156 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1156
    del _BuildAutomaton_1156
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 74, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioHeader._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplaySettings')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 74, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1131 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1131
    del _BuildAutomaton_1131
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 50, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 51, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 52, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 53, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 54, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 55, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 56, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 57, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 58, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 59, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 60, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 61, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 62, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 63, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 64, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 65, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 66, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 67, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 68, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 69, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 70, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 71, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 72, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 73, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 74, 6))
    counters.add(cc_24)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1132())
    sub_automata.append(_BuildAutomaton_1133())
    sub_automata.append(_BuildAutomaton_1134())
    sub_automata.append(_BuildAutomaton_1135())
    sub_automata.append(_BuildAutomaton_1136())
    sub_automata.append(_BuildAutomaton_1137())
    sub_automata.append(_BuildAutomaton_1138())
    sub_automata.append(_BuildAutomaton_1139())
    sub_automata.append(_BuildAutomaton_1140())
    sub_automata.append(_BuildAutomaton_1141())
    sub_automata.append(_BuildAutomaton_1142())
    sub_automata.append(_BuildAutomaton_1143())
    sub_automata.append(_BuildAutomaton_1144())
    sub_automata.append(_BuildAutomaton_1145())
    sub_automata.append(_BuildAutomaton_1146())
    sub_automata.append(_BuildAutomaton_1147())
    sub_automata.append(_BuildAutomaton_1148())
    sub_automata.append(_BuildAutomaton_1149())
    sub_automata.append(_BuildAutomaton_1150())
    sub_automata.append(_BuildAutomaton_1151())
    sub_automata.append(_BuildAutomaton_1152())
    sub_automata.append(_BuildAutomaton_1153())
    sub_automata.append(_BuildAutomaton_1154())
    sub_automata.append(_BuildAutomaton_1155())
    sub_automata.append(_BuildAutomaton_1156())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 49, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScenarioHeader._Automaton = _BuildAutomaton_1131()




ctSutPlatformNumberList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumber'), stIntSutPlatformNumber, scope=ctSutPlatformNumberList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 81, 6)))

def _BuildAutomaton_1157 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1157
    del _BuildAutomaton_1157
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=4, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 80, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSutPlatformNumberList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SutPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 81, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSutPlatformNumberList._Automaton = _BuildAutomaton_1157()




ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DataRecordingEnable'), stBoolDataRecordingEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 87, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DxFileName'), stStringDxFileName, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 88, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformEventsEnable'), stBoolRecordPlatformEventsEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 89, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterEventsEnable'), stBoolRecordEmitterEventsEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 90, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecordPulseCountsEnable'), stBoolRecordPulseCountsEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 91, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformStatusEnable'), stBoolRecordPlatformStatusEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 92, 6)))

ctDataRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterStatusEnable'), stBoolRecordEmitterStatusEnable, scope=ctDataRecording, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 93, 6)))

def _BuildAutomaton_1159 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1159
    del _BuildAutomaton_1159
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 87, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DataRecordingEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 87, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1160 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1160
    del _BuildAutomaton_1160
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 88, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DxFileName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 88, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1161 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1161
    del _BuildAutomaton_1161
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 89, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformEventsEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 89, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1162 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1162
    del _BuildAutomaton_1162
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 90, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterEventsEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 90, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1163 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1163
    del _BuildAutomaton_1163
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 91, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecordPulseCountsEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 91, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1164 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1164
    del _BuildAutomaton_1164
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 92, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecordPlatformStatusEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 92, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1165 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1165
    del _BuildAutomaton_1165
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 93, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDataRecording._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RecordEmitterStatusEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 93, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1158 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1158
    del _BuildAutomaton_1158
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 87, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 88, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 89, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 90, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 91, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 92, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 93, 6))
    counters.add(cc_6)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1159())
    sub_automata.append(_BuildAutomaton_1160())
    sub_automata.append(_BuildAutomaton_1161())
    sub_automata.append(_BuildAutomaton_1162())
    sub_automata.append(_BuildAutomaton_1163())
    sub_automata.append(_BuildAutomaton_1164())
    sub_automata.append(_BuildAutomaton_1165())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 86, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDataRecording._Automaton = _BuildAutomaton_1158()




ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable'), stBoolTerrainEnable, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 99, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrainMaskingAttenuationEnable'), stBoolTerrainMaskingAttenuationEnable, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 100, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrainDtedKind'), stEnumTerrainDtedKind, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 101, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude'), stDoubleNorthLatitude, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 102, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection'), stEnumNorthSouthDirectionKind, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 103, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude'), stDoubleWestLongitude, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 104, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WestDirection'), stEnumEastWestDirectionKind, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 105, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude'), stDoubleSouthLatitude, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 106, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection'), stEnumNorthSouthDirectionKind, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 107, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude'), stDoubleEastLongitude, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 108, 6)))

ctTerrain._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EastDirection'), stEnumEastWestDirectionKind, scope=ctTerrain, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 109, 6)))

def _BuildAutomaton_1167 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1167
    del _BuildAutomaton_1167
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 99, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 99, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1168 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1168
    del _BuildAutomaton_1168
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 100, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrainMaskingAttenuationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 100, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1169 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1169
    del _BuildAutomaton_1169
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 101, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrainDtedKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 101, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1170 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1170
    del _BuildAutomaton_1170
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 102, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 102, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1171 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1171
    del _BuildAutomaton_1171
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 103, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 103, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1172 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1172
    del _BuildAutomaton_1172
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 104, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 104, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1173 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1173
    del _BuildAutomaton_1173
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 105, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WestDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1174 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1174
    del _BuildAutomaton_1174
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 106, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 106, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1175 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1175
    del _BuildAutomaton_1175
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 107, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 107, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1176 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1176
    del _BuildAutomaton_1176
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 108, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 108, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1177 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1177
    del _BuildAutomaton_1177
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 109, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctTerrain._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EastDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 109, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1166 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1166
    del _BuildAutomaton_1166
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 99, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 100, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 101, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 102, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 103, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 104, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 105, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 106, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 107, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 108, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 109, 6))
    counters.add(cc_10)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1167())
    sub_automata.append(_BuildAutomaton_1168())
    sub_automata.append(_BuildAutomaton_1169())
    sub_automata.append(_BuildAutomaton_1170())
    sub_automata.append(_BuildAutomaton_1171())
    sub_automata.append(_BuildAutomaton_1172())
    sub_automata.append(_BuildAutomaton_1173())
    sub_automata.append(_BuildAutomaton_1174())
    sub_automata.append(_BuildAutomaton_1175())
    sub_automata.append(_BuildAutomaton_1176())
    sub_automata.append(_BuildAutomaton_1177())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 98, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctTerrain._Automaton = _BuildAutomaton_1166()




ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'MultipathEnable'), stBoolMultipathEnable, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 115, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WaveSplashEnable'), stBoolWaveSplashEnable, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 116, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SutEmitterEarthReflectionEnable'), stBoolSutEmitterEarthReflectionEnable, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 117, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SurfaceKind'), stEnumSurfaceKind, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 118, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude'), stDoubleNorthLatitude, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 119, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection'), stEnumNorthSouthDirectionKind, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 120, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude'), stDoubleWestLongitude, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 121, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'WestDirection'), stEnumEastWestDirectionKind, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 122, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude'), stDoubleSouthLatitude, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 123, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection'), stEnumNorthSouthDirectionKind, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 124, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude'), stDoubleEastLongitude, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 125, 6)))

ctSurfaceEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EastDirection'), stEnumEastWestDirectionKind, scope=ctSurfaceEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 126, 6)))

def _BuildAutomaton_1179 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1179
    del _BuildAutomaton_1179
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 115, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'MultipathEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 115, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1180 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1180
    del _BuildAutomaton_1180
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 116, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WaveSplashEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 116, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1181 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1181
    del _BuildAutomaton_1181
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 117, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SutEmitterEarthReflectionEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 117, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1182 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1182
    del _BuildAutomaton_1182
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 118, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SurfaceKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 118, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1183 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1183
    del _BuildAutomaton_1183
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 119, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NorthLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 119, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1184 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1184
    del _BuildAutomaton_1184
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 120, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NorthDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 120, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1185 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1185
    del _BuildAutomaton_1185
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 121, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WestLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 121, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1186 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1186
    del _BuildAutomaton_1186
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 122, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'WestDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 122, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1187 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1187
    del _BuildAutomaton_1187
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 123, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SouthLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 123, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1188 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1188
    del _BuildAutomaton_1188
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 124, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SouthDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1189 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1189
    del _BuildAutomaton_1189
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 125, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EastLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 125, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1190 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1190
    del _BuildAutomaton_1190
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 126, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSurfaceEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EastDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 126, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1178 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1178
    del _BuildAutomaton_1178
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 115, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 116, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 117, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 118, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 119, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 120, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 121, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 122, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 123, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 124, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 125, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 126, 6))
    counters.add(cc_11)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1179())
    sub_automata.append(_BuildAutomaton_1180())
    sub_automata.append(_BuildAutomaton_1181())
    sub_automata.append(_BuildAutomaton_1182())
    sub_automata.append(_BuildAutomaton_1183())
    sub_automata.append(_BuildAutomaton_1184())
    sub_automata.append(_BuildAutomaton_1185())
    sub_automata.append(_BuildAutomaton_1186())
    sub_automata.append(_BuildAutomaton_1187())
    sub_automata.append(_BuildAutomaton_1188())
    sub_automata.append(_BuildAutomaton_1189())
    sub_automata.append(_BuildAutomaton_1190())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 114, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSurfaceEffects._Automaton = _BuildAutomaton_1178()




ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AtmosphericAbsorptionAttenuationEnable'), stBoolAtmosphericAbsorptionAttenuationEnable, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 132, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RainfallRateKind'), stEnumRainfallRateKind, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 133, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuctingEnable'), stBoolDuctingEnable, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 134, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuctingBoundaryKind'), stEnumDuctingBoundaryKind, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 135, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuctingHeight'), stDoubleDuctingHeight, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 136, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuctingRefractivity'), stDoubleDuctingRefractivity, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 137, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DuctingFileName'), stStringDuctingFileName, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 138, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeAttenuationEnable'), stBoolRangeAttenuationEnable, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 139, 6)))

ctPropagationEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyAttenuationEnable'), stBoolFrequencyAttenuationEnable, scope=ctPropagationEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 140, 6)))

def _BuildAutomaton_1192 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1192
    del _BuildAutomaton_1192
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 132, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AtmosphericAbsorptionAttenuationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 132, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1193 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1193
    del _BuildAutomaton_1193
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 133, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RainfallRateKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 133, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1194 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1194
    del _BuildAutomaton_1194
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 134, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuctingEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 134, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1195 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1195
    del _BuildAutomaton_1195
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 135, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuctingBoundaryKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 135, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1196 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1196
    del _BuildAutomaton_1196
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 136, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuctingHeight')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 136, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1197 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1197
    del _BuildAutomaton_1197
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 137, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuctingRefractivity')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 137, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1198 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1198
    del _BuildAutomaton_1198
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 138, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DuctingFileName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 138, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1199 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1199
    del _BuildAutomaton_1199
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 139, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeAttenuationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 139, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1200 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1200
    del _BuildAutomaton_1200
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 140, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPropagationEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyAttenuationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 140, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1191 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1191
    del _BuildAutomaton_1191
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 132, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 133, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 134, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 135, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 136, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 137, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 138, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 139, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 140, 6))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1192())
    sub_automata.append(_BuildAutomaton_1193())
    sub_automata.append(_BuildAutomaton_1194())
    sub_automata.append(_BuildAutomaton_1195())
    sub_automata.append(_BuildAutomaton_1196())
    sub_automata.append(_BuildAutomaton_1197())
    sub_automata.append(_BuildAutomaton_1198())
    sub_automata.append(_BuildAutomaton_1199())
    sub_automata.append(_BuildAutomaton_1200())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 131, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctPropagationEffects._Automaton = _BuildAutomaton_1191()




ctSpacialAndDopplerEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDopplerShiftEnable'), stBoolFrequencyDopplerShiftEnable, scope=ctSpacialAndDopplerEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 146, 6)))

ctSpacialAndDopplerEffects._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RangeAndPriDopplerShiftEnable'), stBoolRangeAndPriDopplerShiftEnable, scope=ctSpacialAndDopplerEffects, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 147, 6)))

def _BuildAutomaton_1202 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1202
    del _BuildAutomaton_1202
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 146, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSpacialAndDopplerEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'FrequencyDopplerShiftEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 146, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1203 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1203
    del _BuildAutomaton_1203
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 147, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSpacialAndDopplerEffects._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RangeAndPriDopplerShiftEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 147, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1201 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1201
    del _BuildAutomaton_1201
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 146, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 147, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1202())
    sub_automata.append(_BuildAutomaton_1203())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 145, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSpacialAndDopplerEffects._Automaton = _BuildAutomaton_1201()




ctHardwareResourceOptimizations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseTruncationEnable'), stBoolPulseTruncationEnable, scope=ctHardwareResourceOptimizations, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 153, 6)))

ctHardwareResourceOptimizations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CwInterruptEnable'), stBoolCwInterruptEnable, scope=ctHardwareResourceOptimizations, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 154, 6)))

ctHardwareResourceOptimizations._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SensitivityThresholdEnable'), stBoolSensitivityThresholdEnable, scope=ctHardwareResourceOptimizations, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 155, 6)))

def _BuildAutomaton_1205 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1205
    del _BuildAutomaton_1205
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 153, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHardwareResourceOptimizations._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseTruncationEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 153, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1206 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1206
    del _BuildAutomaton_1206
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 154, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHardwareResourceOptimizations._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CwInterruptEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 154, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1207 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1207
    del _BuildAutomaton_1207
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 155, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctHardwareResourceOptimizations._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SensitivityThresholdEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 155, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1204 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1204
    del _BuildAutomaton_1204
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 153, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 154, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 155, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1205())
    sub_automata.append(_BuildAutomaton_1206())
    sub_automata.append(_BuildAutomaton_1207())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 152, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctHardwareResourceOptimizations._Automaton = _BuildAutomaton_1204()




ctDpmDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Dpm'), ctDpmData, scope=ctDpmDataList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 161, 6)))

def _BuildAutomaton_1208 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1208
    del _BuildAutomaton_1208
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 160, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmDataList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Dpm')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 161, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmDataList._Automaton = _BuildAutomaton_1208()




ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DpmBoardCollectionEnable'), stBoolDpmBoardCollectionEnable, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 167, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseContendedState'), stEnumPulseContendedStateKind, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 168, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseInhibitState'), stEnumPulseInhibitStateKind, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 169, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CircularBufferCollection'), stBoolCircularBufferCollection, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 170, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ExternalGatingState'), stEnumExternalGatingStateKind, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 171, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DgsVideoState'), stEnumDgsVideoStateKind, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 172, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PdwKind'), stEnumPdwKind, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 173, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'InvalidPdwsFlag'), stBoolInvalidPdwsFlag, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 174, 6)))

ctDpmData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DpmFilters'), ctDpmFilter, scope=ctDpmData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 175, 6)))

def _BuildAutomaton_1210 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1210
    del _BuildAutomaton_1210
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 167, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DpmBoardCollectionEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 167, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1211 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1211
    del _BuildAutomaton_1211
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 168, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseContendedState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 168, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1212 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1212
    del _BuildAutomaton_1212
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 169, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseInhibitState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 169, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1213 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1213
    del _BuildAutomaton_1213
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 170, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CircularBufferCollection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 170, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1214 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1214
    del _BuildAutomaton_1214
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 171, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ExternalGatingState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 171, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1215 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1215
    del _BuildAutomaton_1215
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 172, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DgsVideoState')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 172, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1216 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1216
    del _BuildAutomaton_1216
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 173, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PdwKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 173, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1217 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1217
    del _BuildAutomaton_1217
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 174, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'InvalidPdwsFlag')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 174, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1218 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1218
    del _BuildAutomaton_1218
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 175, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DpmFilters')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 175, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1209 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1209
    del _BuildAutomaton_1209
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 167, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 168, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 169, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 170, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 171, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 172, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 173, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 174, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 175, 6))
    counters.add(cc_8)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1210())
    sub_automata.append(_BuildAutomaton_1211())
    sub_automata.append(_BuildAutomaton_1212())
    sub_automata.append(_BuildAutomaton_1213())
    sub_automata.append(_BuildAutomaton_1214())
    sub_automata.append(_BuildAutomaton_1215())
    sub_automata.append(_BuildAutomaton_1216())
    sub_automata.append(_BuildAutomaton_1217())
    sub_automata.append(_BuildAutomaton_1218())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 166, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmData._Automaton = _BuildAutomaton_1209()




ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AzAoa'), ctDpmFilterAzAoa, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 181, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ElAoa'), ctDpmFilterElAoa, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 182, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterNumber'), ctDpmFilterEmitterNumber, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 183, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Frequency'), ctDpmFilterFrequency, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 184, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Generator'), ctDpmFilterGenerator, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 185, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterName'), stStringEmitterName, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 186, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth'), ctDpmFilterPulseWidth, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 187, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Power'), ctDpmFilterPower, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 188, 6)))

ctDpmFilter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioTime'), ctDpmFilterScenarioTime, scope=ctDpmFilter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 189, 6)))

def _BuildAutomaton_1219 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1219
    del _BuildAutomaton_1219
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 180, 4))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 181, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 182, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 183, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 184, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 185, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 186, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 187, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 188, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 189, 6))
    counters.add(cc_9)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'AzAoa')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 181, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ElAoa')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 182, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 183, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Frequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 184, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Generator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 185, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterName')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 186, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 187, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Power')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 188, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 189, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_4, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_5, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_6, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_7, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_8, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilter._Automaton = _BuildAutomaton_1219()




ctDpmFilterAzAoa._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerAzimuth'), stDoubleLowerAz, scope=ctDpmFilterAzAoa, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 195, 6)))

ctDpmFilterAzAoa._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperAzimuth'), stDoubleUpperAz, scope=ctDpmFilterAzAoa, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 196, 6)))

def _BuildAutomaton_1221 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1221
    del _BuildAutomaton_1221
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 195, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterAzAoa._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerAzimuth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 195, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1222 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1222
    del _BuildAutomaton_1222
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 196, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterAzAoa._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperAzimuth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 196, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1220 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1220
    del _BuildAutomaton_1220
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 195, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 196, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1221())
    sub_automata.append(_BuildAutomaton_1222())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 194, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterAzAoa._Automaton = _BuildAutomaton_1220()




ctDpmFilterElAoa._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerElevation'), stDoubleLowerElevation, scope=ctDpmFilterElAoa, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 202, 6)))

ctDpmFilterElAoa._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperElevation'), stDoubleUpperElevation, scope=ctDpmFilterElAoa, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 203, 6)))

def _BuildAutomaton_1224 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1224
    del _BuildAutomaton_1224
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 202, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterElAoa._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerElevation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 202, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1225 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1225
    del _BuildAutomaton_1225
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 203, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterElAoa._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperElevation')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 203, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1223 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1223
    del _BuildAutomaton_1223
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 202, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 203, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1224())
    sub_automata.append(_BuildAutomaton_1225())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 201, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterElAoa._Automaton = _BuildAutomaton_1223()




ctDpmFilterEmitterNumber._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerEmitter'), stIntLowerEmitterNumber, scope=ctDpmFilterEmitterNumber, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 209, 6)))

ctDpmFilterEmitterNumber._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperEmitter'), stIntUpperEmitterNumber, scope=ctDpmFilterEmitterNumber, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 210, 6)))

def _BuildAutomaton_1227 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1227
    del _BuildAutomaton_1227
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 209, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterEmitterNumber._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerEmitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 209, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1228 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1228
    del _BuildAutomaton_1228
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 210, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterEmitterNumber._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperEmitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 210, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1226 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1226
    del _BuildAutomaton_1226
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 209, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 210, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1227())
    sub_automata.append(_BuildAutomaton_1228())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 208, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterEmitterNumber._Automaton = _BuildAutomaton_1226()




ctDpmFilterFrequency._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerFrequency'), stDoubleLowerFrequency, scope=ctDpmFilterFrequency, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 216, 6)))

ctDpmFilterFrequency._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperFrequency'), stDoubleUpperFrequency, scope=ctDpmFilterFrequency, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 217, 6)))

def _BuildAutomaton_1230 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1230
    del _BuildAutomaton_1230
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 216, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterFrequency._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerFrequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 216, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1231 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1231
    del _BuildAutomaton_1231
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 217, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterFrequency._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperFrequency')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 217, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1229 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1229
    del _BuildAutomaton_1229
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 216, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 217, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1230())
    sub_automata.append(_BuildAutomaton_1231())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 215, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterFrequency._Automaton = _BuildAutomaton_1229()




ctDpmFilterGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerGenerator'), stIntLowerGeneratorNumber, scope=ctDpmFilterGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 223, 6)))

ctDpmFilterGenerator._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperGenerator'), stIntUpperGeneratorNumber, scope=ctDpmFilterGenerator, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 224, 6)))

def _BuildAutomaton_1233 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1233
    del _BuildAutomaton_1233
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 223, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 223, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1234 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1234
    del _BuildAutomaton_1234
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 224, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterGenerator._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperGenerator')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 224, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1232 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1232
    del _BuildAutomaton_1232
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 223, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 224, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1233())
    sub_automata.append(_BuildAutomaton_1234())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 222, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterGenerator._Automaton = _BuildAutomaton_1232()




ctDpmFilterPulseWidth._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerPulseWidth'), stDoubleLowerPulseWidth, scope=ctDpmFilterPulseWidth, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 230, 6)))

ctDpmFilterPulseWidth._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperPulseWidth'), stDoubleUpperPulseWidth, scope=ctDpmFilterPulseWidth, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 231, 6)))

def _BuildAutomaton_1236 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1236
    del _BuildAutomaton_1236
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 230, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterPulseWidth._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 230, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1237 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1237
    del _BuildAutomaton_1237
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 231, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterPulseWidth._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperPulseWidth')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 231, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1235 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1235
    del _BuildAutomaton_1235
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 230, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 231, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1236())
    sub_automata.append(_BuildAutomaton_1237())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 229, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterPulseWidth._Automaton = _BuildAutomaton_1235()




ctDpmFilterPower._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerPower'), stDoubleLowerPower, scope=ctDpmFilterPower, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 237, 6)))

ctDpmFilterPower._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperPower'), stDoubleUpperPower, scope=ctDpmFilterPower, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 238, 6)))

def _BuildAutomaton_1239 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1239
    del _BuildAutomaton_1239
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 237, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterPower._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerPower')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 237, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1240 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1240
    del _BuildAutomaton_1240
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 238, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterPower._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperPower')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 238, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1238 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1238
    del _BuildAutomaton_1238
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 237, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 238, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1239())
    sub_automata.append(_BuildAutomaton_1240())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 236, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterPower._Automaton = _BuildAutomaton_1238()




ctDpmFilterScenarioTime._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'LowerTime'), stDoubleLowerTime, scope=ctDpmFilterScenarioTime, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 244, 6)))

ctDpmFilterScenarioTime._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'UpperTime'), stDoubleUpperTime, scope=ctDpmFilterScenarioTime, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 245, 6)))

def _BuildAutomaton_1242 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1242
    del _BuildAutomaton_1242
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 244, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterScenarioTime._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'LowerTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 244, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1243 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1243
    del _BuildAutomaton_1243
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 245, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctDpmFilterScenarioTime._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'UpperTime')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 245, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1241 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1241
    del _BuildAutomaton_1241
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 244, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 245, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1242())
    sub_automata.append(_BuildAutomaton_1243())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 243, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctDpmFilterScenarioTime._Automaton = _BuildAutomaton_1241()




ctNavigationInterfaceSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfEnable'), stBoolNavIfEnable, scope=ctNavigationInterfaceSettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 251, 6)))

ctNavigationInterfaceSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfPhysicalIfKind'), stEnumNavIfPhysicalIfKind, scope=ctNavigationInterfaceSettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 252, 6)))

ctNavigationInterfaceSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIf1553BusKind'), stEnumNavIf1553BusKind, scope=ctNavigationInterfaceSettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 253, 6)))

ctNavigationInterfaceSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfUpdateInterval'), stEnumNavIfUpdateInterval, scope=ctNavigationInterfaceSettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 254, 6)))

ctNavigationInterfaceSettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatforms'), ctNavIfPlatformsList, scope=ctNavigationInterfaceSettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 255, 6)))

def _BuildAutomaton_1245 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1245
    del _BuildAutomaton_1245
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 251, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavigationInterfaceSettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 251, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1246 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1246
    del _BuildAutomaton_1246
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 252, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavigationInterfaceSettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfPhysicalIfKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 252, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1247 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1247
    del _BuildAutomaton_1247
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 253, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavigationInterfaceSettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIf1553BusKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 253, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1248 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1248
    del _BuildAutomaton_1248
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 254, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavigationInterfaceSettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfUpdateInterval')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 254, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1249 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1249
    del _BuildAutomaton_1249
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 255, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavigationInterfaceSettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 255, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1244 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1244
    del _BuildAutomaton_1244
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 251, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 252, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 253, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 254, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 255, 6))
    counters.add(cc_4)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1245())
    sub_automata.append(_BuildAutomaton_1246())
    sub_automata.append(_BuildAutomaton_1247())
    sub_automata.append(_BuildAutomaton_1248())
    sub_automata.append(_BuildAutomaton_1249())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 250, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctNavigationInterfaceSettings._Automaton = _BuildAutomaton_1244()




ctNavIfPlatformsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatform'), ctNavIfPlatform, scope=ctNavIfPlatformsList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 261, 6)))

def _BuildAutomaton_1250 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1250
    del _BuildAutomaton_1250
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=6, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 260, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavIfPlatformsList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 261, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctNavIfPlatformsList._Automaton = _BuildAutomaton_1250()




ctNavIfPlatform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfUserPlatformNumber'), stIntUserPlatformNumber, scope=ctNavIfPlatform, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 267, 6)))

ctNavIfPlatform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtAddress'), stIntNavIfRtAddress, scope=ctNavIfPlatform, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 268, 6)))

ctNavIfPlatform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtSubAddress'), stIntNavIfRtSubAddress, scope=ctNavIfPlatform, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 269, 6)))

ctNavIfPlatform._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NavIfTransferDirection'), stEnumNavIfTransferDirection, scope=ctNavIfPlatform, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 270, 6)))

def _BuildAutomaton_1252 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1252
    del _BuildAutomaton_1252
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 267, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavIfPlatform._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfUserPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 267, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1253 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1253
    del _BuildAutomaton_1253
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 268, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavIfPlatform._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtAddress')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 268, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1254 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1254
    del _BuildAutomaton_1254
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 269, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavIfPlatform._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfRtSubAddress')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 269, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1255 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1255
    del _BuildAutomaton_1255
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 270, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctNavIfPlatform._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'NavIfTransferDirection')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 270, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1251 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1251
    del _BuildAutomaton_1251
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 267, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 268, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 269, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 270, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1252())
    sub_automata.append(_BuildAutomaton_1253())
    sub_automata.append(_BuildAutomaton_1254())
    sub_automata.append(_BuildAutomaton_1255())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 266, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctNavIfPlatform._Automaton = _BuildAutomaton_1251()




ctSituationDisplayDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplaySettings'), ctSituationDisplaySettings, scope=ctSituationDisplayDataList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 276, 6)))

def _BuildAutomaton_1256 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1256
    del _BuildAutomaton_1256
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 275, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplayDataList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplaySettings')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 276, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSituationDisplayDataList._Automaton = _BuildAutomaton_1256()




ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayServer'), stIntDisplayServer, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 282, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayId'), stIntDisplayId, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 283, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayVisibility'), stBoolDisplayVisibility, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 284, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayCenter'), stEnumSituationDisplayCenterKind, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 285, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Center'), ctPoint, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 286, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayMode'), stEnumSituationDisplayModeKind, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 287, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayScale'), stDoubleDisplayScale, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 288, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayIntensity'), stDoubleDisplayIntensity, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 289, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration'), stDoubleVelocityVectorDuration, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 290, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrain'), stBoolDisplayTerrain, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 291, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughness'), stBoolDisplayRoughness, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 292, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayGeopolitical'), stBoolDisplayGeopolitical, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 293, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude'), stDoubleGeopoliticalCenterLatitude, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 294, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude'), stDoubleGeopoliticalCenterLongitude, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 295, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers'), stBoolDisplayBarriers, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 296, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline'), stBoolDisplayCoastline, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 297, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines'), stBoolDisplayDepthLines, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 298, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines'), stBoolDisplayPoliticalLines, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 299, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals'), stBoolDisplayCanals, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 300, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways'), stBoolDisplayWaterways, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 301, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms'), stBoolDisplayLandforms, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 302, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads'), stBoolDisplayRailroads, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 303, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads'), stBoolDisplayRoads, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 304, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails'), stBoolDisplayTrails, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 305, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures'), stBoolDisplayStructures, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 306, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines'), stBoolDisplayPipelines, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 307, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities'), stBoolDisplayUtilities, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 308, 6)))

ctSituationDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList'), ctSituationDisplayPlatformOptionsList, scope=ctSituationDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 309, 6)))

def _BuildAutomaton_1258 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1258
    del _BuildAutomaton_1258
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 282, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayServer')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 282, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1259 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1259
    del _BuildAutomaton_1259
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 283, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayId')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 283, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1260 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1260
    del _BuildAutomaton_1260
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 284, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayVisibility')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 284, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1261 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1261
    del _BuildAutomaton_1261
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 285, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayCenter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 285, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1262 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1262
    del _BuildAutomaton_1262
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 286, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Center')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 286, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1263 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1263
    del _BuildAutomaton_1263
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 287, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SituationDisplayMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 287, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1264 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1264
    del _BuildAutomaton_1264
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 288, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayScale')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 288, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1265 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1265
    del _BuildAutomaton_1265
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 289, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayIntensity')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 289, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1266 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1266
    del _BuildAutomaton_1266
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 290, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 290, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1267 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1267
    del _BuildAutomaton_1267
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 291, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrain')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 291, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1268 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1268
    del _BuildAutomaton_1268
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 292, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughness')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 292, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1269 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1269
    del _BuildAutomaton_1269
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 293, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayGeopolitical')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 293, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1270 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1270
    del _BuildAutomaton_1270
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 294, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 294, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1271 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1271
    del _BuildAutomaton_1271
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 295, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 295, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1272 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1272
    del _BuildAutomaton_1272
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 296, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 296, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1273 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1273
    del _BuildAutomaton_1273
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 297, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 297, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1274 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1274
    del _BuildAutomaton_1274
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 298, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 298, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1275 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1275
    del _BuildAutomaton_1275
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 299, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 299, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1276 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1276
    del _BuildAutomaton_1276
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 300, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1277 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1277
    del _BuildAutomaton_1277
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 301, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 301, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1278 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1278
    del _BuildAutomaton_1278
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 302, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 302, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1279 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1279
    del _BuildAutomaton_1279
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 303, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 303, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1280 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1280
    del _BuildAutomaton_1280
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 304, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 304, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1281 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1281
    del _BuildAutomaton_1281
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 305, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 305, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1282 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1282
    del _BuildAutomaton_1282
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 306, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 306, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1283 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1283
    del _BuildAutomaton_1283
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 307, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 307, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1284 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1284
    del _BuildAutomaton_1284
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 308, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 308, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1285 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1285
    del _BuildAutomaton_1285
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 309, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 309, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1257 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1257
    del _BuildAutomaton_1257
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 282, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 283, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 284, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 285, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 286, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 287, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 288, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 289, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 290, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 291, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 292, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 293, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 294, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 295, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 296, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 297, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 298, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 299, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 300, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 301, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 302, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 303, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 304, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 305, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 306, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 307, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 308, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 309, 6))
    counters.add(cc_27)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1258())
    sub_automata.append(_BuildAutomaton_1259())
    sub_automata.append(_BuildAutomaton_1260())
    sub_automata.append(_BuildAutomaton_1261())
    sub_automata.append(_BuildAutomaton_1262())
    sub_automata.append(_BuildAutomaton_1263())
    sub_automata.append(_BuildAutomaton_1264())
    sub_automata.append(_BuildAutomaton_1265())
    sub_automata.append(_BuildAutomaton_1266())
    sub_automata.append(_BuildAutomaton_1267())
    sub_automata.append(_BuildAutomaton_1268())
    sub_automata.append(_BuildAutomaton_1269())
    sub_automata.append(_BuildAutomaton_1270())
    sub_automata.append(_BuildAutomaton_1271())
    sub_automata.append(_BuildAutomaton_1272())
    sub_automata.append(_BuildAutomaton_1273())
    sub_automata.append(_BuildAutomaton_1274())
    sub_automata.append(_BuildAutomaton_1275())
    sub_automata.append(_BuildAutomaton_1276())
    sub_automata.append(_BuildAutomaton_1277())
    sub_automata.append(_BuildAutomaton_1278())
    sub_automata.append(_BuildAutomaton_1279())
    sub_automata.append(_BuildAutomaton_1280())
    sub_automata.append(_BuildAutomaton_1281())
    sub_automata.append(_BuildAutomaton_1282())
    sub_automata.append(_BuildAutomaton_1283())
    sub_automata.append(_BuildAutomaton_1284())
    sub_automata.append(_BuildAutomaton_1285())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 281, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSituationDisplaySettings._Automaton = _BuildAutomaton_1257()




ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayMode'), stEnumGuiDisplayModeKind, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 315, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayGridKind'), stEnumDisplayGridKind, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 316, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayCenter'), stEnumDisplayCenterKind, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 317, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Center'), ctPoint, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 318, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CenterPlatformNumber'), stIntUserPlatformNumber, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 319, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Scale'), stDoubleScale, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 320, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Intensity'), stDoubleIntensity, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 321, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration'), stDoubleVelocityVectorDuration, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 322, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayHud'), stBoolDisplayHud, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 323, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatformDetails'), stBoolDisplayPlatformDetails, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 324, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrainLegend'), stBoolDisplayTerrainLegend, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 325, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayGrids'), stBoolDisplayGrids, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 326, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath'), stBoolDisplayProjectedPath, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 327, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory'), stBoolDisplayPathHistory, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 328, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayInactivePlatforms'), stBoolDisplayInactivePlatforms, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 329, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbolLegend'), stBoolDisplaySymbolLegend, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 330, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughnessLegend'), stBoolDisplayRoughnessLegend, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 331, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayVmapLegend'), stBoolDisplayVmapLegend, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 332, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable'), stBoolTerrainEnable, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 333, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'RoughnessEnable'), stBoolRoughnessEnable, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 334, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'VmapEnable'), stBoolVmapEnable, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 335, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude'), stDoubleGeopoliticalCenterLatitude, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 336, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude'), stDoubleGeopoliticalCenterLongitude, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 337, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers'), stBoolDisplayBarriers, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 338, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline'), stBoolDisplayCoastline, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 339, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines'), stBoolDisplayDepthLines, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 340, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines'), stBoolDisplayPoliticalLines, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 341, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals'), stBoolDisplayCanals, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 342, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways'), stBoolDisplayWaterways, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 343, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms'), stBoolDisplayLandforms, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 344, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads'), stBoolDisplayRailroads, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 345, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads'), stBoolDisplayRoads, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 346, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails'), stBoolDisplayTrails, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 347, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures'), stBoolDisplayStructures, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 348, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines'), stBoolDisplayPipelines, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 349, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities'), stBoolDisplayUtilities, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 350, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeotiffEnable'), stBoolGeotiffEnable, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 351, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'GeotiffPath'), stTextGeotiffPath, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 352, 6)))

ctGuiDisplaySettings._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList'), ctGuiPlatformOptionsList, scope=ctGuiDisplaySettings, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 353, 6)))

def _BuildAutomaton_1287 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1287
    del _BuildAutomaton_1287
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 315, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 315, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1288 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1288
    del _BuildAutomaton_1288
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 316, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayGridKind')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 316, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1289 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1289
    del _BuildAutomaton_1289
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 317, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GuiDisplayCenter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 317, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1290 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1290
    del _BuildAutomaton_1290
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 318, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Center')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 318, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1291 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1291
    del _BuildAutomaton_1291
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 319, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'CenterPlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 319, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1292 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1292
    del _BuildAutomaton_1292
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 320, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Scale')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 320, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1293 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1293
    del _BuildAutomaton_1293
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 321, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Intensity')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 321, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1294 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1294
    del _BuildAutomaton_1294
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 322, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VelocityVectorDuration')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 322, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1295 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1295
    del _BuildAutomaton_1295
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 323, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayHud')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 323, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1296 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1296
    del _BuildAutomaton_1296
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 324, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatformDetails')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 324, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1297 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1297
    del _BuildAutomaton_1297
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 325, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayTerrainLegend')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 325, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1298 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1298
    del _BuildAutomaton_1298
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 326, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayGrids')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 326, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1299 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1299
    del _BuildAutomaton_1299
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 327, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 327, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1300 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1300
    del _BuildAutomaton_1300
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 328, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 328, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1301 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1301
    del _BuildAutomaton_1301
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 329, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayInactivePlatforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 329, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1302 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1302
    del _BuildAutomaton_1302
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 330, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbolLegend')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 330, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1303 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1303
    del _BuildAutomaton_1303
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 331, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoughnessLegend')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 331, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1304 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1304
    del _BuildAutomaton_1304
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 332, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayVmapLegend')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 332, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1305 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1305
    del _BuildAutomaton_1305
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 333, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'TerrainEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 333, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1306 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1306
    del _BuildAutomaton_1306
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 334, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'RoughnessEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 334, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1307 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1307
    del _BuildAutomaton_1307
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 335, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'VmapEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 335, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1308 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1308
    del _BuildAutomaton_1308
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 336, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLatitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 336, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1309 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1309
    del _BuildAutomaton_1309
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 337, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeopoliticalCenterLongitude')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 337, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1310 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1310
    del _BuildAutomaton_1310
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 338, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayBarriers')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 338, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1311 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1311
    del _BuildAutomaton_1311
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 339, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayCoastline')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 339, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1312 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1312
    del _BuildAutomaton_1312
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 340, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayDepthLines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 340, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1313 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1313
    del _BuildAutomaton_1313
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 341, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPoliticalLines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 341, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1314 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1314
    del _BuildAutomaton_1314
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 342, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayCanals')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 342, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1315 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1315
    del _BuildAutomaton_1315
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 343, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayWaterways')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 343, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1316 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1316
    del _BuildAutomaton_1316
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 344, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayLandforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 344, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1317 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1317
    del _BuildAutomaton_1317
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 345, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRailroads')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 345, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1318 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1318
    del _BuildAutomaton_1318
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 346, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayRoads')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 346, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1319 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1319
    del _BuildAutomaton_1319
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 347, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayTrails')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 347, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1320 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1320
    del _BuildAutomaton_1320
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 348, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayStructures')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 348, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1321 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1321
    del _BuildAutomaton_1321
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 349, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPipelines')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 349, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1322 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1322
    del _BuildAutomaton_1322
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 350, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayUtilities')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 350, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1323 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1323
    del _BuildAutomaton_1323
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 351, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeotiffEnable')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 351, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1324 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1324
    del _BuildAutomaton_1324
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 352, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'GeotiffPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 352, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1325 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1325
    del _BuildAutomaton_1325
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 353, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiDisplaySettings._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptionsList')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 353, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1286 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1286
    del _BuildAutomaton_1286
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 315, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 316, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 317, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 318, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 319, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 320, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 321, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 322, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 323, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 324, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 325, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 326, 6))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 327, 6))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 328, 6))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 329, 6))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 330, 6))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 331, 6))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 332, 6))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 333, 6))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 334, 6))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 335, 6))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 336, 6))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 337, 6))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 338, 6))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 339, 6))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 340, 6))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 341, 6))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 342, 6))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 343, 6))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 344, 6))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 345, 6))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 346, 6))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 347, 6))
    counters.add(cc_32)
    cc_33 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 348, 6))
    counters.add(cc_33)
    cc_34 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 349, 6))
    counters.add(cc_34)
    cc_35 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 350, 6))
    counters.add(cc_35)
    cc_36 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 351, 6))
    counters.add(cc_36)
    cc_37 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 352, 6))
    counters.add(cc_37)
    cc_38 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 353, 6))
    counters.add(cc_38)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1287())
    sub_automata.append(_BuildAutomaton_1288())
    sub_automata.append(_BuildAutomaton_1289())
    sub_automata.append(_BuildAutomaton_1290())
    sub_automata.append(_BuildAutomaton_1291())
    sub_automata.append(_BuildAutomaton_1292())
    sub_automata.append(_BuildAutomaton_1293())
    sub_automata.append(_BuildAutomaton_1294())
    sub_automata.append(_BuildAutomaton_1295())
    sub_automata.append(_BuildAutomaton_1296())
    sub_automata.append(_BuildAutomaton_1297())
    sub_automata.append(_BuildAutomaton_1298())
    sub_automata.append(_BuildAutomaton_1299())
    sub_automata.append(_BuildAutomaton_1300())
    sub_automata.append(_BuildAutomaton_1301())
    sub_automata.append(_BuildAutomaton_1302())
    sub_automata.append(_BuildAutomaton_1303())
    sub_automata.append(_BuildAutomaton_1304())
    sub_automata.append(_BuildAutomaton_1305())
    sub_automata.append(_BuildAutomaton_1306())
    sub_automata.append(_BuildAutomaton_1307())
    sub_automata.append(_BuildAutomaton_1308())
    sub_automata.append(_BuildAutomaton_1309())
    sub_automata.append(_BuildAutomaton_1310())
    sub_automata.append(_BuildAutomaton_1311())
    sub_automata.append(_BuildAutomaton_1312())
    sub_automata.append(_BuildAutomaton_1313())
    sub_automata.append(_BuildAutomaton_1314())
    sub_automata.append(_BuildAutomaton_1315())
    sub_automata.append(_BuildAutomaton_1316())
    sub_automata.append(_BuildAutomaton_1317())
    sub_automata.append(_BuildAutomaton_1318())
    sub_automata.append(_BuildAutomaton_1319())
    sub_automata.append(_BuildAutomaton_1320())
    sub_automata.append(_BuildAutomaton_1321())
    sub_automata.append(_BuildAutomaton_1322())
    sub_automata.append(_BuildAutomaton_1323())
    sub_automata.append(_BuildAutomaton_1324())
    sub_automata.append(_BuildAutomaton_1325())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 314, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGuiDisplaySettings._Automaton = _BuildAutomaton_1286()




ctSituationDisplayPlatformOptionsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions'), ctSituationDisplayPlatformOptions, scope=ctSituationDisplayPlatformOptionsList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 359, 6)))

def _BuildAutomaton_1326 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1326
    del _BuildAutomaton_1326
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 358, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplayPlatformOptionsList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 359, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSituationDisplayPlatformOptionsList._Automaton = _BuildAutomaton_1326()




ctSituationDisplayPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber'), stIntUserPlatformNumber, scope=ctSituationDisplayPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 365, 6)))

ctSituationDisplayPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatform'), stBoolDisplayPlatform, scope=ctSituationDisplayPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 366, 6)))

ctSituationDisplayPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPath'), stBoolDisplayPath, scope=ctSituationDisplayPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 367, 6)))

def _BuildAutomaton_1328 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1328
    del _BuildAutomaton_1328
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 365, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplayPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 365, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1329 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1329
    del _BuildAutomaton_1329
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 366, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplayPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPlatform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 366, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1330 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1330
    del _BuildAutomaton_1330
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 367, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSituationDisplayPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 367, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1327 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1327
    del _BuildAutomaton_1327
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 365, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 366, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 367, 6))
    counters.add(cc_2)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1328())
    sub_automata.append(_BuildAutomaton_1329())
    sub_automata.append(_BuildAutomaton_1330())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 364, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSituationDisplayPlatformOptions._Automaton = _BuildAutomaton_1327()




ctGuiPlatformOptionsList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions'), ctGuiPlatformOptions, scope=ctGuiPlatformOptionsList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 373, 6)))

def _BuildAutomaton_1331 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1331
    del _BuildAutomaton_1331
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 372, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiPlatformOptionsList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformDisplayOptions')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 373, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGuiPlatformOptionsList._Automaton = _BuildAutomaton_1331()




ctGuiPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber'), stIntUserPlatformNumber, scope=ctGuiPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 379, 6)))

ctGuiPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbol'), stBoolDisplaySymbol, scope=ctGuiPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 380, 6)))

ctGuiPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory'), stBoolDisplayPathHistory, scope=ctGuiPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 381, 6)))

ctGuiPlatformOptions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath'), stBoolDisplayProjectedPath, scope=ctGuiPlatformOptions, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 382, 6)))

def _BuildAutomaton_1333 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1333
    del _BuildAutomaton_1333
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 379, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformNumber')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 379, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1334 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1334
    del _BuildAutomaton_1334
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 380, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplaySymbol')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 380, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1335 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1335
    del _BuildAutomaton_1335
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 381, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayPathHistory')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 381, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1336 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1336
    del _BuildAutomaton_1336
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 382, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctGuiPlatformOptions._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'DisplayProjectedPath')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 382, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1332 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1332
    del _BuildAutomaton_1332
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 379, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 380, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 381, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 382, 6))
    counters.add(cc_3)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1333())
    sub_automata.append(_BuildAutomaton_1334())
    sub_automata.append(_BuildAutomaton_1335())
    sub_automata.append(_BuildAutomaton_1336())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/scenarioDataR1-1.xsd', 378, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctGuiPlatformOptions._Automaton = _BuildAutomaton_1332()




ctEmitterModeList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode'), ctEmitterMode, scope=ctEmitterModeList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 105, 6)))

def _BuildAutomaton_1337 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1337
    del _BuildAutomaton_1337
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 104, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterModeList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 105, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmitterModeList._Automaton = _BuildAutomaton_1337()




ctEmitterFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), ctEmitterHeader, scope=ctEmitterFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 111, 6)))

ctEmitterFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript'), ctEmitterScriptEventList, scope=ctEmitterFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 112, 6)))

ctEmitterFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes'), ctEmitterModeList, scope=ctEmitterFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 118, 6)))

def _BuildAutomaton_1339 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1339
    del _BuildAutomaton_1339
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmitterFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 111, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1340 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1340
    del _BuildAutomaton_1340
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 112, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterScript')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 112, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1341 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1341
    del _BuildAutomaton_1341
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 118, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 118, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1338 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1338
    del _BuildAutomaton_1338
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 112, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 118, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1339())
    sub_automata.append(_BuildAutomaton_1340())
    sub_automata.append(_BuildAutomaton_1341())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 110, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmitterFullData._Automaton = _BuildAutomaton_1338()




ctEmitterFullDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), ctEmitterFullData, scope=ctEmitterFullDataList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 130, 6)))

def _BuildAutomaton_1342 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1342
    del _BuildAutomaton_1342
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 129, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmitterFullDataList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 130, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmitterFullDataList._Automaton = _BuildAutomaton_1342()




ctPlatformFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader'), ctPlatformHeader, scope=ctPlatformFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 136, 6)))

ctPlatformFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'PlatformScript'), ctPlatformScriptEventList, scope=ctPlatformFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 137, 6)))

ctPlatformFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emitters'), ctEmitterFullDataList, scope=ctPlatformFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 138, 6)))

def _BuildAutomaton_1344 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1344
    del _BuildAutomaton_1344
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctPlatformFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 136, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1345 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1345
    del _BuildAutomaton_1345
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 137, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'PlatformScript')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 137, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1346 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1346
    del _BuildAutomaton_1346
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 138, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctPlatformFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emitters')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 138, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1343 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1343
    del _BuildAutomaton_1343
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 137, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 138, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1344())
    sub_automata.append(_BuildAutomaton_1345())
    sub_automata.append(_BuildAutomaton_1346())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 135, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctPlatformFullData._Automaton = _BuildAutomaton_1343()




ctScenarioPlatformFullDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Platform'), ctPlatformFullData, scope=ctScenarioPlatformFullDataList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 145, 6)))

def _BuildAutomaton_1347 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1347
    del _BuildAutomaton_1347
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 144, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioPlatformFullDataList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Platform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 145, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScenarioPlatformFullDataList._Automaton = _BuildAutomaton_1347()




ctSelPlatformFullDataList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Platform'), ctPlatformFullData, scope=ctSelPlatformFullDataList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 151, 6)))

def _BuildAutomaton_1348 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1348
    del _BuildAutomaton_1348
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 150, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSelPlatformFullDataList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Platform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 151, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSelPlatformFullDataList._Automaton = _BuildAutomaton_1348()




ctScenarioFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader'), ctScenarioHeader, scope=ctScenarioFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 163, 6)))

ctScenarioFullData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Platforms'), ctScenarioPlatformFullDataList, scope=ctScenarioFullData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 164, 6)))

def _BuildAutomaton_1350 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1350
    del _BuildAutomaton_1350
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 163, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'ScenarioHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 163, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1351 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1351
    del _BuildAutomaton_1351
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 164, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctScenarioFullData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Platforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 164, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1349 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1349
    del _BuildAutomaton_1349
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 163, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 164, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1350())
    sub_automata.append(_BuildAutomaton_1351())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 162, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctScenarioFullData._Automaton = _BuildAutomaton_1349()




ctSel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'SelHeader'), ctModificationHeader, scope=ctSel, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 171, 6)))

ctSel._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Platforms'), ctSelPlatformFullDataList, scope=ctSel, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 172, 6)))

def _BuildAutomaton_1353 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1353
    del _BuildAutomaton_1353
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 171, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSel._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'SelHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 171, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1354 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1354
    del _BuildAutomaton_1354
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 172, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctSel._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Platforms')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 172, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1352 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1352
    del _BuildAutomaton_1352
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 171, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 172, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1353())
    sub_automata.append(_BuildAutomaton_1354())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 170, 5)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctSel._Automaton = _BuildAutomaton_1352()




ctEmlEmitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader'), ctEmitterHeader, scope=ctEmlEmitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 179, 6)))

ctEmlEmitter._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes'), ctEmitterModeList, scope=ctEmlEmitter, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 180, 6)))

def _BuildAutomaton_1356 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1356
    del _BuildAutomaton_1356
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctEmlEmitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 179, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_1357 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1357
    del _BuildAutomaton_1357
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 180, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmlEmitter._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterModes')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 180, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1355 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1355
    del _BuildAutomaton_1355
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 180, 6))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1356())
    sub_automata.append(_BuildAutomaton_1357())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 178, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctEmlEmitter._Automaton = _BuildAutomaton_1355()




ctEmlEmitterList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), ctEmlEmitter, scope=ctEmlEmitterList, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 192, 6)))

def _BuildAutomaton_1358 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1358
    del _BuildAutomaton_1358
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 191, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEmlEmitterList._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 192, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEmlEmitterList._Automaton = _BuildAutomaton_1358()




ctEml._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmlHeader'), ctModificationHeader, scope=ctEml, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 198, 6)))

ctEml._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emitters'), ctEmlEmitterList, scope=ctEml, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 199, 6)))

def _BuildAutomaton_1360 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1360
    del _BuildAutomaton_1360
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 198, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEml._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmlHeader')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 198, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1361 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1361
    del _BuildAutomaton_1361
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 199, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ctEml._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emitters')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 199, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_1359 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1359
    del _BuildAutomaton_1359
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 198, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 199, 6))
    counters.add(cc_1)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_1360())
    sub_automata.append(_BuildAutomaton_1361())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 197, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ctEml._Automaton = _BuildAutomaton_1359()




ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode'), ctEmitterMode, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 65, 6)))

ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Emitter'), ctEmitterFullData, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 67, 6)))

ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Platform'), ctPlatformFullData, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 69, 6)))

ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Scenario'), ctScenarioFullData, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 71, 6)))

ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Sel'), ctSel, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 82, 6)))

ctSimEntityData._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'Eml'), ctEml, scope=ctSimEntityData, location=pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 89, 6)))

def _BuildAutomaton_1362 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_1362
    del _BuildAutomaton_1362
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'EmitterMode')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 65, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Emitter')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 67, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Platform')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 69, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Scenario')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 71, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Sel')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 82, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ctSimEntityData._UseForTag(pyxb.namespace.ExpandedName(Namespace, 'Eml')), pyxb.utils.utility.Location('/mnt/d/Repositories/data-translation/data/ceesim/schema/simulation/simEntityRootR1-2.xsd', 89, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ctSimEntityData._Automaton = _BuildAutomaton_1362()

